; Generated by Coffee-AHK/0.0.37
global __ci_genshin__ := Func("genshin_149")
if (A_IsAdmin != true) {
  Run *RunAs "%A_ScriptFullPath%"
  ExitApp
}
#HotkeyInterval, 1000
#KeyHistory, 0
#MaxHotkeysPerInterval, 200
#MaxThreads, 20
#NoEnv
#Persistent
#SingleInstance, Force
#UseHook, On

CoordMode, Mouse, Client
CoordMode, Pixel, Client
CoordMode, ToolTip, Client
SendMode, Event
SetBatchLines, 100ms
SetKeyDelay, 0, 50
SetMouseDelay, 0, 50
StringCaseSense, On
; Generated by Coffee-AHK/0.0.37
global __ci_shell__ := Func("shell_116")
global $ := {}
$.abs := Func("shell_115")
$.add := Func("shell_114")
$.alert := Func("shell_113").Bind(msg)
$.beep := Func("shell_111")
$.bind := Func("shell_110")
$.blockInput := Func("shell_109")
$.ceil := Func("shell_108")
$.chunk := Func("shell_107")
$.clearInterval := Func("shell_106")
$.clearTimeout := Func("shell_105")
$.click := Func("shell_104")
$.clone := Func("shell_103")
$.compact := Func("shell_102")
$.concat := Func("shell_101")
global __iDebounce__ := 0
global __tDebounce__ := {}
$.debounce := Func("shell_100")
$.defer := Func("shell_98")
$.delay := Func("shell_96")
$.drop := Func("shell_94")
$.each := Func("shell_93")
class EmitterShellX {
  bus := []
  emit := Func("shell_92").Bind(this)
  off := Func("shell_91").Bind(this)
  on := Func("shell_90").Bind(this)
}
$.emitter := Func("shell_89")
$.eq := Func("shell_88")
$.exit := Func("shell_87")
class FileShellX {
  name := ""
  __New(name) {
    __vt__.Call("file.constructor", name, "string")
    this.name := name
  }
  append := Func("shell_86").Bind(this)
  exist := Func("shell_85").Bind(this)
  delete := Func("shell_84").Bind(this)
  load := Func("shell_83").Bind(this)
  save := Func("shell_82").Bind(this)
}
$.file := Func("shell_81")
$.findColor := Func("shell_80")
$.findImage := Func("shell_79")
$.first := Func("shell_78")
$.head := $.first
$.floor := Func("shell_77")
$.formatHotkey := Func("shell_76")
global __formatKeyFormatHotkey__ := Func("shell_75")
global __pickPrefixFormatHotkey__ := Func("shell_74")
$.getColor := Func("shell_73")
$.getPosition := Func("shell_72")
$.getState := Func("shell_71")
$.gt := Func("shell_70")
$.gte := Func("shell_69")
$.i := Func("shell_68")
$.includes := Func("shell_67")
$.info := Func("shell_66")
$.isArray := Func("shell_65")
$.isFunction := Func("shell_64")
$.isNumber := Func("shell_63")
$.isObject := Func("shell_62")
$.isString := Func("shell_61")
$.join := Func("shell_60")
class KeyBindingShellX {
  mapBound := {}
  mapCallback := {}
  add := Func("shell_59").Bind(this)
  fire := Func("shell_58").Bind(this)
  init := Func("shell_57").Bind(this)
  off := Func("shell_55").Bind(this)
  on := Func("shell_54").Bind(this)
  remove := Func("shell_53").Bind(this)
}
global keyBindingShell := new KeyBindingShellX()
$.off := keyBindingShell.remove
$.on := keyBindingShell.add
$.trigger := keyBindingShell.fire
$.keys := Func("shell_52")
$.last := Func("shell_51")
$.length := Func("shell_50")
$.lt := Func("shell_49")
$.lte := Func("shell_48")
$.map := Func("shell_47")
$.mixin := Func("shell_46")
$.mod := Func("shell_45")
$.move := Func("shell_44")
$.noop := Func("shell_43")
$.now := Func("shell_42")
$.nth := Func("shell_41")
global __cacheOnce__ := {}
global __indexOnce__ := 0
$.once := Func("shell_40").Bind(args)
$.open := Func("shell_38")
$.play := Func("shell_37")
$.press := Func("shell_36")
global __formatInputPress__ := Func("shell_35")
global __validateInputPress__ := Func("shell_34")
$.push := Func("shell_33")
$.random := Func("shell_32")
$.range := Func("shell_31")
$.reload := Func("shell_30")
$.replace := Func("shell_29")
$.reverse := Func("shell_28")
$.round := Func("shell_27")
$.setFixed := Func("shell_26")
$.setInterval := Func("shell_25")
$.setTimeout := Func("shell_24")
$.shuffle := Func("shell_23").Bind(__split__)
$.sleep := Func("shell_22")
$.slice := Func("shell_21")
global __pickArgumentSlice__ := Func("shell_20")
$.sort := Func("shell_19")
$.split := Func("shell_18")
$.sum := Func("shell_17")
$.suspend := Func("shell_16")
$.tail := Func("shell_15")
$.take := Func("shell_14")
global __iThrottle__ := 0
global __tThrottle__ := {}
global __tsThrottle__ := {}
$.throttle := Func("shell_13")
$.toLowerCase := Func("shell_10")
$.toLower := $.toLowerCase
$.toString := Func("shell_9")
$.toUpperCase := Func("shell_8")
$.toUpper := $.toUpperCase
$.trim := Func("shell_7")
$.trimEnd := Func("shell_6")
$.trimStart := Func("shell_5")
$.type := Func("shell_4")
$.uniq := Func("shell_3")
global __vt__ := Func("shell_2")
$.values := Func("shell_1")
$.VERSION := "0.0.9"
shell_1(input) {
  __vt__.Call("values", input, "object")
  __listResult__ := []
  for __index_for__, __key__ in $.keys.Call(input) {
    $.push.Call(__listResult__, input[__ci_shell__.Call(__key__)])
  }
  return __listResult__
}
shell_2(name, target, type*) {
  __type__ := $.type.Call(target)
  if !($.includes.Call(type, __type__)) {
    throw Exception("$." . (name) . ": invalid type '" . (__type__) . "'")
  }
}
shell_3(list) {
  __vt__.Call("uniq", list, "array")
  __hasString__ := false
  for __index_for__, __item__ in list {
    if (($.type.Call(__item__)) == "string") {
      __hasString__ := true
      break
    }
  }
  __string__ := $.join.Call(list, ",")
  if (__hasString__) {
    Sort, __string__, C U D,
  } else {
    Sort, __string__, N U D,
  }
  return $.split.Call(__string__, ",")
}
shell_4(input) {
  if input is Number
    return "number"
  if (IsFunc(input)) {
    return "function"
  }
  if (IsObject(input)) {
    if (input.Count() == input.Length()) {
      if !(input.Length() >= 0) {
        return "function"
      }
      return "array"
    }
    return "object"
  }
  return "string"
}
shell_5(input, omitting := " `t") {
  return LTrim(input, omitting)
}
shell_6(input, omitting := " `t") {
  return RTrim(input, omitting)
}
shell_7(input, omitting := " `t") {
  return Trim(input, omitting)
}
shell_8(input) {
  StringUpper, __result__, input
  return __result__
}
shell_9(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    __result__ := ""
    for __index_for__, key in input {
      __result__ := "" . (__result__) . ", " . ($.toString.Call(key)) . ""
    }
    return "[" . ($.trim.Call(__result__, " ,")) . "]"
  } else if (__type__ == "object") {
    __result__ := ""
    for key, value in input {
      __result__ := "" . (__result__) . ", " . (key) . ": " . ($.toString.Call(value)) . ""
    }
    return "{" . ($.trim.Call(__result__, " ,")) . "}"
  }
  return input
}
shell_10(input) {
  StringLower, __result__, input
  return __result__
}
shell_11(callback, index) {
  callback.Call()
  __tsThrottle__[__ci_shell__.Call(index)] := $.now.Call()
}
shell_12(callback, time, index) {
  $.clearTimeout.Call(__tThrottle__[__ci_shell__.Call(index)])
  __tThrottle__[__ci_shell__.Call(index)] := $.setTimeout.Call(Func("shell_11").Bind(callback, index), __tsThrottle__[__ci_shell__.Call(index)] - $.now.Call() + time)
}
shell_13(time, callback) {
  __vt__.Call("throttle", time, "number")
  __vt__.Call("throttle", callback, "function")
  __iThrottle__++
  __tsThrottle__[__ci_shell__.Call(__iThrottle__)] := 0
  return Func("shell_12").Bind(callback, time, __iThrottle__)
}
shell_14(list, count := 1) {
  __vt__.Call("take", list, "array")
  __vt__.Call("take", count, "number")
  __len__ := $.length.Call(list)
  if !(__len__) {
    return []
  }
  if !(count >= 0) {
    return []
  }
  if (count >= __len__) {
    count := __len__
  }
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if (__i__ >= count) {
      break
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_15(list) {
  __vt__.Call("tail", list, "array")
  return $.drop.Call(list, 1)
}
shell_16(isSuspended := "Toggle") {
  if (isSuspended != "Toggle") {
    if (isSuspended) {
      isSuspended := "On"
    } else {
      isSuspended := "Off"
    }
  }
  Suspend, % isSuspended
}
shell_17(list) {
  __vt__.Call("sum", list, "array")
  __result__ := 0
  for __index_for__, __n__ in list {
    __result__ := __result__ + __n__
  }
  return __result__
}
shell_18(input, delimiter) {
  return StrSplit(input, delimiter)
}
shell_19(list) {
  __vt__.Call("sort", list, "array")
  __hasString__ := false
  for __index_for__, __item__ in list {
    if (($.type.Call(__item__)) == "string") {
      __hasString__ := true
      break
    }
  }
  __string__ := $.join.Call(list, ",")
  if (__hasString__) {
    Sort, __string__, C D,
  } else {
    Sort, __string__, N D,
  }
  return $.split.Call(__string__, ",")
}
shell_20(args) {
  switch $.length.Call(args) {
    case 1: {
      __array__ := [args[1], 0, $.length.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], $.length.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
  }
  __vt__.Call("slice", __list__, "array")
  __vt__.Call("slice", __start__, "number")
  __vt__.Call("slice", __end__, "number")
  return [__list__, __start__, __end__]
}
shell_21(args*) {
  __array__ := __pickArgumentSlice__.Call(args)
  __list__ := __array__[1]
  __start__ := __array__[2]
  __end__ := __array__[3]
  __len__ := $.length.Call(__list__)
  if (__start__ > __len__) {
    __start__ := __len__
  }
  if (__start__ < 0) {
    __start__ := __len__ + __start__
  }
  if (__end__ > __len__) {
    __end__ := __len__
  }
  if (__end__ < 0) {
    __end__ := __len__ + __end__
  }
  __isReverse__ := false
  if (__start__ > __end__) {
    __isReverse__ := true
    __array__ := [__end__, __start__]
    __start__ := __array__[1]
    __end__ := __array__[2]
  }
  __listNew__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    $.push.Call(__listNew__, __list__[__ci_shell__.Call(__start__ + __n__)])
    __n__++
  }
  if (__isReverse__) {
    return $.reverse.Call(__listNew__)
  }
  return __listNew__
}
shell_22(time) {
  __vt__.Call("sleep", time, "number")
  Sleep, % time
}
shell_23(__split__, list) {
  __vt__.Call("shuffle", list, "array")
  __string__ := $.join.Call(list, ",")
  Sort, __string__, Random D,
  return __split__.Call(__string__, ",")
}
shell_24(callback, time) {
  __vt__.Call("setTimeout", callback, "function")
  __vt__.Call("setTimeout", time, "number")
  callback := $.bind.Call(callback)
  if !($.isNumber.Call(time)) {
    throw Exception("$.setTimeout: invalid type")
  }
  if (time <= 0) {
    time := 1
  }
  SetTimer, % callback, % 0 - time
  return callback
}
shell_25(callback, time) {
  __vt__.Call("setInterval", callback, "function")
  __vt__.Call("setInterval", time, "number")
  callback := $.bind.Call(callback)
  if !(time > 0) {
    throw Exception("$.setInterval: invalid value")
  }
  SetTimer, % callback, % time
  return callback
}
shell_26(isFixed := "Toggle") {
  if (isFixed != "Toggle") {
    if (isFixed) {
      isFixed := "On"
    } else {
      isFixed := "Off"
    }
  }
  Winset AlwaysOnTop, % isFixed, A
}
shell_27(n) {
  __vt__.Call("round", n, "number")
  return Round(n)
}
shell_28(list) {
  __vt__.Call("reverse", list, "array")
  __len__ := $.length.Call(list)
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    __listNew__[__ci_shell__.Call(__len__ - 1 - __i__)] := __item__
  }
  for __i__, __item__ in __listNew__ {
    __i__ := __i__ - 1
    list[__ci_shell__.Call(__i__)] := __item__
  }
  return list
}
shell_29(input, searchment, replacement, limit := -1) {
  return StrReplace(input, searchment, replacement, limit)
}
shell_30() {
  Reload
}
shell_31(args*) {
  switch $.length.Call(args) {
    case 1: {
      __array__ := [0, args[1], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    default: {
      throw Exception("$.range: invalid arguments")
    }
  }
  __vt__.Call("range", __start__, "number")
  __vt__.Call("range", __end__, "number")
  __vt__.Call("range", __step__, "number")
  if (__start__ == __end__) {
    return [__start__]
  }
  if (__start__ > __end__) {
    return []
  }
  __listResult__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    $.push.Call(__listResult__, __start__ + __step__ * __n__)
    __n__++
  }
  return __listResult__
}
shell_32(min := 0, max := 1) {
  __vt__.Call("random", min, "number")
  __vt__.Call("random", max, "number")
  Random, __result__, min, max
  return __result__
}
shell_33(list, args*) {
  __vt__.Call("push", list, "array")
  for __index_for__, __arg__ in args {
    list.Push(__arg__)
  }
  return list
}
shell_34(listInput) {
  if !($.length.Call(listInput)) {
    return false
  }
  __key__ := listInput[1]
  if ($.includes.Call(__key__, "-button")) {
    __key__ := $.replace.Call(__key__, "l-button", "left")
    __key__ := $.replace.Call(__key__, "m-button", "middle")
    __key__ := $.replace.Call(__key__, "r-button", "right")
    $.click.Call(__key__)
    return false
  }
  return true
}
shell_35(listInput) {
  __listKey__ := []
  for __index_for__, __input__ in listInput {
    __ipt__ := $.toLowerCase.Call(__input__)
    __ipt__ := $.replace.Call(__ipt__, " ", "")
    __ipt__ := $.replace.Call(__ipt__, "-", "")
    $.push.Call(__listKey__, ($.split.Call(__ipt__, "+"))*)
  }
  return __listKey__
}
shell_36(listInput*) {
  if !(__validateInputPress__.Call(listInput)) {
    return
  }
  __listKey__ := __formatInputPress__.Call(listInput)
  __listResult__ := []
  __len__ := $.length.Call(__listKey__)
  for __i__, __key__ in __listKey__ {
    __i__ := __i__ - 1
    if (__i__ == __len__ - 1) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      continue
    }
    if ($.includes.Call(__key__, ":")) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := $.split.Call(__key__, ":")
    } else {
      __listResult__[__ci_shell__.Call(__i__)] := [__key__, "down"]
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := [__key__, "up"]
    }
  }
  for __i__, __it__ in __listResult__ {
    __i__ := __i__ - 1
    if (__it__[1] == "win") {
      __it__[1] := "lwin"
    }
    __listResult__[__ci_shell__.Call(__i__)] := $.trim.Call("" . (__it__[1]) . " " . (__it__[2]) . "")
  }
  __result__ := ""
  for __index_for__, __it__ in __listResult__ {
    __result__ := "" . (__result__) . "{" . (__it__) . "}"
  }
  Send, % __result__
}
shell_37(filename) {
  __vt__.Call("play", filename, "string")
  SoundPlay, % filename
}
shell_38(source) {
  __vt__.Call("open", source, "string")
  Run, % source
}
shell_39(__i__, callback, args*) {
  if (__cacheOnce__[__ci_shell__.Call(__i__)][1]) {
    return __cacheOnce__[__ci_shell__.Call(__i__)][2]
  }
  __result__ := callback.Call(args*)
  __cacheOnce__[__ci_shell__.Call(__i__)] := [true, __result__]
  return __result__
}
shell_40(args, callback) {
  __vt__.Call("once", callback, "function")
  __i__ := __indexOnce__
  __indexOnce__++
  __cacheOnce__[__ci_shell__.Call(__i__)] := [false, ""]
  return Func("shell_39").Bind(__i__, callback)
}
shell_41(list, n := 0) {
  __vt__.Call("nth", list, "array")
  __vt__.Call("nth", n, "number")
  if (n >= 0) {
    return list[__ci_shell__.Call(n)]
  } else {
    return list[__ci_shell__.Call(($.length.Call(list)) + n)]
  }
}
shell_42() {
  return A_TickCount
}
shell_43() {
  return
}
shell_44(point := "", speed := 0) {
  __vt__.Call("move", point, "array")
  __vt__.Call("move", speed, "number")
  MouseMove, point[1], point[2], speed
}
shell_45(dividend, divisor) {
  __vt__.Call("mod", dividend, "number")
  __vt__.Call("mod", divisor, "number")
  return Mod(dividend, divisor)
}
shell_46(args*) {
  switch $.length.Call(args) {
    case 1: {
      __array__ := [{}, args[1]]
      __target__ := __array__[1]
      __source__ := __array__[2]
    }
    case 2: {
      __array__ := args
      __target__ := __array__[1]
      __source__ := __array__[2]
    }
    default: {
      throw Exception("$.mixin: invalid arguments")
    }
  }
  __vt__.Call("mixin", __target__, "object")
  __vt__.Call("mixin", __source__, "object")
  for __key__, __value__ in __source__ {
    __target__[__ci_shell__.Call(__key__)] := __value__
  }
  return __target__
}
shell_47(list, callback) {
  __vt__.Call("map", list, "array")
  __vt__.Call("map", callback, "function")
  __listResult__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    $.push.Call(__listResult__, callback.Call(__item__, __i__))
  }
  return __listResult__
}
shell_48(value, other) {
  return value <= other
}
shell_49(value, other) {
  return value < other
}
shell_50(input) {
  __type__ := $.type.Call(input)
  switch __type__ {
    case "array": {
      return input.Length()
    }
    case "object": {
      return input.Count()
    }
    case "string": {
      return StrLen(input)
    }
    default: {
      throw Exception("$.length: invalid type '" . (__type__) . "'")
    }
  }
}
shell_51(list) {
  __vt__.Call("last", list, "array")
  return list[__ci_shell__.Call(($.length.Call(list)) - 1)]
}
shell_52(input) {
  __vt__.Call("keys", input, "object")
  __listResult__ := []
  for __key__, __value__ in input {
    $.push.Call(__listResult__, __key__)
  }
  return $.sort.Call(__listResult__)
}
shell_53(this, key) {
  __vt__.Call("keyBinding.remove", key, "string", "number")
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  __listNew__ := []
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if (__item__[1] == __name__) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  if !($.length.Call(__listNew__)) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := __listNew__
  return $
}
shell_54(this, key, callback) {
  __vt__.Call("keyBinding.on", key, "string", "number")
  __vt__.Call("keyBinding.on", callback, "function")
  key := $.formatHotkey.Call($.replace.Call(key, ":down", ""))
  Hotkey, % key, % callback, On
  return $
}
shell_55(this, key, callback) {
  __vt__.Call("keyBinding.off", key, "string", "number")
  __vt__.Call("keyBinding.off", key, callback, "function")
  key := $.formatHotkey.Call($.replace.Call(key, ":down", ""))
  Hotkey, % key, % callback, Off
  return $
}
shell_56(key, this) {
  this.fire.Call(key)
}
shell_57(this, key) {
  __vt__.Call("keyBinding.init", key, "string", "number")
  if (this.mapCallback[__ci_shell__.Call(key)]) {
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := []
  __fn__ := Func("shell_56").Bind(key, this)
  this.mapBound[__ci_shell__.Call(key)] := __fn__
  this.on.Call(key, __fn__)
}
shell_58(this, key) {
  __vt__.Call("keyBinding.fire", key, "string", "number")
  __array__ := $.split.Call(($.replace.Call(key, ":down", "")), ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
      __item__[2].Call()
    }
    return $
  }
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if !(__item__[1] == __name__) {
      continue
    }
    __item__[2].Call()
  }
  return $
}
shell_59(this, key, callback) {
  __vt__.Call("keyBinding.add", key, "string", "number")
  __vt__.Call("keyBinding.add", callback, "function")
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  this.init.Call(key)
  $.push.Call(this.mapCallback[__ci_shell__.Call(key)], [__name__, callback])
  return $
}
shell_60(list, seperator := "") {
  __vt__.Call("join", list, "array")
  __result__ := ""
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__) {
      __result__ := __item__
      continue
    }
    __result__ := "" . (__result__) . "" . (seperator) . "" . (__item__) . ""
  }
  return __result__
}
shell_61(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "string") {
    return false
  }
  return true
}
shell_62(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "object") {
    return false
  }
  return true
}
shell_63(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "number") {
    return false
  }
  return true
}
shell_64(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "function") {
    return false
  }
  return true
}
shell_65(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "array") {
    return false
  }
  return true
}
shell_66(message, point := "") {
  if !(message) {
    return message
  }
  if !(point) {
    point := $.getPosition.Call()
  }
  __vt__.Call("info", point, "array")
  __msg__ := $.toString.Call(message)
  ToolTip, % __msg__, % point[1], % point[2]
  return message
}
shell_67(input, needle) {
  __type__ := $.type.Call(input)
  if (__type__ == "string" || __type__ == "number") {
    return (InStr(input, needle)) > 0
  }
  if (__type__ == "array") {
    for __index_for__, __it__ in input {
      if (__it__ == needle) {
        return true
      }
    }
    return false
  }
  throw Exception("$.includes: invalid type '" . (__type__) . "'")
}
shell_68(message) {
  $.info.Call("[" . ($.now.Call()) . "] " . ($.toString.Call(message)) . "", [0, 0])
  return message
}
shell_69(value, other) {
  return value >= other
}
shell_70(value, other) {
  return value > other
}
shell_71(key) {
  key := $.formatHotkey.Call(key)
  return GetKeyState(key, "P")
}
shell_72() {
  MouseGetPos, __x__, __y__
  return [__x__, __y__]
}
shell_73(point := "") {
  if !(point) {
    point := $.getPosition.Call()
  }
  __vt__.Call("getColor", point, "array")
  PixelGetColor, __result__, % point[1], % point[2], RGB
  return __result__
}
shell_74(listKey) {
  if (($.length.Call(listKey)) == 1) {
    return ["", listKey]
  }
  __prefix__ := ""
  __listNew__ := []
  for __index_for__, __key__ in listKey {
    if (__key__ == "alt") {
      __prefix__ := "" . (__prefix__) . "!"
      continue
    }
    if (__key__ == "ctrl") {
      __prefix__ := "" . (__prefix__) . "^"
      continue
    }
    if (__key__ == "shift") {
      __prefix__ := "" . (__prefix__) . "+"
      continue
    }
    if (__key__ == "win") {
      __prefix__ := "" . (__prefix__) . "#"
      continue
    }
    $.push.Call(__listNew__, __key__)
  }
  return [__prefix__, __listNew__]
}
shell_75(key) {
  __listKey__ := []
  __key__ := $.toLowerCase.Call(key)
  __key__ := $.replace.Call(__key__, " ", "")
  __key__ := $.replace.Call(__key__, "-", "")
  $.push.Call(__listKey__, ($.split.Call(__key__, "+"))*)
  return __listKey__
}
shell_76(key) {
  __listKey__ := __formatKeyFormatHotkey__.Call(key)
  __array__ := __pickPrefixFormatHotkey__.Call(__listKey__)
  __prefix__ := __array__[1]
  __listKey__ := __array__[2]
  __result__ := ""
  for __index_for__, __it__ in __listKey__ {
    __result__ := "" . (__result__) . " & " . (__it__) . ""
  }
  return $.replace.Call("" . (__prefix__) . "" . ($.trim.Call(__result__, " &")) . "", ":", " ")
}
shell_77(n) {
  __vt__.Call("floor", n, "number")
  return Floor(n)
}
shell_78(list) {
  __vt__.Call("first", list, "array")
  return list[1]
}
shell_79(source, start := "", end := "") {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  ImageSearch __x__, __y__, start[1], start[2], end[1], end[2], % A_ScriptDir . "\\\" . source
  return [__x__, __y__]
}
shell_80(color, start := "", end := "", variation := 0) {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  PixelSearch __x__, __y__, start[1], start[2], end[1], end[2], color, variation, Fast RGB
  return [__x__, __y__]
}
shell_81(name) {
  return new FileShellX(name)
}
shell_82(this, content) {
  this.delete.Call()
  return this.append.Call(content)
}
shell_83(this) {
  if !(this.exist.Call()) {
    return ""
  }
  FileRead, __result__, % this.name
  return $.replace.Call(__result__, "`r", "")
}
shell_84(this) {
  if !(this.exist.Call()) {
    return this
  }
  FileDelete, % this.name
  return this
}
shell_85(this) {
  if !(FileExist(this.name)) {
    return false
  }
  return true
}
shell_86(this, content) {
  FileAppend, % content, % this.name, UTF-8
  return content
}
shell_87() {
  ExitApp
}
shell_88(value, other) {
  return value == other
}
shell_89() {
  return new EmitterShellX
}
shell_90(this, key, callback) {
  __vt__.Call("emitter.on", key, "string")
  __vt__.Call("emitter.on", callback, "function")
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  $.push.Call(this.bus, [__type__, __name__, callback])
  return this
}
shell_91(this, key) {
  __vt__.Call("emitter.off", key, "string")
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    this.bus := []
    return this
  }
  if !(__name__) {
    __busNew__ := []
    for __index_for__, __item__ in this.bus {
      if (__item__[1] == __type__) {
        continue
      }
      $.push.Call(__busNew__, __item__)
    }
    this.bus := __busNew__
    return this
  }
  __busNew__ := []
  for __index_for__, __item__ in this.bus {
    if (__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    $.push.Call(__busNew__, __item__)
  }
  this.bus := __busNew__
  return this
}
shell_92(this, key, args*) {
  __vt__.Call("emitter.emit", key, "string")
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    return this
  }
  if !(__name__) {
    for __index_for__, __item__ in this.bus {
      if !(__item__[1] == __type__) {
        continue
      }
      __item__[3].Call(args*)
    }
    return this
  }
  for __index_for__, __item__ in this.bus {
    if !(__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    __item__[3].Call(args*)
  }
  return this
}
shell_93(list, callback) {
  __vt__.Call("each", list, "array")
  __vt__.Call("each", callback, "function")
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    callback.Call(__item__, __i__)
  }
}
shell_94(list, n := 1) {
  __vt__.Call("drop", list, "array")
  __vt__.Call("drop", n, "number")
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__ >= n) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_95(callback, args) {
  callback.Call(args*)
}
shell_96(callback, time, args*) {
  __vt__.Call("delay", callback, "function")
  __vt__.Call("delay", time, "number")
  __timer__ := $.setTimeout.Call(Func("shell_95").Bind(callback, args), time)
  return __timer__
}
shell_97(callback, args) {
  callback.Call(args*)
}
shell_98(callback, args*) {
  __vt__.Call("defer", callback, "function")
  return $.delay.Call(Func("shell_97").Bind(callback, args), 1)
}
shell_99(callback, time, index) {
  $.clearTimeout.Call(__tDebounce__[__ci_shell__.Call(index)])
  __tDebounce__[__ci_shell__.Call(index)] := $.setTimeout.Call(callback, time)
}
shell_100(time, callback) {
  __vt__.Call("debounce", time, "number")
  __vt__.Call("debounce", callback, "function")
  __iDebounce__++
  return Func("shell_99").Bind(callback, time, __iDebounce__)
}
shell_101(list, args*) {
  __vt__.Call("concat", list, "array")
  __listNew__ := $.clone.Call(list)
  for __index_for__, __arg__ in args {
    __type__ := $.type.Call(__arg__)
    if (__type__ == "array") {
      for __index_for__, __item__ in __arg__ {
        $.push.Call(__listNew__, __item__)
      }
    } else {
      $.push.Call(__listNew__, __arg__)
    }
  }
  return __listNew__
}
shell_102(list) {
  __vt__.Call("compact", list, "array")
  __listNew__ := []
  for __index_for__, __item__ in list {
    if !(__item__) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_103(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    return $.slice.Call(input)
  }
  if (__type__ == "object") {
    __mapNew__ := {}
    for __key__, __value__ in input {
      __mapNew__[__ci_shell__.Call(__key__)] := __value__
    }
    return __mapNew__
  }
  throw Exception("$.clone: invalid type '" . (__type__) . "'")
}
shell_104(key := "left") {
  key := $.replace.Call(key, "-", "")
  key := $.replace.Call(key, ":", " ")
  Click, % key
}
shell_105(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_106(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_107(list, n := 1) {
  __vt__.Call("chunk", list, "array")
  __vt__.Call("chunk", n, "number")
  __listNew__ := []
  __i__ := 0
  while (__i__ < ($.length.Call(list)) / n) {
    __listTemp__ := []
    __j__ := 0
    while (__j__ < n) {
      $.push.Call(__listTemp__, list[__ci_shell__.Call(__i__ * n + __j__)])
      __j__++
    }
    $.push.Call(__listNew__, __listTemp__)
    __i__++
  }
  return __listNew__
}
shell_108(n) {
  __vt__.Call("ceil", n, "number")
  return Ceil(n)
}
shell_109(block) {
  if (block) {
    BlockInput, On
    return
  }
  BlockInput, Off
}
shell_110(callback, args*) {
  __vt__.Call("bind", callback, "function")
  if !(callback.Name) {
    if !($.length.Call(args)) {
      return callback
    }
    throw Exception("$.bind: cannot bind a bound function")
  }
  return callback.Bind(args*)
}
shell_111() {
  SoundBeep
}
shell_112(msg) {
  return $.toString.Call(msg)
}
shell_113(msg, message*) {
  __msg__ := $.join.Call(($.map.Call(message, Func("shell_112"))), ", ")
  MsgBox, % __msg__
}
shell_114(args*) {
  __result__ := 0
  for __index_for__, __arg__ in args {
    __result__ := __result__ + __arg__
  }
  return __result__
}
shell_115(n) {
  __vt__.Call("abs", n, "number")
  return Abs(n)
}
shell_116(input) {
  if input is Number
    return input + 1
  return input
}

global state := {}
global timer := {}
global ts := {}
global $$ := {}
$$.vt := Func("genshin_148")
class TickerX extends EmitterShellX {
  interval := 100
  max := 1000
  tick := 0
  __New() {
    base.__New()
    $.setInterval.Call(this.update, this.interval)
  }
  update := Func("genshin_147").Bind(this)
}
global ticker := new TickerX()
class ConfigX {
  data := {}
  source := "config.ini"
  __New() {
    this.data.isDebug := this.read.Call("debug/debug", 0)
    this.data.process := this.read.Call("region/process", "YuanShen.exe")
    for __index_for__, key in ["betterJump", "betterSprint", "easySkillTimer", "fastPickup", "quickDialog"] {
      this.data[__ci_genshin__.Call(key)] := this.read.Call("feature/enable" . (key) . "", 1)
    }
  }
  read := Func("genshin_146").Bind(this)
}
global Config := new ConfigX()
class ConsoleX {
  lifetime := 5000
  list := []
  tsClean := 0
  __New() {
    if !(Config.data.isDebug) {
      return
    }
    client.on.Call("leave", this.hide)
    ticker.on.Call("change", Func("genshin_145").Bind(this))
    $.on.Call("alt + f9", Func("genshin_144").Bind(this))
  }
  clean := Func("genshin_143").Bind(this)
  hide := Func("genshin_142").Bind(this)
  log := Func("genshin_141").Bind(this)
  pickColor := Func("genshin_140").Bind(this)
  render := Func("genshin_139").Bind(this)
  update := Func("genshin_138").Bind(this)
}
global console := new ConsoleX()
class ClientX extends KeyBindingX {
  height := 0
  isFullScreen := false
  isSuspend := false
  left := 0
  top := 0
  width := 0
  __New() {
    base.__New()
    this.setSize.Call()
    ticker.on.Call("change", Func("genshin_137").Bind(this))
    this.on.Call("enter", Func("genshin_136").Bind(this))
    $.on.Call("alt + f4", Func("genshin_135").Bind(this))
    $.on.Call("ctrl + f5", Func("genshin_134").Bind(this))
    $.on.Call("alt + enter", Func("genshin_133").Bind(this))
  }
  check := Func("genshin_132").Bind(this)
  checkActive := Func("genshin_131").Bind(this)
  point := Func("genshin_130").Bind(this)
  reset := Func("genshin_129").Bind(this)
  resetTimer := Func("genshin_128").Bind(this)
  setSize := Func("genshin_127").Bind(this)
  suspend := Func("genshin_126").Bind(this)
  setPriority := Func("genshin_125").Bind(this)
  vh := Func("genshin_124").Bind(this)
  vw := Func("genshin_123").Bind(this)
}
global client := new ClientX()
class HudX {
  lifetime := 5000
  listTimer := {}
  __New() {
    client.on.Call("leave", this.hide)
  }
  getPosition := Func("genshin_122").Bind(this)
  hide := Func("genshin_121").Bind(this)
  render := Func("genshin_120").Bind(this)
  reset := Func("genshin_118").Bind(this)
}
global hud := new HudX()
ts.checkIsActive := 0
ts.checkIsSwimming := 0
class StatusCheckerX {
  interval := 300
  isActive := false
  isSwimming := false
  checkIsActive := Func("genshin_117").Bind(this)
  checkIsSwimming := Func("genshin_116").Bind(this)
  checkPoint := Func("genshin_115").Bind(this)
  setIsActive := Func("genshin_114").Bind(this)
}
global statusChecker := new StatusCheckerX()
global __character_a_m__ := {aether: {"color-avatar": 13403723, weapon: "sword"}, albedo: {"cd-e": 4, "cd-q": 12, "color-avatar": 13813421, "duration-e": 30, weapon: "sword"}, amber: {"cd-e": 15, "cd-q": 12, "color-avatar": 6048867, "duration-e": 8, "duration-q": 2, weapon: "bow"}, barbara: {"cd-e": 32, "cd-q": 20, "color-avatar": 14537406, "duration-e": 15, weapon: "catalyst"}, beidou: {"cd-e": 7.5, "cd-q": 20, "color-avatar": 4993838, "duration-q": 15, "type-e": 1, weapon: "claymore"}, bennett: {"cd-e": [4.5, 10], "cd-q": 15, "color-avatar": 16511951, "duration-q": 12, weapon: "sword"}, chongyun: {"cd-e": 15, "cd-q": 12, "color-avatar": 13496287, "duration-e": 10, weapon: "claymore"}, diluc: {"cd-e": 10, "cd-q": 12, "color-avatar": 13578790, "duration-q": 8, weapon: "claymore"}, diona: {"cd-e": [6, 15], "cd-q": 20, "color-avatar": 16701134, "duration-e": [4, 10], "duration-q": 12, weapon: "bow"}, eula: {"cd-e": [4, 10], "cd-q": 20, "color-avatar": 9947087, "duration-e": [18, 7], "duration-q": 7, weapon: "claymore"}, fischl: {"cd-e": 25, "cd-q": 15, "color-avatar": 16769961, "duration-e": 10, "type-e": 1, weapon: "bow"}, ganyu: {"cd-e": 10, "cd-q": 15, "color-avatar": 12438725, "duration-e": 6, "duration-q": 15, weapon: "bow"}, hu_tao: {"cd-e": 16, "cd-q": 15, "color-avatar": 8084321, "duration-e": 9, weapon: "polearm"}, jean: {"cd-e": 6, "color-avatar": 15652544, "type-e": 1, weapon: "sword"}, kaeya: {"cd-e": 6, "cd-q": 15, "color-avatar": 3755620, "duration-q": 8, weapon: "sword"}, keqing: {"cd-e": 7.5, "cd-q": 12, "color-avatar": 12497347, "duration-e": 5, "type-e": 1, weapon: "sword"}, klee: {"cd-e": 20, "cd-q": 15, "color-avatar": 12466702, "duration-q": 10, weapon: "catalyst"}, lisa: {"cd-e": [1, 16], "cd-q": 20, "color-avatar": 11970203, "duration-q": 15, weapon: "catalyst"}, lumine: {"color-avatar": 15195837, weapon: "sword"}, mona: {"cd-e": 12, "cd-q": 15, "color-avatar": 5918820, "duration-e": 6, "duration-q": 4.5, weapon: "catalyst"}}
global __character_n_z__ := {ningguang: {"cd-e": 12, "cd-q": 12, "color-avatar": 16776696, "duration-e": 29, weapon: "catalyst"}, noelle: {"cd-e": 24, "cd-q": 15, "color-avatar": 14604498, "duration-e": 12, "duration-q": 15, weapon: "claymore"}, qiqi: {"cd-e": 30, "cd-q": 20, "color-avatar": 14801886, "duration-e": 15, "duration-q": 15, weapon: "sword"}, rezor: {"cd-e": [6, 10], "cd-q": 20, "color-avatar": 13028038, "duration-q": 15, weapon: "claymore"}, rosaria: {"cd-e": 6, "cd-q": 15, "color-avatar": 10109297, "duration-q": 8, weapon: "polearm"}, sucrose: {"cd-e": 14.5, "cd-q": 20, "color-avatar": 13953484, "duration-q": 6, weapon: "catalyst"}, tartaglia: {"cd-e": 1, "cd-q": 15, "color-avatar": 12153658, "duration-e": 30, weapon: "bow"}, venti: {"cd-e": [6, 15], "cd-q": 15, "color-avatar": 6132094, "duration-q": 8, weapon: "bow"}, xiangling: {"cd-e": 12, "cd-q": 20, "color-avatar": 3688571, "duration-e": 7, "duration-q": 10, weapon: "polearm"}, xiao: {"cd-e": 10, "color-avatar": 3754046, weapon: "polearm"}, xingqiu: {"cd-e": 21, "cd-q": 20, "color-avatar": 4753554, "duration-e": 15, "duration-q": 15, weapon: "sword"}, xinyan: {"cd-e": 18, "cd-q": 15, "color-avatar": 5258048, "duration-e": 12, "duration-q": 2, weapon: "claymore"}, yanfei: {"cd-e": 9, "cd-q": 20, "color-avatar": 15707806, "duration-q": 15, weapon: "catalyst"}, zhongli: {"cd-e": [4, 12.5], "cd-q": 12, "color-avatar": 4928805, "duration-e": 20.5, "duration-q": 3.6, weapon: "polearm"}}
class CharacterX {
  data := {}
  __New() {
    for name, char in $.mixin.Call(__character_a_m__, __character_n_z__) {
      this.data[__ci_genshin__.Call(name)] := {cdE: this.getValueIntoArray.Call(char["cd-e"]), cdQ: char["cd-q"], colorAvatar: char["color-avatar"], durationE: this.getValueIntoArray.Call(char["duration-e"]), durationQ: char["duration-q"], tactic: this.getTactic.Call(Config.read.Call("" . (name) . "/tactic", 0)), typeApr: Config.read.Call("" . (name) . "/type-apr", 0), typeE: char["type-e"], weapon: char.weapon}
    }
  }
  getValueIntoArray := Func("genshin_113").Bind(this)
  getTactic := Func("genshin_112").Bind(this)
}
global Character := new CharacterX()
ts.toggle := 0
class MemberX extends EmitterShellX {
  list := [""]
  __New() {
    base.__New()
    this.on.Call("change", Func("genshin_111").Bind(this))
    $.on.Call("f12", this.scan)
  }
  checkCharacterByPosition := Func("genshin_110").Bind(this)
  getIndexBy := Func("genshin_109").Bind(this)
  getRange := Func("genshin_108").Bind(this)
  has := Func("genshin_107").Bind(this)
  scan := Func("genshin_106").Bind(this)
  toggle := Func("genshin_105").Bind(this)
  toggleBy := Func("genshin_104").Bind(this)
}
global member := new MemberX()
class SkillTimerX {
  listCountDown := {}
  listDuration := {}
  listQ := {}
  listRecord := {}
  __New() {
    this.reset.Call()
    member.on.Call("change", this.reset)
  }
  check := Func("genshin_103").Bind(this)
  endTartaglia := Func("genshin_102").Bind(this)
  hide := Func("genshin_101").Bind(this)
  record := Func("genshin_100").Bind(this)
  recordEnd := Func("genshin_99").Bind(this)
  recordStart := Func("genshin_98").Bind(this)
  render := Func("genshin_97").Bind(this)
  reset := Func("genshin_96").Bind(this)
}
global skillTimer := new SkillTimerX()
ticker.on.Call("change", Func("genshin_95"))
class RecorderX {
  current := 0
  file := {}
  isActive := false
  list := []
  listHotkey := ["h", "i", "n", "t", "u"]
  listIgnore := []
  ts := 0
  __New() {
    this.file.replay := $.file.Call("replay.txt")
    for __index_for__, key in this.listHotkey {
      this.file[__ci_genshin__.Call(key)] := $.file.Call("replay-" . (key) . ".txt")
    }
    client.on.Call("leave", this.stop)
    $.on.Call("f11", this.replay)
    $.on.Call("f10", Func("genshin_94").Bind(this))
  }
  ignore := Func("genshin_93").Bind(this)
  log := Func("genshin_92").Bind(this)
  next := Func("genshin_91").Bind(this)
  record := Func("genshin_89").Bind(this)
  replay := Func("genshin_88").Bind(this)
  save := Func("genshin_87").Bind(this)
  start := Func("genshin_86").Bind(this)
  stop := Func("genshin_85").Bind(this)
}
global recorder := new RecorderX()
class KeyBindingX extends EmitterShellX {
  isPressed := {}
  isPrevented := {}
  __New() {
    base.__New()
    client.on.Call("leave", this.resetKey)
  }
  bindEvent := Func("genshin_84").Bind(this)
  resetKey := Func("genshin_81").Bind(this)
}
class PlayerX extends KeyBindingX {
  current := 0
  isMoving := false
  name := ""
  __New() {
    base.__New()
    for __index_for__, key in [1, 2, 3, 4] {
      this.bindEvent.Call("toggle", key, "prevent")
    }
    this.bindEvent.Call("attack", "l-button", "prevent")
    this.bindEvent.Call("toggle-aim", "r")
    this.bindEvent.Call("use-e", "e")
    this.bindEvent.Call("use-q", "q", "prevent")
    this.bindEvent.Call("jump", "space", "prevent")
    this.bindEvent.Call("sprint", "r-button", "prevent")
    this.bindEvent.Call("pick", "f", "prevent")
    this.bindEvent.Call("unhold", "x", "prevent")
    this.bindEvent.Call("m-button", "m-button")
    this.bindEvent.Call("g", "g")
    this.bindEvent.Call("p", "p")
    this.bindEvent.Call("v", "v")
    this.bindEvent.Call("y", "y")
    this.bindEvent.Call("z", "z")
    for __index_for__, key in ["esc", "b", "c", "j", "l", "m", "o", "f1", "f2", "f3", "f4", "f5"] {
      this.bindEvent.Call("menu-" . (key) . "", key)
    }
    for __index_for__, key in recorder.listHotkey {
      this.bindEvent.Call("hotkey-" . (key) . "", key)
    }
  }
  jump := Func("genshin_80").Bind(this)
  sprint := Func("genshin_79").Bind(this)
  startMove := Func("genshin_78").Bind(this)
  stopMove := Func("genshin_76").Bind(this)
  toggleQ := Func("genshin_75").Bind(this)
  useE := Func("genshin_73").Bind(this)
  useQ := Func("genshin_71").Bind(this)
}
global player := new PlayerX()
class MovementX extends KeyBindingX {
  count := 0
  __New() {
    base.__New()
    for __index_for__, key in ["w", "a", "s", "d"] {
      $.on.Call(key, Func("genshin_69").Bind(key, this))
      $.on.Call("" . (key) . ":up", Func("genshin_68").Bind(key, this))
    }
    player.on.Call("move:start", Func("genshin_67")).on.Call("move:end", Func("genshin_66"))
  }
  check := Func("genshin_65").Bind(this)
  checkDown := Func("genshin_64").Bind(this)
  checkUp := Func("genshin_63").Bind(this)
}
global movement := new MovementX()
class TacticX {
  isActive := false
  isPressed := {}
  __New() {
    player.on.Call("attack:start", this.start).on.Call("attack:end", this.stop)
    member.on.Call("change", this.reset)
  }
  attack := Func("genshin_62").Bind(this)
  delay := Func("genshin_59").Bind(this)
  execute := Func("genshin_58").Bind(this)
  get := Func("genshin_36").Bind(this)
  jump := Func("genshin_35").Bind(this)
  ongoing := Func("genshin_34").Bind(this)
  onMoving := Func("genshin_33").Bind(this)
  reset := Func("genshin_32").Bind(this)
  sprint := Func("genshin_31").Bind(this)
  start := Func("genshin_30").Bind(this)
  stop := Func("genshin_29").Bind(this)
  toggle := Func("genshin_28").Bind(this)
  useE := Func("genshin_27").Bind(this)
  validate := Func("genshin_26").Bind(this)
  wait := Func("genshin_25").Bind(this)
}
global tactic := new TacticX()
for __index_for__, key in recorder.listHotkey {
  player.on.Call("hotkey-" . (key) . ":start", Func("genshin_24").Bind(key))
}
ts.jump := 0
player.on.Call("jump:start", Func("genshin_23")).on.Call("jump:end", Func("genshin_22")).on.Call("unhold:start", Func("genshin_20"))
timer.pick := ""
global pick := Func("genshin_19")
global skip := Func("genshin_18")
global startPick := Func("genshin_17")
global stopPick := Func("genshin_16")
player.on.Call("pick:start", startPick).on.Call("pick:end", stopPick)
state.isSprinting := false
state.isSwimming := false
timer.sprint := ""
ts.sprint := 0
global sprint := Func("genshin_15")
global startSprint := Func("genshin_14")
global stopSprint := Func("genshin_13")
global swim := Func("genshin_12")
player.on.Call("sprint:start", startSprint).on.Call("sprint:end", stopSprint).on.Call("move:start", Func("genshin_11")).on.Call("move:end", Func("genshin_10"))
state.toggleDelay := 150
global getToggleDelay := Func("genshin_9")
global startToggle := Func("genshin_8")
global stopToggle := Func("genshin_6")
player.on.Call("toggle:start", startToggle).on.Call("toggle:end", stopToggle).on.Call("toggle-q:end", player.toggleQ)
player.on.Call("use-e:start", Func("genshin_3")).on.Call("use-e:end", Func("genshin_2")).on.Call("use-q:start", player.useQ)
for __index_for__, key in [1, 2, 3, 4] {
  $.on.Call("alt + " . (key) . "", Func("genshin_1").Bind(key))
}
genshin_1(key) {
  player.toggleQ.Call(key)
}
genshin_2() {
  skillTimer.record.Call("end")
}
genshin_3() {
  skillTimer.record.Call("start")
}
genshin_4() {
  $.press.Call("e:up")
  skillTimer.record.Call("end")
}
genshin_5() {
  player.useE.Call("holding")
}
genshin_6() {
  if !(statusChecker.checkIsActive.Call()) {
    return
  }
  __object__ := player
  name := __object__["name"]
  if !(name) {
    return
  }
  __object__ := Character.data[__ci_genshin__.Call(name)]
  typeApr := __object__["typeApr"]
  if !(typeApr) {
    return
  }
  if (typeApr == 2) {
    $.setTimeout.Call(Func("genshin_5"), state.toggleDelay)
    return
  }
  $.setTimeout.Call(Func("genshin_4"), state.toggleDelay)
}
genshin_7() {
  $.press.Call("e:down")
  skillTimer.record.Call("start")
}
genshin_8(key) {
  $$.vt.Call("startToggle", key, "number")
  $.press.Call(key)
  if !(statusChecker.checkIsActive.Call()) {
    return
  }
  member.toggle.Call(key)
  __object__ := player
  name := __object__["name"]
  if !(name) {
    return
  }
  state.toggleDelay := getToggleDelay.Call()
  __object__ := Character.data[__ci_genshin__.Call(name)]
  typeApr := __object__["typeApr"]
  if !(typeApr) {
    return
  }
  if !(typeApr == 1) {
    return
  }
  $.setTimeout.Call(Func("genshin_7"), state.toggleDelay)
}
genshin_9() {
  delay := 500 - ($.now.Call() - ts.sprint)
  if (delay < 150) {
    delay := 150
  }
  return delay
}
genshin_10() {
  if !(Config.data.betterSprint) {
    return
  }
  if !(state.isSprinting) {
    return
  }
  if (player.isMoving) {
    return
  }
  player.startMove.Call("w")
}
genshin_11() {
  if !(Config.data.betterSprint) {
    return
  }
  if !(state.isSprinting) {
    return
  }
  player.stopMove.Call("w")
}
genshin_12() {
  if (statusChecker.checkIsSwimming.Call()) {
    return
  }
  stopSprint.Call()
  startSprint.Call()
}
genshin_13() {
  ts.sprint := $.now.Call()
  if !(Config.data.betterSprint) {
    $.click.Call("right:up")
    return
  }
  state.isSprinting := false
  if (state.isSwimming) {
    $.click.Call("right:up")
    state.isSwimming := false
  }
  $.clearTimeout.Call(timer.sprint)
  player.stopMove.Call("w")
}
genshin_14() {
  if (Config.data.quickDialog && !statusChecker.checkIsActive.Call()) {
    $.press.Call("esc")
    return
  }
  $.click.Call("right:down")
  if !(Config.data.betterSprint) {
    return
  }
  state.isSprinting := true
  if !(player.isMoving) {
    player.startMove.Call("w")
  }
  if (statusChecker.checkIsSwimming.Call()) {
    state.isSwimming := true
    $.clearInterval.Call(timer.sprint)
    timer.sprint := $.setInterval.Call(swim, 1000)
    return
  }
  $.click.Call("right:up")
  $.clearInterval.Call(timer.sprint)
  timer.sprint := $.setInterval.Call(sprint, 1300)
}
genshin_15() {
  if (statusChecker.checkIsSwimming.Call()) {
    stopSprint.Call()
    startSprint.Call()
    return
  }
  $.click.Call("right")
}
genshin_16() {
  if !(Config.data.fastPickup) {
    return
  }
  $.clearInterval.Call(timer.pick)
}
genshin_17() {
  $.press.Call("f")
  if !(Config.data.fastPickup) {
    return
  }
  $.clearInterval.Call(timer.pick)
  timer.pick := $.setInterval.Call(pick, 100)
}
genshin_18() {
  if (statusChecker.checkIsActive.Call()) {
    return false
  }
  start := client.point.Call([65, 40])
  end := client.point.Call([70, 80])
  point := ""
  for __index_for__, color in [0x806200, 0xFFFFFF] {
    __array__ := $.findColor.Call(color, start, end)
    x := __array__[1]
    y := __array__[2]
    if (x * y > 0) {
      point := [x, y]
      break
    }
  }
  if !(point) {
    return false
  }
  $.move.Call(point)
  $.click.Call()
  return true
}
genshin_19() {
  if (Config.data.quickDialog && skip.Call()) {
    return
  }
  $.press.Call("f")
  $.click.Call("wheel-down")
}
genshin_20() {
  $.press.Call("x")
  if !(Config.data.betterJump && statusChecker.checkIsActive.Call()) {
    return
  }
  $.setTimeout.Call(player.jump, 50)
}
genshin_21() {
  player.jump.Call()
  ts.jump := $.now.Call()
}
genshin_22() {
  $.press.Call("space:up")
  diff := $.now.Call() - ts.jump
  ts.jump := $.now.Call()
  if !(Config.data.betterJump && statusChecker.checkIsActive.Call()) {
    return
  }
  if !(diff < 350) {
    return
  }
  $.setTimeout.Call(Func("genshin_21"), 350 - diff)
}
genshin_23() {
  $.press.Call("space:down")
  ts.jump := $.now.Call()
}
genshin_24(key) {
  if !(statusChecker.checkIsActive.Call()) {
    return
  }
  recorder.replay.Call(key)
}
genshin_25(this, time, callback) {
  if !(($.type.Call(time)) == "number") {
    throw Exception("tactic.wait: invalid time " . (time) . "")
  }
  this.delay.Call(time, callback)
}
genshin_26(this) {
  if !(statusChecker.checkIsActive.Call()) {
    return false
  }
  name := player.name
  if !(name) {
    return false
  }
  listTactic := Character.data[__ci_genshin__.Call(name)].tactic
  if !(listTactic) {
    return false
  }
  return listTactic
}
genshin_27(this, isHolding, callback) {
  $$.vt.Call("tactic.useE", callback, "function")
  if !(skillTimer.listCountDown[__ci_genshin__.Call(player.current)]) {
    player.useE.Call(isHolding)
    this.delay.Call(100, callback)
    return
  }
  this.delay.Call(50, callback)
}
genshin_28(this, n, callback) {
  $$.vt.Call("tactic.toggle", n, "number")
  $$.vt.Call("tactic.toggle", callback, "function")
  if !(this.isActive) {
    return
  }
  $.press.Call(n)
  member.toggle.Call(n)
  this.delay.Call(200, callback)
}
genshin_29(this) {
  if (this.isActive) {
    this.reset.Call()
    return
  }
  $.click.Call("left:up")
}
genshin_30(this) {
  if (this.isActive) {
    return
  }
  listTactic := this.validate.Call()
  if !(listTactic) {
    $.click.Call("left:down")
    return
  }
  this.isActive := true
  wait := 1000 - ($.now.Call() - ts.toggle)
  if (wait < 200) {
    wait := 200
  }
  this.execute.Call(listTactic, 0, 0)
}
genshin_31(this, callback) {
  $$.vt.Call("tactic.sprint", callback, "function")
  player.sprint.Call()
  this.delay.Call(100, callback)
}
genshin_32(this) {
  $.clearTimeout.Call(timer.tacticDelay)
  if (this.isPressed["l-button"]) {
    $.click.Call("left:up")
  }
  this.isActive := false
}
genshin_33(this, cbA, cbB, isNot := false) {
  $$.vt.Call("tactic.onMoving", cbA, "function")
  $$.vt.Call("tactic.onMoving", cbB, "function")
  if !(isNot) {
    if (player.isMoving) {
      this.delay.Call(50, cbA)
    } else {
      this.delay.Call(50, cbB)
    }
  } else {
    if (player.isMoving) {
      this.delay.Call(50, cbB)
    } else {
      this.delay.Call(50, cbA)
    }
  }
}
genshin_34(this, cbA, cbB, isNot := false) {
  $$.vt.Call("tactic.ongoing", cbA, "function")
  $$.vt.Call("tactic.ongoing", cbB, "function")
  if !(isNot) {
    if (skillTimer.listDuration[__ci_genshin__.Call(player.current)]) {
      this.delay.Call(50, cbA)
    } else {
      this.delay.Call(50, cbB)
    }
  } else {
    if (skillTimer.listDuration[__ci_genshin__.Call(player.current)]) {
      this.delay.Call(50, cbB)
    } else {
      this.delay.Call(50, cbA)
    }
  }
}
genshin_35(this, callback) {
  $$.vt.Call("tactic.jump", callback, "function")
  player.jump.Call()
  if !(player.isMoving) {
    this.delay.Call(450, callback)
  } else {
    this.delay.Call(550, callback)
  }
}
genshin_36(this, list, g := 0, i := 0) {
  if (g >= $.length.Call(list)) {
    return false
  }
  group := list[__ci_genshin__.Call(g)]
  if (i >= $.length.Call(group)) {
    return false
  }
  return group[__ci_genshin__.Call(i)]
}
genshin_37(item, next, this) {
  this.wait.Call(item, next)
}
genshin_38(next, this) {
  $.press.Call("r")
  this.delay.Call(50, next)
}
genshin_39(next, this) {
  $.press.Call("r")
  $.setTimeout.Call(Func("genshin_38").Bind(next, this), 50)
}
genshin_40(next, this) {
  $.press.Call("r")
  this.delay.Call(100, next)
}
genshin_41(next, this) {
  this.sprint.Call(next)
}
genshin_42(next, this) {
  this.jump.Call(next)
}
genshin_43(next, this) {
  this.useE.Call(true, next)
}
genshin_44(next, this) {
  $.press.Call("e")
  this.delay.Call(100, next)
}
genshin_45(next, this) {
  this.useE.Call(false, Func("genshin_44").Bind(next, this))
}
genshin_46(next, this) {
  this.useE.Call(false, next)
}
genshin_47(next, this) {
  this.attack.Call(true, next)
}
genshin_48(next, this) {
  this.attack.Call(false, next)
}
genshin_49(listTactic, g, this) {
  this.execute.Call(listTactic, g + 1, 0)
}
genshin_50(next, listTactic, g, this) {
  this.onMoving.Call(next, Func("genshin_49").Bind(listTactic, g, this))
}
genshin_51(listTactic, g, this) {
  this.execute.Call(listTactic, g + 1, 0)
}
genshin_52(next, listTactic, g, this) {
  this.ongoing.Call(next, Func("genshin_51").Bind(listTactic, g, this))
}
genshin_53(listTactic, g, this) {
  this.execute.Call(listTactic, g + 1, 0)
}
genshin_54(next, listTactic, g, this) {
  this.onMoving.Call(next, Func("genshin_53").Bind(listTactic, g, this), "not")
}
genshin_55(listTactic, g, this) {
  this.execute.Call(listTactic, g + 1, 0)
}
genshin_56(next, listTactic, g, this) {
  this.ongoing.Call(next, Func("genshin_55").Bind(listTactic, g, this), "not")
}
genshin_57(listTactic, g, i, this) {
  this.execute.Call(listTactic, g, i + 1)
}
genshin_58(this, listTactic, g := 0, i := 0) {
  item := this.get.Call(listTactic, g, i)
  if !(item) {
    this.execute.Call(listTactic)
    return
  }
  if !(item == $.toLowerCase.Call(item)) {
    item := "" . (item) . "~"
  }
  next := Func("genshin_57").Bind(listTactic, g, i, this)
  map := {}
  map["!@e"] := Func("genshin_56").Bind(next, listTactic, g, this)
  map["!@m"] := Func("genshin_54").Bind(next, listTactic, g, this)
  map["@e"] := Func("genshin_52").Bind(next, listTactic, g, this)
  map["@m"] := Func("genshin_50").Bind(next, listTactic, g, this)
  map.a := Func("genshin_48").Bind(next, this)
  map["A~"] := Func("genshin_47").Bind(next, this)
  map.e := Func("genshin_46").Bind(next, this)
  map.ee := Func("genshin_45").Bind(next, this)
  map["E~"] := Func("genshin_43").Bind(next, this)
  map.j := Func("genshin_42").Bind(next, this)
  map.s := Func("genshin_41").Bind(next, this)
  map.t := Func("genshin_40").Bind(next, this)
  map.tt := Func("genshin_39").Bind(next, this)
  callback := map[__ci_genshin__.Call(item)]
  if !(callback) {
    callback := Func("genshin_37").Bind(item, next, this)
  }
  callback.Call()
}
genshin_59(this, time, callback) {
  $$.vt.Call("tactic.delay", time, "number")
  $$.vt.Call("tactic.delay", callback, "function")
  if !(this.isActive) {
    return
  }
  $.clearTimeout.Call(timer.tacticDelay)
  timer.tacticDelay := $.setTimeout.Call(callback, time)
}
genshin_60(callback, this) {
  this.jump.Call(callback)
}
genshin_61(callback, this) {
  $.click.Call("left:up")
  this.isPressed["l-button"] := false
  if (player.isMoving && player.name == "klee") {
    this.delay.Call(200, Func("genshin_60").Bind(callback, this))
    return
  }
  this.delay.Call(100, callback)
}
genshin_62(this, isCharged, callback) {
  $$.vt.Call("tactic.attack", callback, "function")
  if (isCharged) {
    $.click.Call("left:down")
    this.isPressed["l-button"] := true
    delay := 300
    __object__ := player
    name := __object__["name"]
    __object__ := Character.data[__ci_genshin__.Call(name)]
    weapon := __object__["weapon"]
    switch weapon {
      case "bow": {
        delay := 1500
        if (name == "ganyu") {
          delay := 1800
        }
        if (name == "tartaglia") {
          delay := 300
        }
      }
      case "sword": {
        delay := 400
        if (name == "xingqiu") {
          delay := 600
        }
      }
    }
    this.delay.Call(delay, Func("genshin_61").Bind(callback, this))
    return
  }
  $.click.Call("left")
  this.delay.Call(200, callback)
}
genshin_63(this, key) {
  $$.vt.Call("movement.check", key, "string")
  if !(this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  this.isPressed[__ci_genshin__.Call(key)] := false
  count := this.count - 1
  if (!count && this.count) {
    player.emit.Call("move:end")
  }
  this.count := count
  recorder.record.Call("" . (key) . ":up")
  $.press.Call("" . (key) . ":up")
}
genshin_64(this, key) {
  $$.vt.Call("movement.check", key, "string")
  if (this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  this.isPressed[__ci_genshin__.Call(key)] := true
  count := this.count + 1
  if (count && !this.count) {
    player.emit.Call("move:start")
  }
  this.count := count
  recorder.record.Call("" . (key) . ":down")
  $.press.Call("" . (key) . ":down")
}
genshin_65(this, key, action) {
  $$.vt.Call("movement.check", key, "string")
  $$.vt.Call("movement.check", action, "string")
  if (action == "down") {
    this.checkDown.Call(key)
  } else if (action == "up") {
    this.checkUp.Call(key)
  }
}
genshin_66() {
  if !(player.isMoving) {
    return
  }
  player.isMoving := false
}
genshin_67() {
  if (player.isMoving) {
    return
  }
  player.isMoving := true
}
genshin_68(key, this) {
  this.check.Call(key, "up")
}
genshin_69(key, this) {
  this.check.Call(key, "down")
}
genshin_70() {
  statusChecker.setIsActive.Call(true)
}
genshin_71(this) {
  $.press.Call("q")
  skillTimer.listQ[__ci_genshin__.Call(player.current)] := $.now.Call()
  $.setTimeout.Call(Func("genshin_70"), statusChecker.interval)
}
genshin_72() {
  $.press.Call("e:up")
  skillTimer.record.Call("end")
}
genshin_73(this, isHolding := false) {
  if !(isHolding) {
    $.press.Call("e")
    skillTimer.record.Call("start")
    skillTimer.record.Call("end")
    return
  }
  $.press.Call("e:down")
  skillTimer.record.Call("start")
  $.setTimeout.Call(Func("genshin_72"), 1000)
}
genshin_74() {
  statusChecker.setIsActive.Call(true)
}
genshin_75(this, key) {
  $$.vt.Call("player.toggleQ", key, "number")
  $.press.Call("alt + " . (key) . "")
  member.toggle.Call(key)
  skillTimer.listQ[__ci_genshin__.Call(player.current)] := $.now.Call()
  $.setTimeout.Call(Func("genshin_74"), statusChecker.interval)
}
genshin_76(this, key) {
  $$.vt.Call("player.stopMove", key, "string")
  if (movement.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  $.press.Call("" . (key) . ":up")
}
genshin_77(key) {
  $.press.Call("" . (key) . ":down")
}
genshin_78(this, key) {
  $$.vt.Call("player.startMove", key, "string")
  if (movement.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  $.setTimeout.Call(Func("genshin_77").Bind(key), 30)
}
genshin_79(this) {
  $.click.Call("right")
  ts.sprint := $.now.Call()
}
genshin_80(this) {
  $.press.Call("space")
}
genshin_81(this) {
  for key, value in this.isPressed {
    if (this.isPrevented[__ci_genshin__.Call(key)]) {
      continue
    }
    if !(value) {
      continue
    }
    if ($.getState.Call(key)) {
      continue
    }
    $.press.Call("" . (key) . ":up")
  }
  return this
}
genshin_82(key, name, this) {
  if !(this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  this.isPressed[__ci_genshin__.Call(key)] := false
  recorder.record.Call("" . (key) . ":up")
  if !(this.isPrevented[__ci_genshin__.Call(key)]) {
    $.press.Call("" . (key) . ":up")
  }
  this.emit.Call("" . (name) . ":end", key)
}
genshin_83(key, name, this) {
  if (this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  this.isPressed[__ci_genshin__.Call(key)] := true
  recorder.record.Call("" . (key) . ":down")
  if !(this.isPrevented[__ci_genshin__.Call(key)]) {
    $.press.Call("" . (key) . ":down")
  }
  this.emit.Call("" . (name) . ":start", key)
}
genshin_84(this, name, key, prevent := false) {
  $$.vt.Call("keyBinding.bindEvent", name, "string")
  $$.vt.Call("keyBinding.bindEvent", "number", "string")
  if (prevent) {
    this.isPrevented[__ci_genshin__.Call(key)] := true
  }
  $.on.Call(key, Func("genshin_83").Bind(key, name, this))
  $.on.Call("" . (key) . ":up", Func("genshin_82").Bind(key, name, this))
  return this
}
genshin_85(this) {
  if !(this.isActive) {
    return
  }
  this.isActive := false
  this.log.Call("end recording")
  $.beep.Call()
}
genshin_86(this) {
  if (this.isActive) {
    return
  }
  this.isActive := true
  this.list := []
  this.ts := $.now.Call()
  this.log.Call("start recording")
  $.beep.Call()
}
genshin_87(this) {
  if !($.length.Call(this.list)) {
    return
  }
  result := ""
  for __index_for__, item in this.list {
    line := $.join.Call([item.delay, item.key, item.position], "|")
    line := $.trim.Call(line, "|")
    result := "" . (result) . "" . (line) . "`n"
  }
  this.file.replay.save.Call(result)
}
genshin_88(this, key := "replay") {
  list := []
  this.current := 0
  content := this.file[__ci_genshin__.Call(key)].load.Call()
  if !(content) {
    return
  }
  for __index_for__, item in $.split.Call(content, "`n") {
    if !(item) {
      continue
    }
    __array__ := $.split.Call(item, "|")
    delay := __array__[1]
    key := __array__[2]
    position := __array__[3]
    $.push.Call(list, [delay, key, position])
  }
  this.log.Call("start playing")
  $.beep.Call()
  this.next.Call(list)
}
genshin_89(this, key) {
  $$.vt.Call("record.record", key, "string")
  if !(this.isActive) {
    return
  }
  if ($.includes.Call(this.listIgnore, key)) {
    return
  }
  this.log.Call(key)
  now := $.now.Call()
  delay := now - this.ts
  this.ts := now
  position := ""
  if ($.includes.Call(key, "l-button")) {
    __array__ := $.getPosition.Call()
    x := __array__[1]
    y := __array__[2]
    x := $.round.Call(x * 100 / client.width)
    y := $.round.Call(y * 100 / client.height)
    position := $.join.Call([x, y], ",")
  }
  $.push.Call(this.list, {delay: delay, key: key, position: position})
}
genshin_90(key, position, list, this) {
  if (($.includes.Call(key, "l-button")) && position) {
    point := client.point.Call($.split.Call(position, ","))
    $.move.Call(point)
  }
  $.trigger.Call(key)
  this.current++
  this.next.Call(list)
}
genshin_91(this, list) {
  $$.vt.Call("record.next", list, "array")
  n := this.current
  if (n >= $.length.Call(list)) {
    this.log.Call("end playing")
    $.beep.Call()
    return
  }
  __array__ := list[__ci_genshin__.Call(n)]
  delay := __array__[1]
  key := __array__[2]
  position := __array__[3]
  $.setTimeout.Call(Func("genshin_90").Bind(key, position, list, this), delay)
}
genshin_92(this, message) {
  $$.vt.Call("record.log", message, "string")
  hud.render.Call(5, message)
}
genshin_93(this, key) {
  $$.vt.Call("record.ignore", key, "string")
  if !(key) {
    this.listIgnore := []
    return
  }
  if ($.includes.Call(this.listIgnore, key)) {
    return
  }
  $.push.Call(this.listIgnore, key)
}
genshin_94(this) {
  if !(this.isActive) {
    this.ignore.Call("f10")
    this.start.Call()
  } else {
    this.stop.Call()
    this.save.Call()
  }
}
genshin_95(tick) {
  if !($.mod.Call(tick, 200)) {
    skillTimer.check.Call()
  }
}
genshin_96(this) {
  for __index_for__, n in [1, 2, 3, 4] {
    this.listCountDown[__ci_genshin__.Call(n)] := 0
    this.listDuration[__ci_genshin__.Call(n)] := 0
    this.listQ[__ci_genshin__.Call(n)] := 0
    this.listRecord[__ci_genshin__.Call(n)] := 0
  }
}
genshin_97(this, n, message) {
  $$.vt.Call("skillTimer.render", n, "number")
  $$.vt.Call("skillTimer.render", message, "string")
  if !(Config.data.easySkillTimer) {
    return
  }
  hud.render.Call(n, message)
}
genshin_98(this, now) {
  $$.vt.Call("skillTimer.recordStart", now, "number")
  __object__ := player
  current := __object__["current"]
  name := __object__["name"]
  __object__ := Character.data[__ci_genshin__.Call(name)]
  cdE := __object__["cdE"]
  if (this.listRecord[__ci_genshin__.Call(current)]) {
    return
  }
  this.listRecord[__ci_genshin__.Call(current)] := now
}
genshin_99(this, now) {
  $$.vt.Call("skillTimer.recordEnd", now, "number")
  __object__ := player
  current := __object__["current"]
  name := __object__["name"]
  __object__ := Character.data[__ci_genshin__.Call(name)]
  cdE := __object__["cdE"]
  durationE := __object__["durationE"]
  typeE := __object__["typeE"]
  if !(this.listRecord[__ci_genshin__.Call(current)]) {
    return
  }
  if (now - this.listRecord[__ci_genshin__.Call(current)] < 500) {
    this.listCountDown[__ci_genshin__.Call(current)] := this.listRecord[__ci_genshin__.Call(current)] + (cdE[1] * 1000) + 500
    if (durationE[1]) {
      this.listDuration[__ci_genshin__.Call(current)] := this.listRecord[__ci_genshin__.Call(current)] + (durationE[1] * 1000)
    }
    this.listRecord[__ci_genshin__.Call(current)] := 0
    return
  }
  if (typeE == 1) {
    this.listCountDown[__ci_genshin__.Call(current)] := now + (cdE[2] * 1000) + 500
    if (durationE[2]) {
      this.listDuration[__ci_genshin__.Call(current)] := now + (durationE[2] * 1000)
    }
  } else {
    this.listCountDown[__ci_genshin__.Call(current)] := this.listRecord[__ci_genshin__.Call(current)] + (cdE[2] * 1000) + 500
    if (durationE[2]) {
      this.listDuration[__ci_genshin__.Call(current)] := this.listRecord[__ci_genshin__.Call(current)] + (durationE[2] * 1000)
    }
  }
  this.listRecord[__ci_genshin__.Call(current)] := 0
}
genshin_100(this, step) {
  $$.vt.Call("skillTimer.record", step, "string")
  __object__ := player
  current := __object__["current"]
  name := __object__["name"]
  if !(name) {
    return
  }
  now := $.now.Call()
  if ((name == "tartaglia") && this.endTartaglia.Call()) {
    return
  }
  countdown := this.listCountDown[__ci_genshin__.Call(current)]
  if (countdown && countdown - now > 1000) {
    return
  }
  if (step == "end") {
    this.recordEnd.Call(now)
    return
  }
  if (step == "start") {
    this.recordStart.Call(now)
    return
  }
}
genshin_101(this, n) {
  $$.vt.Call("skillTimer.hide", n, "number")
  if !(Config.data.easySkillTimer) {
    return
  }
  hud.render.Call(n, "")
}
genshin_102(this) {
  n := member.getIndexBy.Call("tartaglia")
  if !(this.listDuration[__ci_genshin__.Call(n)]) {
    return false
  }
  now := $.now.Call()
  this.listCountDown[__ci_genshin__.Call(n)] := now + 30000 - (this.listDuration[__ci_genshin__.Call(n)] - now) + 6000
  this.listDuration[__ci_genshin__.Call(n)] := 0
  return true
}
genshin_103(this) {
  if (client.isSuspend) {
    return
  }
  now := $.now.Call()
  for __index_for__, n in [1, 2, 3, 4] {
    if !(this.listCountDown[__ci_genshin__.Call(n)] || this.listDuration[__ci_genshin__.Call(n)]) {
      continue
    }
    if (now >= this.listCountDown[__ci_genshin__.Call(n)]) {
      this.listCountDown[__ci_genshin__.Call(n)] := 0
    }
    if (now >= this.listDuration[__ci_genshin__.Call(n)]) {
      this.listDuration[__ci_genshin__.Call(n)] := 0
    }
    listMessage := []
    if (this.listCountDown[__ci_genshin__.Call(n)]) {
      diff := $.floor.Call((now - this.listCountDown[__ci_genshin__.Call(n)]) * 0.001)
      $.push.Call(listMessage, "" . (diff) . "s")
    }
    if (this.listDuration[__ci_genshin__.Call(n)]) {
      diff := $.abs.Call($.floor.Call((now - this.listDuration[__ci_genshin__.Call(n)]) * 0.001))
      $.push.Call(listMessage, "[" . (diff) . "s]")
    }
    if !($.length.Call(listMessage)) {
      this.hide.Call(n)
      return
    }
    this.render.Call(n, $.join.Call(listMessage, " "))
  }
}
genshin_104(this, name) {
  $$.vt.Call("client.toggleBy", name, "string")
  this.toggle.Call(this.getIndexBy.Call(name))
}
genshin_105(this, n) {
  $$.vt.Call("member.toggle", n, "number")
  if !(n) {
    return
  }
  player.current := n
  player.name := this.list[__ci_genshin__.Call(n)]
  ts.toggle := $.now.Call()
  if (this.has.Call("tartaglia")) {
    skillTimer.endTartaglia.Call()
  }
}
genshin_106(this) {
  this.list := [""]
  for __index_for__, n in [1, 2, 3, 4] {
    name := this.checkCharacterByPosition.Call(n)
    $.push.Call(this.list, name)
    hud.render.Call(n, name)
  }
  this.emit.Call("change")
}
genshin_107(this, name) {
  $$.vt.Call("client.has", name, "string")
  return $.includes.Call(this.list, name)
}
genshin_108(this, n) {
  $$.vt.Call("member.getRange", n, "number")
  start := client.point.Call([90, 20 + 9 * (n - 1)])
  end := client.point.Call([96, 20 + 9 * n])
  return [start, end]
}
genshin_109(this, name) {
  $$.vt.Call("member.getIndexBy", name, "string")
  if !(this.has.Call(name)) {
    return 0
  }
  for __index_for__, n in [1, 2, 3, 4] {
    if (this.list[__ci_genshin__.Call(n)] == name) {
      return n
    }
  }
}
genshin_110(this, n) {
  $$.vt.Call("member.checkCharacterByPosition", n, "number")
  __array__ := this.getRange.Call(n)
  pointStart := __array__[1]
  pointEnd := __array__[2]
  for name, char in Character.data {
    if (this.has.Call(name)) {
      continue
    }
    if !(char.colorAvatar) {
      continue
    }
    point := $.findColor.Call(char.colorAvatar, pointStart, pointEnd)
    if !(point[1] * point[2] > 0) {
      continue
    }
    return name
  }
  return ""
}
genshin_111(this) {
  $.press.Call(1)
  this.toggle.Call(1)
}
genshin_112(this, value) {
  if !(value) {
    return 0
  }
  value := $.replace.Call(value, " ", "")
  listAll := []
  for __index_for__, group in $.split.Call(value, ";") {
    listGroup := []
    for __index_for__, item in $.split.Call(group, ",") {
      $.push.Call(listGroup, item)
    }
    $.push.Call(listAll, listGroup)
  }
  return listAll
}
genshin_113(this, value) {
  switch $.type.Call(value) {
    case "array": {
      return value
    }
    case "number": {
      return [value, value]
    }
    default: {
      return [0, 0]
    }
  }
}
genshin_114(this, isActive) {
  ts.checkIsActive := $.now.Call()
  this.isActive := isActive
}
genshin_115(this, start, end, color := 0xFFFFFF) {
  __array__ := $.findColor.Call(color, (client.point.Call(start)), client.point.Call(end))
  x := __array__[1]
  y := __array__[2]
  return x * y > 0
}
genshin_116(this) {
  if !(this.isActive) {
    return false
  }
  if (player.name == "mona") {
    return true
  }
  now := $.now.Call()
  if !(now - ts.checkIsSwimming > this.interval) {
    return this.isSwimming
  }
  ts.checkIsSwimming := now
  this.isSwimming := this.checkPoint.Call([88, 95], [99, 99], 0xFFE92C)
  return this.isSwimming
}
genshin_117(this) {
  now := $.now.Call()
  if !(now - ts.checkIsActive > this.interval) {
    return this.isActive
  }
  ts.checkIsActive := now
  if (this.checkPoint.Call([94, 1], [99, 8], 0x3B4255)) {
    this.isActive := false
  } else if (this.checkPoint.Call([1, 16], [4, 22], 0xFFFFFF)) {
    this.isActive := true
  } else {
    this.isActive := this.checkPoint.Call([95, 2], [98, 7], 0xFFFFFF)
  }
  return this.isActive
}
genshin_118(this) {
  for __key_for__, timer in this.listTimer {
    $.clearTimeout.Call(timer)
  }
  this.listTimer := {}
  this.hide.Call()
}
genshin_119(n, this) {
  this.render.Call(n, "")
}
genshin_120(this, n, msg) {
  $$.vt.Call("hud.render", n, "number")
  $$.vt.Call("hud.render", msg, "string")
  $.clearTimeout.Call(this.listTimer[__ci_genshin__.Call(n)])
  this.listTimer[__ci_genshin__.Call(n)] := $.setTimeout.Call(Func("genshin_119").Bind(n, this), this.lifetime)
  __array__ := this.getPosition.Call(n)
  x := __array__[1]
  y := __array__[2]
  id := n + 1
  ToolTip, % msg, % x, % y, % id
}
genshin_121(this) {
  for __index_for__, n in [1, 2, 3, 4, 5] {
    this.render.Call(n, "")
  }
}
genshin_122(this, n) {
  $$.vt.Call("hud.getPosition", n, "number")
  if (client.isFullScreen) {
    left := client.vw.Call(80)
  } else {
    left := client.width
  }
  return [left, client.vh.Call(22 + 9 * (n - 1))]
}
genshin_123(this, n) {
  $$.vt.Call("client.vw", n, "number")
  return $.round.Call(this.width * n * 0.01)
}
genshin_124(this, n) {
  $$.vt.Call("client.vh", n, "number")
  return $.round.Call(this.height * n * 0.01)
}
genshin_125(this, level) {
  $$.vt.Call("client.setPriority", level, "string")
  Process, Priority, % Config.data.process, % level
}
genshin_126(this, isSuspend) {
  if (isSuspend) {
    if (this.isSuspend) {
      return
    }
    this.isSuspend := true
    $.suspend.Call(true)
    this.resetTimer.Call()
    return
  }
  if !(isSuspend) {
    if !(this.isSuspend) {
      return
    }
    this.isSuspend := false
    $.suspend.Call(false)
    return
  }
}
genshin_127(this) {
  name := "ahk_exe " . (Config.data.process) . ""
  WinGetPos, __left__, __top__, __width__, __height__, % name
  this.left := __left__
  this.top := __top__
  this.width := __width__
  this.height := __height__
  for __index_for__, key in ["left", "top", "width", "height"] {
    if !(this[__ci_genshin__.Call(key)]) {
      this[__ci_genshin__.Call(key)] := 0
    }
  }
  if (this.left == 0 && this.top == 0 && this.width == A_ScreenWidth && this.height == A_ScreenHeight) {
    this.isFullScreen := true
  }
  if !(this.isFullScreen) {
    this.width := this.width - 6
    this.height := this.height - 29
  }
}
genshin_128(this) {
  for __key_for__, _timer in timer {
    $.clearTimeout.Call(_timer)
  }
}
genshin_129(this) {
  this.setPriority.Call("normal")
  this.resetTimer.Call()
}
genshin_130(this, input) {
  $$.vt.Call("client.point", input, "array")
  return [this.vw.Call(input[1]), this.vh.Call(input[2])]
}
genshin_131(this) {
  return WinActive("ahk_exe " . (Config.data.process) . "")
}
genshin_132(this) {
  if (!this.isSuspend && !this.checkActive.Call()) {
    this.setPriority.Call("low")
    this.suspend.Call(true)
    this.emit.Call("leave")
    return
  }
  if (this.isSuspend && this.checkActive.Call()) {
    this.setPriority.Call("normal")
    this.suspend.Call(false)
    this.emit.Call("enter")
    return
  }
}
genshin_133(this) {
  $.press.Call("alt + enter")
  $.setTimeout.Call(this.setSize, 1000)
}
genshin_134(this) {
  $.beep.Call()
  this.reset.Call()
  $.reload.Call()
}
genshin_135(this) {
  $.beep.Call()
  this.reset.Call()
  $.exit.Call()
}
genshin_136(this) {
  $.setTimeout.Call(this.setSize, 1000)
}
genshin_137(this, tick) {
  if !($.mod.Call(tick, 200)) {
    this.check.Call()
  }
}
genshin_138(this) {
  if (client.isSuspend) {
    return
  }
  this.clean.Call()
  this.render.Call()
}
genshin_139(this) {
  text := ""
  for __index_for__, item in this.list {
    text := "" . (text) . "`n" . (item[2]) . ""
  }
  text := $.trim.Call(text, " `n")
  ToolTip, % text, 0, 0, 20
}
genshin_140(this) {
  color := $.getColor.Call()
  __array__ := $.getPosition.Call()
  x := __array__[1]
  y := __array__[2]
  x1 := $.round.Call((x * 100) / client.width)
  y1 := $.round.Call((y * 100) / client.height)
  this.log.Call("" . (x1) . ", " . (y1) . " / " . (color) . "")
  ClipBoard := color
}
genshin_141(this, input) {
  tsOutdate := $.now.Call() + this.lifetime
  if (($.type.Call(input)) == "array") {
    for __index_for__, msg in input {
      $.push.Call(this.list, [tsOutdate, msg])
    }
  } else {
    $.push.Call(this.list, [tsOutdate, input])
  }
  return input
}
genshin_142(this) {
  ToolTip, , 0, 0, 20
}
genshin_143(this) {
  now := $.now.Call()
  if !(now - this.tsClean >= 1000) {
    return
  }
  this.tsClean := now
  listResult := []
  for __index_for__, item in this.list {
    if (now >= item[1]) {
      continue
    }
    $.push.Call(listResult, item)
  }
  this.list := listResult
}
genshin_144(this) {
  $.beep.Call()
  this.pickColor.Call()
}
genshin_145(this, tick) {
  if !($.mod.Call(tick, 500)) {
    this.update.Call()
  }
}
genshin_146(this, key, defaultValue := "") {
  $$.vt.Call("config.read", key, "string")
  __array__ := $.split.Call(key, "/")
  __section__ := __array__[1]
  __key__ := __array__[2]
  IniRead, __result__, % this.source, % __section__, % __key__, % defaultValue
  return __result__
}
genshin_147(this) {
  this.tick := this.tick + this.interval
  this.emit.Call("change", this.tick)
  if (this.tick >= this.max) {
    this.tick := 0
  }
}
genshin_148(name, target, type*) {
  if !(Config.data.isDebug) {
    return
  }
  _type := $.type.Call(target)
  if !($.includes.Call(type, _type)) {
    throw Exception("" . (name) . ": invalid type '" . (_type) . "', should be '" . ($.toString.Call(type)) . "'")
  }
}
genshin_149(input) {
  if input is Number
    return input + 1
  return input
}
