; Generated by Coffee-AHK/0.0.37
global __ci_genshin__ := Func("genshin_112")
if (A_IsAdmin != true) {
  Run *RunAs "%A_ScriptFullPath%"
  ExitApp
}
#HotkeyInterval, 1000
#KeyHistory, 0
#MaxHotkeysPerInterval, 200
#MaxThreads, 20
#NoEnv
#Persistent
#SingleInstance, Force
#UseHook, On

CoordMode, Mouse, Client
CoordMode, Pixel, Client
CoordMode, ToolTip, Client
SendMode, Event
SetBatchLines, 100ms
SetKeyDelay, 0, 50
SetMouseDelay, 0, 50
StringCaseSense, On
; Generated by Coffee-AHK/0.0.37
global __ci_shell__ := Func("shell_90")
global $ := {}
$.abs := Func("shell_89")
$.alert := Func("shell_88")
$.beep := Func("shell_87")
$.bind := Func("shell_86")
$.blockInput := Func("shell_85")
$.ceil := Func("shell_84")
$.chunk := Func("shell_83")
$.clearInterval := Func("shell_82")
$.clearTimeout := Func("shell_81")
$.click := Func("shell_80")
$.clone := Func("shell_79")
$.compact := Func("shell_78")
$.concat := Func("shell_77")
global __iDebounce__ := 0
global __tDebounce__ := {}
$.debounce := Func("shell_76")
$.defer := Func("shell_74")
$.delay := Func("shell_72")
$.drop := Func("shell_70")
class EmitterShellX {
  bus := []
  emit := Func("shell_69").Bind(this)
  off := Func("shell_68").Bind(this)
  on := Func("shell_67").Bind(this)
}
$.emitter := Func("shell_66")
$.exit := Func("shell_65")
class FileShellX {
  name := ""
  __New(name) {
    this.name := name
  }
  append := Func("shell_64").Bind(this)
  exist := Func("shell_63").Bind(this)
  delete := Func("shell_62").Bind(this)
  load := Func("shell_61").Bind(this)
  save := Func("shell_60").Bind(this)
}
$.file := Func("shell_59")
$.findColor := Func("shell_58")
$.findImage := Func("shell_57")
$.first := Func("shell_56")
$.floor := Func("shell_55")
$.formatHotkey := Func("shell_54")
$.getColor := Func("shell_53")
$.getPosition := Func("shell_52")
$.getState := Func("shell_51")
$.i := Func("shell_50")
$.includes := Func("shell_49")
$.info := Func("shell_48")
$.isArray := Func("shell_47")
$.isFunction := Func("shell_46")
$.isNumber := Func("shell_45")
$.isObject := Func("shell_44")
$.isString := Func("shell_43")
$.join := Func("shell_42")
class KeyBindingShellX {
  mapBound := {}
  mapCallback := {}
  add := Func("shell_41").Bind(this)
  fire := Func("shell_40").Bind(this)
  init := Func("shell_39").Bind(this)
  off := Func("shell_37").Bind(this)
  on := Func("shell_36").Bind(this)
  remove := Func("shell_35").Bind(this)
}
global keyBindingShell := new KeyBindingShellX()
$.off := keyBindingShell.remove
$.on := keyBindingShell.add
$.trigger := keyBindingShell.fire
$.last := Func("shell_34")
$.length := Func("shell_33")
$.move := Func("shell_32")
$.now := Func("shell_31")
$.nth := Func("shell_30")
global __cacheOnce__ := {}
global __indexOnce__ := 0
$.once := Func("shell_29").Bind(args)
$.open := Func("shell_27")
$.play := Func("shell_26")
$.press := Func("shell_25")
$.push := Func("shell_24")
$.random := Func("shell_23")
$.reload := Func("shell_22")
$.replace := Func("shell_21")
$.reverse := Func("shell_20")
$.round := Func("shell_19")
$.setFixed := Func("shell_18")
$.setInterval := Func("shell_17")
$.setTimeout := Func("shell_16")
$.sleep := Func("shell_15")
$.split := Func("shell_14")
$.suspend := Func("shell_13")
$.tail := Func("shell_12")
$.take := Func("shell_11")
global __iThrottle__ := 0
global __tThrottle__ := {}
global __tsThrottle__ := {}
$.throttle := Func("shell_10")
$.toLowerCase := Func("shell_7")
$.toString := Func("shell_6")
$.toUpperCase := Func("shell_5")
$.trim := Func("shell_4")
$.trimEnd := Func("shell_3")
$.trimStart := Func("shell_2")
$.type := Func("shell_1")
$.VERSION := "0.0.4"
shell_1(input) {
  if input is Number
    return "number"
  if (IsFunc(input)) {
    return "function"
  }
  if (IsObject(input)) {
    if (input.Count() == input.Length()) {
      if !(input.Length() >= 0) {
        return "function"
      }
      return "array"
    }
    return "object"
  }
  return "string"
}
shell_2(input, omitting := " `t") {
  return LTrim(input, omitting)
}
shell_3(input, omitting := " `t") {
  return RTrim(input, omitting)
}
shell_4(input, omitting := " `t") {
  return Trim(input, omitting)
}
shell_5(input) {
  StringUpper, __result__, input
  return __result__
}
shell_6(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    __result__ := ""
    for __index_for__, key in input {
      __result__ := "" . (__result__) . ", " . ($.toString.Call(key)) . ""
    }
    return "[" . ($.trim.Call(__result__, " ,")) . "]"
  } else if (__type__ == "object") {
    __result__ := ""
    for key, value in input {
      __result__ := "" . (__result__) . ", " . (key) . ": " . ($.toString.Call(value)) . ""
    }
    return "{" . ($.trim.Call(__result__, " ,")) . "}"
  }
  return input
}
shell_7(input) {
  StringLower, __result__, input
  return __result__
}
shell_8(callback, index) {
  callback.Call()
  __tsThrottle__[__ci_shell__.Call(index)] := $.now.Call()
}
shell_9(callback, time, index) {
  $.clearTimeout.Call(__tThrottle__[__ci_shell__.Call(index)])
  __tThrottle__[__ci_shell__.Call(index)] := $.setTimeout.Call(Func("shell_8").Bind(callback, index), __tsThrottle__[__ci_shell__.Call(index)] - $.now.Call() + time)
}
shell_10(time, callback) {
  __iThrottle__++
  __tsThrottle__[__ci_shell__.Call(__iThrottle__)] := 0
  return Func("shell_9").Bind(callback, time, __iThrottle__)
}
shell_11(list, count := 1) {
  if !($.isArray.Call(list)) {
    throw Exception("$.take: invalid type")
  }
  __len__ := $.length.Call(list)
  if !(__len__) {
    return []
  }
  if !(count >= 0) {
    return []
  }
  if (count >= __len__) {
    count := __len__
  }
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if (__i__ >= count) {
      break
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_12(list) {
  if !($.isArray.Call(list)) {
    throw Exception("$.tail: invalid type")
  }
  return $.drop.Call(list, 1)
}
shell_13(isSuspended := "Toggle") {
  if (isSuspended != "Toggle") {
    if (isSuspended) {
      isSuspended := "On"
    } else {
      isSuspended := "Off"
    }
  }
  Suspend, % isSuspended
}
shell_14(input, delimiter) {
  return StrSplit(input, delimiter)
}
shell_15(time) {
  Sleep, % time
}
shell_16(callback, time) {
  if ($.isFunction.Call(callback)) {
    callback := $.bind.Call(callback)
  }
  if !($.isNumber.Call(time)) {
    throw Exception("$.setTimeout: invalid type")
  }
  if (time <= 0) {
    time := 1
  }
  SetTimer, % callback, % 0 - time
  return callback
}
shell_17(callback, time) {
  if ($.isFunction.Call(callback)) {
    callback := $.bind.Call(callback)
  }
  if !($.isNumber.Call(time)) {
    throw Exception("$.setInterval: invalid type")
  }
  if !(time > 0) {
    throw Exception("$.setInterval: invalid value")
  }
  SetTimer, % callback, % time
  return callback
}
shell_18(isFixed := "Toggle") {
  if (isFixed != "Toggle") {
    if (isFixed) {
      isFixed := "On"
    } else {
      isFixed := "Off"
    }
  }
  Winset AlwaysOnTop, % isFixed, A
}
shell_19(n) {
  return Round(n)
}
shell_20(list) {
  if !($.isArray.Call(list)) {
    throw Exception("$.reverse: invalid type")
  }
  __len__ := $.length.Call(list)
  __listNew__ := []
  for __i__, __key__ in list {
    __i__ := __i__ - 1
    __listNew__[__ci_shell__.Call(__len__ - 1 - __i__)] := __key__
  }
  return __listNew__
}
shell_21(input, searchment, replacement, limit := -1) {
  return StrReplace(input, searchment, replacement, limit)
}
shell_22() {
  Reload
}
shell_23(min := 0, max := 1) {
  Random, __result__, min, max
  return __result__
}
shell_24(list, args*) {
  if !($.isArray.Call(list)) {
    throw Exception("$.push: invalid type")
  }
  for __index_for__, __arg__ in args {
    list.Push(__arg__)
  }
  return list
}
shell_25(listInput*) {
  if !($.length.Call(listInput)) {
    throw Exception("$.press: invalid key")
  }
  __listKey__ := []
  for __index_for__, __input__ in listInput {
    __ipt__ := $.toLowerCase.Call(__input__)
    __ipt__ := $.replace.Call(__ipt__, " ", "")
    __ipt__ := $.replace.Call(__ipt__, "-", "")
    __list__ := $.split.Call(__ipt__, "+")
    for __index_for__, __it__ in __list__ {
      $.push.Call(__listKey__, __it__)
    }
  }
  __listResult__ := []
  __len__ := $.length.Call(__listKey__)
  for __i__, __key__ in __listKey__ {
    __i__ := __i__ - 1
    if (__i__ == __len__ - 1) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      continue
    }
    if ($.includes.Call(__key__, ":")) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := $.split.Call(__key__, ":")
    } else {
      __listResult__[__ci_shell__.Call(__i__)] := [__key__, "down"]
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := [__key__, "up"]
    }
  }
  for __i__, __it__ in __listResult__ {
    __i__ := __i__ - 1
    if (__it__[1] == "win") {
      __it__[1] := "lwin"
    }
    __listResult__[__ci_shell__.Call(__i__)] := $.trim.Call("" . (__it__[1]) . " " . (__it__[2]) . "")
  }
  __result__ := ""
  for __index_for__, __it__ in __listResult__ {
    __result__ := "" . (__result__) . "{" . (__it__) . "}"
  }
  Send, % __result__
}
shell_26(filename) {
  SoundPlay, % filename
}
shell_27(source) {
  Run, % source
}
shell_28(__i__, callback, args*) {
  if (__cacheOnce__[__ci_shell__.Call(__i__)][1]) {
    return __cacheOnce__[__ci_shell__.Call(__i__)][2]
  }
  __result__ := callback.Call(args*)
  __cacheOnce__[__ci_shell__.Call(__i__)] := [true, __result__]
  return __result__
}
shell_29(args, callback) {
  if !($.isFunction.Call(callback)) {
    throw Exception("$.once: invalid type")
  }
  __i__ := __indexOnce__
  __indexOnce__++
  __cacheOnce__[__ci_shell__.Call(__i__)] := [false, ""]
  return Func("shell_28").Bind(__i__, callback)
}
shell_30(list, n := 0) {
  if !($.isArray.Call(list)) {
    throw Exception("$.nth: invalid type")
  }
  if !($.isNumber.Call(n)) {
    throw Exception("$.nth: invalid type")
  }
  if (n >= 0) {
    return list[__ci_shell__.Call(n)]
  } else {
    return list[__ci_shell__.Call(($.length.Call(list)) + n)]
  }
}
shell_31() {
  return A_TickCount
}
shell_32(point := "", speed := 0) {
  if !(point) {
    throw Exception("$.move: invalid point")
  }
  MouseMove, point[1], point[2], speed
}
shell_33(input) {
  __type__ := $.type.Call(input)
  switch __type__ {
    case "array": {
      return input.Length()
    }
    case "object": {
      return input.Count()
    }
    case "string": {
      return StrLen(input)
    }
    default: {
      throw Exception("$.length: invalid type '" . (__type__) . "'")
    }
  }
}
shell_34(list) {
  if !($.isArray.Call(list)) {
    throw Exception("$.last: invalid type")
  }
  return list[__ci_shell__.Call(($.length.Call(list)) - 1)]
}
shell_35(this, key) {
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  __listNew__ := []
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if (__item__[1] == __name__) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  if !($.length.Call(__listNew__)) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := __listNew__
  return $
}
shell_36(this, key, callback) {
  key := $.formatHotkey.Call(key)
  Hotkey, % key, % callback, On
  return $
}
shell_37(this, key, callback) {
  key := $.formatHotkey.Call(key)
  Hotkey, % key, % callback, Off
  return $
}
shell_38(key, this) {
  this.fire.Call(key)
}
shell_39(this, key) {
  if (this.mapCallback[__ci_shell__.Call(key)]) {
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := []
  __fn__ := Func("shell_38").Bind(key, this)
  this.mapBound[__ci_shell__.Call(key)] := __fn__
  this.on.Call(key, __fn__)
}
shell_40(this, key) {
  __array__ := $.split.Call(($.replace.Call(key, ":down", "")), ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
      __item__[2].Call()
    }
    return $
  }
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if !(__item__[1] == __name__) {
      continue
    }
    __item__[2].Call()
  }
  return $
}
shell_41(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  this.init.Call(key)
  $.push.Call(this.mapCallback[__ci_shell__.Call(key)], [__name__, callback])
  return $
}
shell_42(list, seperator := "") {
  if !($.isArray.Call(list)) {
    throw Exception("$.join: invalid type")
  }
  __result__ := ""
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__) {
      __result__ := __item__
      continue
    }
    __result__ := "" . (__result__) . "" . (seperator) . "" . (__item__) . ""
  }
  return __result__
}
shell_43(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "string") {
    return false
  }
  return true
}
shell_44(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "object") {
    return false
  }
  return true
}
shell_45(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "number") {
    return false
  }
  return true
}
shell_46(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "function") {
    return false
  }
  return true
}
shell_47(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "array") {
    return false
  }
  return true
}
shell_48(message, point := "") {
  if !(message) {
    return message
  }
  if !(point) {
    point := $.getPosition.Call()
  }
  __msg__ := $.toString.Call(message)
  ToolTip, % __msg__, % point[1], % point[2]
  return message
}
shell_49(input, needle) {
  __type__ := $.type.Call(input)
  if (__type__ == "string" || __type__ == "number") {
    return (InStr(input, needle)) > 0
  }
  if (__type__ == "array") {
    for __index_for__, __it__ in input {
      if (__it__ == needle) {
        return true
      }
    }
    return false
  }
  throw Exception("$.includes: invalid type '" . (__type__) . "'")
}
shell_50(message) {
  $.info.Call("[" . ($.now.Call()) . "] " . ($.toString.Call(message)) . "", [0, 0])
  return message
}
shell_51(key) {
  key := $.formatHotkey.Call(key)
  return GetKeyState(key, "P")
}
shell_52() {
  MouseGetPos, __x__, __y__
  return [__x__, __y__]
}
shell_53(point := "") {
  if !(point) {
    point := $.getPosition.Call()
  }
  PixelGetColor, __result__, % point[1], % point[2], RGB
  return __result__
}
shell_54(key) {
  __listKey__ := []
  __key__ := $.toLowerCase.Call(key)
  __key__ := $.replace.Call(__key__, " ", "")
  __key__ := $.replace.Call(__key__, "-", "")
  for __index_for__, __it__ in $.split.Call(__key__, "+") {
    $.push.Call(__listKey__, __it__)
  }
  __isAlt__ := false
  __isCtrl__ := false
  __isShift__ := false
  __isWin__ := false
  __listResult__ := []
  for __index_for__, key in __listKey__ {
    if (key == "alt") {
      __isAlt__ := true
      continue
    }
    if (key == "ctrl") {
      __isCtrl__ := true
      continue
    }
    if (key == "shift") {
      __isShift__ := true
      continue
    }
    if (key == "win") {
      __isWin__ := true
      continue
    }
    $.push.Call(__listResult__, key)
  }
  __prefix__ := ""
  if (__isAlt__) {
    __prefix__ := "" . (__prefix__) . "!"
  }
  if (__isCtrl__) {
    __prefix__ := "" . (__prefix__) . "^"
  }
  if (__isShift__) {
    __prefix__ := "" . (__prefix__) . "+"
  }
  if (__isWin__) {
    __prefix__ := "" . (__prefix__) . "#"
  }
  __result__ := ""
  for __index_for__, __it__ in __listResult__ {
    __result__ := "" . (__result__) . " & " . (__it__) . ""
  }
  return $.replace.Call("" . (__prefix__) . "" . ($.trim.Call(__result__, " &")) . "", ":", " ")
}
shell_55(n) {
  return Floor(n)
}
shell_56(list) {
  if !($.isArray.Call(list)) {
    throw Exception("$.first: invalid type")
  }
  return list[1]
}
shell_57(source, start := "", end := "") {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  ImageSearch __x__, __y__, start[1], start[2], end[1], end[2], % A_ScriptDir . "\\\" . source
  return [__x__, __y__]
}
shell_58(color, start := "", end := "", variation := 0) {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  PixelSearch __x__, __y__, start[1], start[2], end[1], end[2], color, variation, Fast RGB
  return [__x__, __y__]
}
shell_59(name) {
  return new FileShellX(name)
}
shell_60(this, content) {
  this.delete.Call()
  return this.append.Call(content)
}
shell_61(this) {
  if !(this.exist.Call()) {
    return ""
  }
  FileRead, __result__, % this.name
  return $.replace.Call(__result__, "`r", "")
}
shell_62(this) {
  if !(this.exist.Call()) {
    return this
  }
  FileDelete, % this.name
  return this
}
shell_63(this) {
  if !(FileExist(this.name)) {
    return false
  }
  return true
}
shell_64(this, content) {
  FileAppend, % content, % this.name, UTF-8
  return content
}
shell_65() {
  ExitApp
}
shell_66() {
  return new EmitterShellX
}
shell_67(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  $.push.Call(this.bus, [__type__, __name__, callback])
  return this
}
shell_68(this, key) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    this.bus := []
    return this
  }
  if !(__name__) {
    __busNew__ := []
    for __index_for__, __item__ in this.bus {
      if (__item__[1] == __type__) {
        continue
      }
      $.push.Call(__busNew__, __item__)
    }
    this.bus := __busNew__
    return this
  }
  __busNew__ := []
  for __index_for__, __item__ in this.bus {
    if (__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    $.push.Call(__busNew__, __item__)
  }
  this.bus := __busNew__
  return this
}
shell_69(this, key, args*) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    return this
  }
  if !(__name__) {
    for __index_for__, __item__ in this.bus {
      if !(__item__[1] == __type__) {
        continue
      }
      __item__[3].Call(args*)
    }
    return this
  }
  for __index_for__, __item__ in this.bus {
    if !(__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    __item__[3].Call(args*)
  }
  return this
}
shell_70(list, n := 1) {
  if !($.isArray.Call(list)) {
    throw Exception("$.drop: invalid type")
  }
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__ >= n) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_71(callback, args) {
  callback.Call(args*)
}
shell_72(callback, time, args*) {
  if !($.isFunction.Call(callback)) {
    throw Exception("$.delay: invalid type")
  }
  if !($.isNumber.Call(time)) {
    throw Exception("$.delay: invalid type")
  }
  __timer__ := $.setTimeout.Call(Func("shell_71").Bind(callback, args), time)
  return __timer__
}
shell_73(callback, args) {
  callback.Call(args*)
}
shell_74(callback, args*) {
  if !($.isFunction.Call(callback)) {
    throw Exception("$.defer: invalid type")
  }
  return $.delay.Call(Func("shell_73").Bind(callback, args), 1)
}
shell_75(callback, time, index) {
  $.clearTimeout.Call(__tDebounce__[__ci_shell__.Call(index)])
  __tDebounce__[__ci_shell__.Call(index)] := $.setTimeout.Call(callback, time)
}
shell_76(time, callback) {
  __iDebounce__++
  return Func("shell_75").Bind(callback, time, __iDebounce__)
}
shell_77(list, args*) {
  if !($.isArray.Call(list)) {
    throw Exception("$.concat: invalid type")
  }
  __listNew__ := $.clone.Call(list)
  for __index_for__, __arg__ in args {
    __type__ := $.type.Call(__arg__)
    if (__type__ == "array") {
      for __index_for__, __item__ in __arg__ {
        $.push.Call(__listNew__, __item__)
      }
    } else {
      $.push.Call(__listNew__, __arg__)
    }
  }
  return __listNew__
}
shell_78(list) {
  if !($.isArray.Call(list)) {
    throw Exception("$.compact: invalid type")
  }
  __listNew__ := []
  for __index_for__, __item__ in list {
    if !(__item__) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_79(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    __listNew__ := []
    for __index_for__, __item__ in input {
      $.push.Call(__listNew__, __item__)
    }
    return __listNew__
  }
  if (__type__ == "object") {
    __mapNew__ := {}
    for __key__, __value__ in input {
      __mapNew__[__ci_shell__.Call(__key__)] := __value__
    }
    return __mapNew__
  }
  throw Exception("$.clone: invalid type '" . (__type__) . "'")
}
shell_80(key := "left") {
  key := $.replace.Call(key, "-", "")
  key := $.replace.Call(key, ":", " ")
  Click, % key
}
shell_81(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_82(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_83(list, n := 1) {
  if !($.isArray.Call(list)) {
    throw Exception("$.chunk: invalid type")
  }
  __listNew__ := []
  __i__ := 0
  while (__i__ < ($.length.Call(list)) / n) {
    __listTemp__ := []
    __j__ := 0
    while (__j__ < n) {
      $.push.Call(__listTemp__, list[__ci_shell__.Call(__i__ * n + __j__)])
      __j__++
    }
    $.push.Call(__listNew__, __listTemp__)
    __i__++
  }
  return __listNew__
}
shell_84(n) {
  return Ceil(n)
}
shell_85(block) {
  if (block) {
    BlockInput, On
    return
  }
  BlockInput, Off
}
shell_86(callback, args*) {
  if !($.isFunction.Call(callback)) {
    throw Exception("$.bind: invalid type")
  }
  if !(callback.Name) {
    if !($.length.Call(args)) {
      return callback
    }
    throw Exception("$.bind: cannot bind a bound function")
  }
  return callback.Bind(args*)
}
shell_87() {
  SoundBeep
}
shell_88(message := "") {
  __msg__ := $.toString.Call(message)
  MsgBox, % __msg__
  return message
}
shell_89(n) {
  return Abs(n)
}
shell_90(input) {
  if input is Number
    return input + 1
  return input
}

global state := {}
global timer := {}
global ts := {}
global $$ := {}
class TickerX extends EmitterShellX {
  interval := 100
  max := 1000
  tick := 0
  __New() {
    base.__New()
    $.setInterval.Call(this.update, this.interval)
  }
  update := Func("genshin_111").Bind(this)
}
global ticker := new TickerX()
class ConfigX {
  data := {}
  source := "config.ini"
  __New() {
    this.data.process := this.read.Call("region/process", "YuanShen.exe")
    for __index_for__, key in ["autoESkill", "betterElementalVision", "betterJump", "betterSprint", "easySkillTimer", "fastPickup"] {
      this.data[__ci_genshin__.Call(key)] := this.read.Call("feature/enable" . (key) . "", 1)
    }
  }
  read := Func("genshin_110").Bind(this)
}
global Config := new ConfigX()
class ClientX extends EmitterShellX {
  height := 0
  isSuspend := false
  width := 0
  __New() {
    base.__New()
    this.setSize.Call()
    $.on.Call("alt + enter", Func("genshin_109"))
  }
  check := Func("genshin_108").Bind(this)
  checkActive := Func("genshin_107").Bind(this)
  point := Func("genshin_106").Bind(this)
  reset := Func("genshin_105").Bind(this)
  resetTimer := Func("genshin_104").Bind(this)
  setSize := Func("genshin_103").Bind(this)
  suspend := Func("genshin_102").Bind(this)
  setPriority := Func("genshin_101").Bind(this)
  vh := Func("genshin_100").Bind(this)
  vw := Func("genshin_99").Bind(this)
}
global client := new ClientX()
ticker.on.Call("change", Func("genshin_98"))
class HudX {
  lifetime := 5000
  listTimer := {}
  __New() {
    client.on.Call("leave", this.hide)
    $.on.Call("alt + f9", Func("genshin_97"))
  }
  getColor := Func("genshin_96").Bind(this)
  getPosition := Func("genshin_95").Bind(this)
  hide := Func("genshin_94").Bind(this)
  render := Func("genshin_93").Bind(this)
  reset := Func("genshin_91").Bind(this)
}
global hud := new HudX()
$$.log := Func("genshin_90")
class StatusCheckerX {
  isActive := false
  __New() {
    client.on.Call("leave", this.reset)
  }
  check := Func("genshin_89").Bind(this)
  checkIsActive := Func("genshin_88").Bind(this)
  reset := Func("genshin_87").Bind(this)
}
global statusChecker := new StatusCheckerX()
ticker.on.Call("change", Func("genshin_86"))
global __character__ := {aether: {color: 0}, albedo: {color: 0}, amber: {cd: 15, color: 6048867}, ayaka: {color: 0}, barbara: {cd: 32, color: 14603198}, beidou: {cd: 7.5, color: 4993838, typeE: 1}, bennett: {cd: [5, 10], color: 16511951}, chongyun: {cd: 15, color: 13496287}, diluc: {color: 0}, diona: {cd: [6, 15], color: 16701134}, fischl: {cd: 25, color: 16769961, typeE: 1}, ganyu: {cd: 10, color: 12438725}, hu_tao: {cd: 16, color: 8084321}, jean: {cd: 6, color: 15126691, typeE: 1}, kaeya: {cd: 6, color: 3755620}, keqing: {cd: 7.5, color: 12497347, typeE: 1}, klee: {cd: 20, color: 12466702}, lisa: {cd: [1, 16], color: 11970203}, lumine: {color: 0}, mona: {cd: 12, color: 5918820}, ningguang: {cd: 12, color: 16711134}, noelle: {cd: 24, color: 14604498}, qiqi: {cd: 30, color: 14801886}, rezor: {cd: [6, 10], color: 13028038}, rosaria: {color: 0}, sucrose: {cd: 15, color: 13953484}, tartaglia: {cd: 6, color: 14716223}, venti: {cd: [6, 15], color: 6132094}, xiangling: {cd: 12, color: 2241403}, xiao: {cd: 10, color: 3754046}, xingqiu: {cd: 21, color: 4753554}, xinyan: {cd: 18, color: 5258048}, zhongli: {cd: [4, 12], color: 4928805}}
class CharacterX {
  data := __character__
  __New() {
    for name, char in this.data {
      if !(char.cd) {
        char.cd := [0, 0]
      }
      if (($.type.Call(char.cd)) == "number") {
        char.cd := [char.cd, char.cd]
      }
      char.typeApr := Config.read.Call("" . (name) . "/type-apr", 1)
      char.typeAtk := Config.read.Call("" . (name) . "/type-atk", 1)
      if !(char.typeE) {
        char.typeE := 0
      }
    }
  }
}
global Character := new CharacterX()
class MemberX {
  current := 0
  map := {}
  name := ""
  __New() {
    $.on.Call("f12", this.scan)
  }
  checkCharacterByPosition := Func("genshin_85").Bind(this)
  getRange := Func("genshin_84").Bind(this)
  scan := Func("genshin_83").Bind(this)
  toggle := Func("genshin_82").Bind(this)
}
global member := new MemberX()
class SkillTimerX {
  listCountDown := {}
  listRecord := {}
  check := Func("genshin_81").Bind(this)
  hide := Func("genshin_80").Bind(this)
  record := Func("genshin_79").Bind(this)
  recordEnd := Func("genshin_78").Bind(this)
  recordStart := Func("genshin_77").Bind(this)
  reset := Func("genshin_76").Bind(this)
}
global skillTimer := new SkillTimerX()
if (Config.data.easySkillTimer) {
  ticker.on.Call("change", Func("genshin_75"))
}
class RecorderX {
  current := 0
  file := ""
  isActive := false
  list := []
  listIgnore := []
  ts := 0
  __New() {
    this.file := $.file.Call("replay.txt")
    client.on.Call("leave", this.stop)
    $.on.Call("f11", this.replay)
    $.on.Call("f10", Func("genshin_74").Bind(this))
  }
  ignore := Func("genshin_73").Bind(this)
  next := Func("genshin_72").Bind(this)
  record := Func("genshin_70").Bind(this)
  replay := Func("genshin_69").Bind(this)
  save := Func("genshin_67").Bind(this)
  start := Func("genshin_66").Bind(this)
  stop := Func("genshin_65").Bind(this)
}
global recorder := new RecorderX()
class KeyBindingX extends EmitterShellX {
  isPressed := {}
  isPrevented := {}
  __New() {
    base.__New()
    client.on.Call("leave", this.resetKey)
  }
  bindEvent := Func("genshin_64").Bind(this)
  press := Func("genshin_61").Bind(this)
  resetKey := Func("genshin_60").Bind(this)
}
class PlayerX extends KeyBindingX {
  isMoving := false
  __New() {
    base.__New()
    for __index_for__, key in [1, 2, 3, 4] {
      this.bindEvent.Call("toggle", key)
    }
    this.bindEvent.Call("attack", "l-button", "prevent").bindEvent.Call("toggle-aim", "r").bindEvent.Call("use-e", "e").bindEvent.Call("use-q", "q").bindEvent.Call("jump", "space", "prevent").bindEvent.Call("sprint", "r-button").bindEvent.Call("confirm", "y").bindEvent.Call("find", "v").bindEvent.Call("guide", "g").bindEvent.Call("pause", "p").bindEvent.Call("pick", "f").bindEvent.Call("unhold", "x").bindEvent.Call("use-item", "z").bindEvent.Call("view", "m-button")
    for __index_for__, key in ["esc", "b", "c", "j", "m", "f1", "f2", "f3", "f4", "f5"] {
      this.bindEvent.Call("menu-" . (key) . "", key)
    }
  }
  jump := Func("genshin_59").Bind(this)
  pick := Func("genshin_58").Bind(this)
  startMove := Func("genshin_57").Bind(this)
  stopMove := Func("genshin_56").Bind(this)
  toggleQ := Func("genshin_55").Bind(this)
  useE := Func("genshin_54").Bind(this)
  useQ := Func("genshin_52").Bind(this)
}
global player := new PlayerX()
class MovementX extends KeyBindingX {
  count := 0
  __New() {
    base.__New()
    for __index_for__, key in ["w", "a", "s", "d"] {
      $.on.Call(key, Func("genshin_51").Bind(key, this))
      $.on.Call("" . (key) . ":up", Func("genshin_50").Bind(key, this))
    }
    player.on.Call("move:start", Func("genshin_49")).on.Call("move:end", Func("genshin_48"))
  }
  check := Func("genshin_47").Bind(this)
  checkMove := Func("genshin_46").Bind(this)
}
global movement := new MovementX()
if (Config.data.betterElementalVision) {
  player.on.Call("find:end", Func("genshin_45"))
}
global jumpTwice := Func("genshin_43")
player.on.Call("jump:start", player.jump)
if (Config.data.betterJump) {
  player.on.Call("jump:end", jumpTwice).on.Call("unhold:end", Func("genshin_41"))
}
timer.pick := ""
global pick := Func("genshin_39")
global stopPick := Func("genshin_37")
if (Config.data.fastPickup) {
  player.on.Call("pick:start", pick).on.Call("pick:end", stopPick)
}
state.isSprinting := false
state.isSprintSwimming := false
timer.sprint := ""
ts.sprint := 0
global checkSwimming := Func("genshin_36")
global sprint := Func("genshin_35")
global startSprint := Func("genshin_33")
global stopSprint := Func("genshin_32")
player.on.Call("sprint:start", startSprint).on.Call("sprint:end", stopSprint)
if (Config.data.betterSprint) {
  player.on.Call("move:end", Func("genshin_31"))
}
state.toggleDelay := 200
global getToggleDelay := Func("genshin_30")
global startToggle := Func("genshin_29")
global stopToggle := Func("genshin_27")
player.on.Call("toggle:start", startToggle).on.Call("toggle:end", stopToggle)
for __index_for__, key in [1, 2, 3, 4] {
  $.on.Call("alt + " . (key) . "", Func("genshin_24").Bind(key))
}
if (Config.data.easySkillTimer) {
  player.on.Call("use-e:start", Func("genshin_23")).on.Call("use-e:end", Func("genshin_22"))
}
state.isViewing := false
timer.view := ""
global toggleView := Func("genshin_21")
global view := Func("genshin_20")
if (Config.data.betterElementalVision) {
  player.on.Call("view:end", toggleView)
}
class TacticX {
  count := 0
  isActive := false
  __New() {
    player.on.Call("attack:start", this.start).on.Call("attack:end", this.stop)
  }
  chargedAttack := Func("genshin_18").Bind(this)
  delay := Func("genshin_16").Bind(this)
  jump := Func("genshin_15").Bind(this)
  normalAttack := Func("genshin_14").Bind(this)
  start := Func("genshin_13").Bind(this)
  stop := Func("genshin_12").Bind(this)
  validate := Func("genshin_11").Bind(this)
}
global tactic := new TacticX()
tactic.hu_tao := Func("genshin_10")
global taoChargedAttack := Func("genshin_9")
tactic.klee := Func("genshin_6")
global kleeChargedAttack := Func("genshin_5")
$.on.Call("alt + f4", Func("genshin_2"))
$.on.Call("ctrl + f5", Func("genshin_1"))
genshin_1() {
  $.beep.Call()
  client.reset.Call()
  $.reload.Call()
}
genshin_2() {
  $.beep.Call()
  client.reset.Call()
  $.exit.Call()
}
genshin_3() {
  if !(player.isMoving) {
    tactic.klee.Call()
    return
  }
  tactic.jump.Call(tactic.klee)
}
genshin_4() {
  tactic.delay.Call(200, Func("genshin_3"))
}
genshin_5() {
  tactic.chargedAttack.Call(Func("genshin_4"))
}
genshin_6() {
  if !(tactic.isActive) {
    return
  }
  if (tactic.count > 1) {
    tactic.count := 0
  }
  switch tactic.count {
    case 0: {
      tactic.normalAttack.Call(tactic.klee)
    }
    case 1: {
      kleeChargedAttack.Call()
    }
  }
  tactic.count++
}
genshin_7() {
  tactic.jump.Call(tactic.hu_tao)
}
genshin_8() {
  tactic.delay.Call(300, Func("genshin_7"))
}
genshin_9() {
  tactic.chargedAttack.Call(Func("genshin_8"))
}
genshin_10() {
  if !(tactic.isActive) {
    return
  }
  if (tactic.count > 1) {
    tactic.count := 0
  }
  switch tactic.count {
    case 0: {
      tactic.normalAttack.Call(tactic.hu_tao)
    }
    case 1: {
      taoChargedAttack.Call()
    }
  }
  tactic.count++
}
genshin_11(this) {
  name := member.name
  if !(name) {
    return false
  }
  __object__ := Character.data[__ci_genshin__.Call(name)]
  typeAtk := __object__["typeAtk"]
  if !(typeAtk) {
    return false
  }
  if !(this[__ci_genshin__.Call(name)]) {
    return false
  }
  if !(statusChecker.isActive) {
    return false
  }
  return this[__ci_genshin__.Call(name)]
}
genshin_12(this) {
  if (this.isActive) {
    this.count := 0
    this.isActive := false
    return
  }
  $.click.Call("left:up")
}
genshin_13(this) {
  if (this.isActive) {
    return
  }
  callback := this.validate.Call()
  if !(callback) {
    $.click.Call("left:down")
    return
  }
  this.isActive := true
  callback.Call()
}
genshin_14(this, callback) {
  $.click.Call("left")
  this.delay.Call(100, callback)
}
genshin_15(this, callback) {
  player.jump.Call()
  if !(player.isMoving) {
    this.delay.Call(450, callback)
  } else {
    this.delay.Call(550, callback)
  }
}
genshin_16(this, time, callback) {
  if !(this.isActive) {
    return
  }
  $.clearTimeout.Call(timer.tacticDelay)
  timer.tacticDelay := $.setTimeout.Call(callback, time)
}
genshin_17(callback) {
  $.click.Call("left:up")
  callback.Call()
}
genshin_18(this, callback) {
  $.click.Call("left:down")
  this.delay.Call(300, Func("genshin_17").Bind(callback))
}
genshin_19() {
  $.click.Call("middle:up")
}
genshin_20() {
  $.click.Call("middle:down")
  $.setTimeout.Call(Func("genshin_19"), 2500)
}
genshin_21() {
  $.clearInterval.Call(timer.view)
  state.isViewing := !state.isViewing
  if !(state.isViewing) {
    return
  }
  timer.view := $.setInterval.Call(view, 3000)
  view.Call()
}
genshin_22() {
  skillTimer.record.Call("end")
}
genshin_23() {
  skillTimer.record.Call("start")
}
genshin_24(key) {
  player.toggleQ.Call(key)
}
genshin_25() {
  $.press.Call("e:up")
  skillTimer.record.Call("end")
}
genshin_26() {
  player.useE.Call("holding")
}
genshin_27(key) {
  if !(Config.data.autoESkill) {
    return
  }
  __object__ := member
  name := __object__["name"]
  if !(name) {
    return
  }
  __object__ := Character.data[__ci_genshin__.Call(name)]
  typeApr := __object__["typeApr"]
  if !(typeApr) {
    return
  }
  if (typeApr == 2) {
    $.setTimeout.Call(player.useE, state.toggleDelay)
    return
  }
  if (typeApr == 3) {
    $.setTimeout.Call(Func("genshin_26"), state.toggleDelay)
    return
  }
  if (typeApr == 4) {
    $.setTimeout.Call(player.useQ, state.toggleDelay)
    return
  }
  $.setTimeout.Call(Func("genshin_25"), state.toggleDelay)
}
genshin_28() {
  $.press.Call("e:down")
  skillTimer.record.Call("start")
}
genshin_29(key) {
  member.toggle.Call(key)
  if !(Config.data.autoESkill) {
    return
  }
  __object__ := member
  name := __object__["name"]
  if !(name) {
    return
  }
  state.toggleDelay := getToggleDelay.Call()
  __object__ := Character.data[__ci_genshin__.Call(name)]
  typeApr := __object__["typeApr"]
  if !(typeApr) {
    return
  }
  if !(typeApr == 1) {
    return
  }
  $.setTimeout.Call(Func("genshin_28"), state.toggleDelay)
}
genshin_30() {
  delay := 500 - ($.now.Call() - ts.sprint)
  if (delay < 200) {
    delay := 200
  }
  return delay
}
genshin_31() {
  if !(state.isSprinting) {
    return
  }
  if (player.isMoving) {
    return
  }
  player.startMove.Call("w")
}
genshin_32() {
  ts.sprint := $.now.Call()
  if !(Config.data.betterSprint) {
    return
  }
  state.isSprinting := false
  state.isSprintSwimming := false
  $.clearTimeout.Call(timer.sprint)
  player.stopMove.Call("w")
}
genshin_33() {
  if !(Config.data.betterSprint) {
    return
  }
  state.isSprinting := true
  sprint.Call()
}
genshin_34() {
  if (state.isSprintSwimming) {
    state.isSprintSwimming := false
    $.click.Call("right:down")
  }
  sprint.Call()
}
genshin_35() {
  if !(player.isMoving) {
    player.startMove.Call("w")
  }
  if !(checkSwimming.Call()) {
    state.isSprintSwimming := true
    $.click.Call("right:up")
  }
  $.clearTimeout.Call(timer.sprint)
  timer.sprint := $.setTimeout.Call(Func("genshin_34"), 1300)
}
genshin_36() {
  start := client.point.Call([90, 90])
  end := [client.width, client.height]
  point := $.findColor.Call(0xFFE92C, start, end)
  return point[1] * point[2] > 0
}
genshin_37() {
  $.clearTimeout.Call(timer.pick)
}
genshin_38() {
  player.pick.Call()
  pick.Call()
}
genshin_39() {
  $.clearTimeout.Call(timer.pick)
  timer.pick := $.setTimeout.Call(Func("genshin_38"), 100)
}
genshin_40() {
  player.jump.Call()
}
genshin_41() {
  $.setTimeout.Call(Func("genshin_40"), 50)
}
genshin_42() {
  if !(player.isMoving) {
    return
  }
  player.jump.Call()
}
genshin_43() {
  $.setTimeout.Call(Func("genshin_42"), 200)
}
genshin_44() {
  $.press.Call("m")
}
genshin_45() {
  $.setTimeout.Call(Func("genshin_44"), 200)
}
genshin_46(this) {
  count := 0
  for __index_for__, key in ["w", "a", "s", "d"] {
    if ($.getState.Call(key)) {
      count := count + 1
      if (this.isPressed[__ci_genshin__.Call(key)]) {
        continue
      }
      this.isPressed[__ci_genshin__.Call(key)] := true
      recorder.record.Call("" . (key) . ":down")
      $.press.Call("" . (key) . ":down")
    } else {
      if !(this.isPressed[__ci_genshin__.Call(key)]) {
        continue
      }
      this.isPressed[__ci_genshin__.Call(key)] := false
      recorder.record.Call("" . (key) . ":up")
      $.press.Call("" . (key) . ":up")
    }
  }
  return count
}
genshin_47(this, key, action) {
  if (action == "down" && this.isPressed[__ci_genshin__.Call(key)]) {
    return
  } else if (action == "up" && !this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  count := this.checkMove.Call()
  if (count && !this.count) {
    player.emit.Call("move:start")
  } else if (!count && this.count) {
    player.emit.Call("move:end")
  }
  this.count := count
}
genshin_48() {
  if !(player.isMoving) {
    return
  }
  player.isMoving := false
}
genshin_49() {
  if (player.isMoving) {
    return
  }
  player.isMoving := true
}
genshin_50(key, this) {
  this.check.Call(key, "up")
}
genshin_51(key, this) {
  this.check.Call(key, "down")
}
genshin_52(this) {
  $.press.Call("q")
  return this
}
genshin_53() {
  $.press.Call("e:up")
  skillTimer.record.Call("end")
}
genshin_54(this, isHolding := false) {
  if !(isHolding) {
    $.press.Call("e")
    skillTimer.record.Call("start")
    skillTimer.record.Call("end")
    return this
  }
  $.press.Call("e:down")
  skillTimer.record.Call("start")
  $.setTimeout.Call(Func("genshin_53"), 1000)
  return this
}
genshin_55(this, key) {
  $.press.Call("alt + " . (key) . "")
  member.toggle.Call(key)
  return this
}
genshin_56(this, key) {
  if (movement.isPressed[__ci_genshin__.Call(key)]) {
    return this
  }
  $.press.Call("" . (key) . ":up")
  return this
}
genshin_57(this, key) {
  if (movement.isPressed[__ci_genshin__.Call(key)]) {
    return this
  }
  $.press.Call("" . (key) . ":down")
  return this
}
genshin_58(this) {
  $.press.Call("f")
  $.click.Call("wheel-down")
}
genshin_59(this) {
  $.press.Call("space")
}
genshin_60(this) {
  for key, value in this.isPressed {
    if (this.isPrevented[__ci_genshin__.Call(key)]) {
      continue
    }
    if !(value) {
      continue
    }
    if ($.getState.Call(key)) {
      continue
    }
    this.press.Call("" . (key) . ":up")
  }
  return this
}
genshin_61(this, key) {
  if !($.includes.Call(key, "-button")) {
    $.press.Call(key)
    return this
  }
  if ($.includes.Call(key, "l-button")) {
    key := $.replace.Call(key, "l-button", "left")
  } else if ($.includes.Call(key, "m-button")) {
    key := $.replace.Call(key, "m-button", "middle")
  } else if ($.includes.Call(key, "r-button")) {
    key := $.replace.Call(key, "r-button", "right")
  }
  $.click.Call(key)
  return this
}
genshin_62(key, name, this) {
  if !(this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  this.isPressed[__ci_genshin__.Call(key)] := false
  recorder.record.Call("" . (key) . ":up")
  if !(this.isPrevented[__ci_genshin__.Call(key)]) {
    this.press.Call("" . (key) . ":up")
  }
  this.emit.Call("" . (name) . ":end", key)
}
genshin_63(key, name, this) {
  if (this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  this.isPressed[__ci_genshin__.Call(key)] := true
  recorder.record.Call("" . (key) . ":down")
  if !(this.isPrevented[__ci_genshin__.Call(key)]) {
    this.press.Call("" . (key) . ":down")
  }
  this.emit.Call("" . (name) . ":start", key)
}
genshin_64(this, name, key, prevent := false) {
  if (prevent) {
    this.isPrevented[__ci_genshin__.Call(key)] := true
  }
  $.on.Call("" . (key) . "", Func("genshin_63").Bind(key, name, this))
  $.on.Call("" . (key) . ":up", Func("genshin_62").Bind(key, name, this))
  return this
}
genshin_65(this) {
  if !(this.isActive) {
    return
  }
  this.isActive := false
  $$.log.Call("end recording")
  $.beep.Call()
}
genshin_66(this) {
  if (this.isActive) {
    return
  }
  this.isActive := true
  this.list := []
  this.ts := $.now.Call()
  $$.log.Call("start recording")
  $.beep.Call()
}
genshin_67(this) {
  if !($.length.Call(this.list)) {
    return
  }
  result := ""
  for __index_for__, item in this.list {
    result := "" . (result) . "" . (item.delay) . "|" . (item.key) . "`n"
  }
  this.file.save.Call(result)
}
genshin_68(list, this) {
  $$.log.Call("start playing")
  $.beep.Call()
  this.next.Call(list)
}
genshin_69(this) {
  list := []
  this.current := 0
  for __index_for__, item in $.split.Call(this.file.load.Call(), "`n") {
    if !(item) {
      continue
    }
    __array__ := $.split.Call(item, "|")
    delay := __array__[1]
    key := __array__[2]
    $.push.Call(list, [delay, key])
  }
  $.setTimeout.Call(Func("genshin_68").Bind(list, this), 500)
}
genshin_70(this, key) {
  if !(this.isActive) {
    return
  }
  if ($.includes.Call(this.listIgnore, key)) {
    return
  }
  $$.log.Call(key)
  now := $.now.Call()
  delay := now - this.ts
  this.ts := now
  $.push.Call(this.list, {delay: delay, key: key})
}
genshin_71(key, list, this) {
  $.trigger.Call(key)
  this.current++
  this.next.Call(list)
}
genshin_72(this, list) {
  n := this.current
  if (n >= $.length.Call(list)) {
    $$.log.Call("end playing")
    $.beep.Call()
    return
  }
  __array__ := list[__ci_genshin__.Call(n)]
  delay := __array__[1]
  key := __array__[2]
  $.setTimeout.Call(Func("genshin_71").Bind(key, list, this), delay)
}
genshin_73(this, key) {
  if !(key) {
    this.listIgnore := []
    return
  }
  if ($.includes.Call(this.listIgnore, key)) {
    return
  }
  $.push.Call(this.listIgnore, key)
}
genshin_74(this) {
  if !(this.isActive) {
    this.ignore.Call("f10")
    this.start.Call()
  } else {
    this.stop.Call()
    this.save.Call()
  }
}
genshin_75(tick) {
  if !(Mod(tick, 200)) {
    skillTimer.check.Call()
  }
}
genshin_76(this) {
  this.listCountDown := {}
  this.listRecord := {}
}
genshin_77(this, now) {
  n := member.current
  name := member.name
  __object__ := Character.data[__ci_genshin__.Call(name)]
  cd := __object__["cd"]
  if (this.listRecord[__ci_genshin__.Call(n)]) {
    return
  }
  this.listRecord[__ci_genshin__.Call(n)] := now
}
genshin_78(this, now) {
  n := member.current
  name := member.name
  __object__ := Character.data[__ci_genshin__.Call(name)]
  cd := __object__["cd"]
  typeE := __object__["typeE"]
  if !(this.listRecord[__ci_genshin__.Call(n)]) {
    return
  }
  diff := now - this.listRecord[__ci_genshin__.Call(n)]
  if (diff < 500) {
    this.listCountDown[__ci_genshin__.Call(n)] := this.listRecord[__ci_genshin__.Call(n)] + (cd[1] * 1000)
    this.listRecord[__ci_genshin__.Call(n)] := 0
    return
  }
  if (typeE == 1) {
    this.listCountDown[__ci_genshin__.Call(n)] := now + (cd[2] * 1000)
  } else {
    this.listCountDown[__ci_genshin__.Call(n)] := this.listRecord[__ci_genshin__.Call(n)] + (cd[2] * 1000)
  }
  this.listRecord[__ci_genshin__.Call(n)] := 0
}
genshin_79(this, step) {
  n := member.current
  name := member.name
  if !(name) {
    return
  }
  now := $.now.Call()
  if (this.listCountDown[__ci_genshin__.Call(n)] && this.listCountDown[__ci_genshin__.Call(n)] - now > 1000) {
    return
  }
  if (step == "end") {
    this.recordEnd.Call(now)
    return
  }
  if (step == "start") {
    this.recordStart.Call(now)
    return
  }
}
genshin_80(this, n) {
  this.listCountDown[__ci_genshin__.Call(n)] := 0
  hud.render.Call(n, "")
}
genshin_81(this) {
  if (client.isSuspend) {
    return
  }
  now := $.now.Call()
  for __index_for__, n in [1, 2, 3, 4] {
    if !(this.listCountDown[__ci_genshin__.Call(n)]) {
      continue
    }
    if (now >= this.listCountDown[__ci_genshin__.Call(n)]) {
      this.hide.Call(n)
    } else {
      diff := $.floor.Call((now - this.listCountDown[__ci_genshin__.Call(n)]) * 0.001)
      hud.render.Call(n, "" . (diff) . "s")
    }
  }
}
genshin_82(this, n) {
  this.current := n
  this.name := this.map[__ci_genshin__.Call(n)]
}
genshin_83(this) {
  for __index_for__, n in [1, 2, 3, 4] {
    name := this.checkCharacterByPosition.Call(n)
    this.map[__ci_genshin__.Call(n)] := name
    hud.render.Call(n, name)
  }
  skillTimer.reset.Call()
  if !(this.current) {
    $.press.Call("1")
    this.toggle.Call(1)
  }
}
genshin_84(this, n) {
  start := client.point.Call([90, 9 * (n + 1)])
  end := client.point.Call([96, 9 * (n + 2)])
  return [start, end]
}
genshin_85(this, n) {
  __array__ := this.getRange.Call(n)
  pointStart := __array__[1]
  pointEnd := __array__[2]
  for name, char in Character.data {
    if !(char.color) {
      continue
    }
    point := $.findColor.Call(char.color, pointStart, pointEnd)
    if !(point[1] * point[2] > 0) {
      continue
    }
    return name
  }
  return ""
}
genshin_86(tick) {
  statusChecker.check.Call(tick)
}
genshin_87(this) {
  this.isActive := false
}
genshin_88(this) {
  start := client.point.Call([95, 5])
  end := [client.vw.Call(96), start[2] + 1]
  __array__ := $.findColor.Call(0xFFFFFF, start, end)
  x := __array__[1]
  y := __array__[2]
  return x * y > 0
}
genshin_89(this, tick) {
  if (client.isSuspend) {
    return
  }
  if !(Mod(tick, 1000)) {
    this.isActive := this.checkIsActive.Call()
  }
}
genshin_90(message) {
  hud.render.Call(5, message)
  return message
}
genshin_91(this) {
  for __key_for__, timer in this.listTimer {
    $.clearTimeout.Call(timer)
  }
  this.listTimer := {}
  this.hide.Call()
}
genshin_92(n, this) {
  this.render.Call(n, "")
}
genshin_93(this, n, msg) {
  $.clearTimeout.Call(this.listTimer[__ci_genshin__.Call(n)])
  this.listTimer[__ci_genshin__.Call(n)] := $.setTimeout.Call(Func("genshin_92").Bind(n, this), this.lifetime)
  __array__ := this.getPosition.Call(n)
  x := __array__[1]
  y := __array__[2]
  id := n + 1
  ToolTip, % msg, % x, % y, % id
}
genshin_94(this) {
  for __index_for__, n in [1, 2, 3, 4, 5] {
    this.render.Call(n, "")
  }
}
genshin_95(this, n) {
  if (client.width + 100 < A_ScreenWidth) {
    left := client.width
  } else {
    left := client.vw.Call(80)
  }
  return [left, client.vh.Call(4 + 9 * (n + 1))]
}
genshin_96(this) {
  color := $.getColor.Call()
  __array__ := $.getPosition.Call()
  x := __array__[1]
  y := __array__[2]
  x1 := $.round.Call((x * 100) / client.width)
  y1 := $.round.Call((y * 100) / client.height)
  this.render.Call(5, "" . (x1) . ", " . (y1) . " / " . (color) . "")
  ClipBoard := color
}
genshin_97() {
  $.beep.Call()
  hud.getColor.Call()
}
genshin_98(tick) {
  if !(Mod(tick, 200)) {
    client.check.Call()
  }
}
genshin_99(this, n) {
  return $.round.Call(this.width * n * 0.01)
}
genshin_100(this, n) {
  return $.round.Call(this.height * n * 0.01)
}
genshin_101(this, level) {
  Process, Priority, % Config.data.process, % level
}
genshin_102(this, isSuspend) {
  if (isSuspend) {
    if (this.isSuspend) {
      return
    }
    this.isSuspend := true
    $.suspend.Call(true)
    this.resetTimer.Call()
    return
  }
  if !(isSuspend) {
    if !(this.isSuspend) {
      return
    }
    this.isSuspend := false
    $.suspend.Call(false)
    return
  }
}
genshin_103(this) {
  name := "ahk_exe " . (Config.data.process) . ""
  WinGetPos, __x__, __y__, __width__, __height__, % name
  this.width := __width__
  this.height := __height__
}
genshin_104(this) {
  for __key_for__, _timer in timer {
    $.clearTimeout.Call(_timer)
  }
}
genshin_105(this) {
  this.setPriority.Call("normal")
  this.resetTimer.Call()
}
genshin_106(this, input) {
  return [this.vw.Call(input[1]), this.vh.Call(input[2])]
}
genshin_107(this) {
  return WinActive("ahk_exe " . (Config.data.process) . "")
}
genshin_108(this) {
  if (!this.isSuspend && !this.checkActive.Call()) {
    this.setPriority.Call("low")
    this.suspend.Call(true)
    this.emit.Call("leave")
    return
  }
  if (this.isSuspend && this.checkActive.Call()) {
    this.setPriority.Call("normal")
    this.suspend.Call(false)
    this.emit.Call("enter")
    return
  }
}
genshin_109() {
  $.press.Call("alt + enter")
  $.setTimeout.Call(this.setSize, 1000)
}
genshin_110(this, key, defaultValue := "") {
  __array__ := $.split.Call(key, "/")
  __section__ := __array__[1]
  __key__ := __array__[2]
  IniRead, __result__, % this.source, % __section__, % __key__, % defaultValue
  return __result__
}
genshin_111(this) {
  this.tick := this.tick + this.interval
  this.emit.Call("change", this.tick)
  if (this.tick >= this.max) {
    this.tick := 0
  }
}
genshin_112(input) {
  if input is Number
    return input + 1
  return input
}
