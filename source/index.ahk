; Generated by Coffee-AHK/0.0.37
global __ci_genshin__ := Func("genshin_136")
if (A_IsAdmin != true) {
  Run *RunAs "%A_ScriptFullPath%"
  ExitApp
}
#HotkeyInterval, 1000
#KeyHistory, 0
#MaxHotkeysPerInterval, 200
#MaxThreads, 20
#NoEnv
#Persistent
#SingleInstance, Force
#UseHook, On

CoordMode, Mouse, Client
CoordMode, Pixel, Client
CoordMode, ToolTip, Client
SendMode, Event
SetBatchLines, 100ms
SetKeyDelay, 0, 50
SetMouseDelay, 0, 50
StringCaseSense, On
; Generated by Coffee-AHK/0.0.37
global __ci_shell__ := Func("shell_116")
global $ := {}
$.abs := Func("shell_115")
$.add := Func("shell_114")
$.alert := Func("shell_113").Bind(msg)
$.beep := Func("shell_111")
$.bind := Func("shell_110")
$.blockInput := Func("shell_109")
$.ceil := Func("shell_108")
$.chunk := Func("shell_107")
$.clearInterval := Func("shell_106")
$.clearTimeout := Func("shell_105")
$.click := Func("shell_104")
$.clone := Func("shell_103")
$.compact := Func("shell_102")
$.concat := Func("shell_101")
global __iDebounce__ := 0
global __tDebounce__ := {}
$.debounce := Func("shell_100")
$.defer := Func("shell_98")
$.delay := Func("shell_96")
$.drop := Func("shell_94")
$.each := Func("shell_93")
class EmitterShellX {
  bus := []
  emit := Func("shell_92").Bind(this)
  off := Func("shell_91").Bind(this)
  on := Func("shell_90").Bind(this)
}
$.emitter := Func("shell_89")
$.eq := Func("shell_88")
$.exit := Func("shell_87")
class FileShellX {
  name := ""
  __New(name) {
    __vt__.Call("file.constructor", name, "string")
    this.name := name
  }
  append := Func("shell_86").Bind(this)
  exist := Func("shell_85").Bind(this)
  delete := Func("shell_84").Bind(this)
  load := Func("shell_83").Bind(this)
  save := Func("shell_82").Bind(this)
}
$.file := Func("shell_81")
$.findColor := Func("shell_80")
$.findImage := Func("shell_79")
$.first := Func("shell_78")
$.head := $.first
$.floor := Func("shell_77")
$.formatHotkey := Func("shell_76")
global __formatKeyFormatHotkey__ := Func("shell_75")
global __pickPrefixFormatHotkey__ := Func("shell_74")
$.getColor := Func("shell_73")
$.getPosition := Func("shell_72")
$.getState := Func("shell_71")
$.gt := Func("shell_70")
$.gte := Func("shell_69")
$.i := Func("shell_68")
$.includes := Func("shell_67")
$.info := Func("shell_66")
$.isArray := Func("shell_65")
$.isFunction := Func("shell_64")
$.isNumber := Func("shell_63")
$.isObject := Func("shell_62")
$.isString := Func("shell_61")
$.join := Func("shell_60")
class KeyBindingShellX {
  mapBound := {}
  mapCallback := {}
  add := Func("shell_59").Bind(this)
  fire := Func("shell_58").Bind(this)
  init := Func("shell_57").Bind(this)
  off := Func("shell_55").Bind(this)
  on := Func("shell_54").Bind(this)
  remove := Func("shell_53").Bind(this)
}
global keyBindingShell := new KeyBindingShellX()
$.off := keyBindingShell.remove
$.on := keyBindingShell.add
$.trigger := keyBindingShell.fire
$.keys := Func("shell_52")
$.last := Func("shell_51")
$.length := Func("shell_50")
$.lt := Func("shell_49")
$.lte := Func("shell_48")
$.map := Func("shell_47")
$.mixin := Func("shell_46")
$.mod := Func("shell_45")
$.move := Func("shell_44")
$.noop := Func("shell_43")
$.now := Func("shell_42")
$.nth := Func("shell_41")
global __cacheOnce__ := {}
global __indexOnce__ := 0
$.once := Func("shell_40").Bind(args)
$.open := Func("shell_38")
$.play := Func("shell_37")
$.press := Func("shell_36")
global __formatInputPress__ := Func("shell_35")
global __validateInputPress__ := Func("shell_34")
$.push := Func("shell_33")
$.random := Func("shell_32")
$.range := Func("shell_31")
$.reload := Func("shell_30")
$.replace := Func("shell_29")
$.reverse := Func("shell_28")
$.round := Func("shell_27")
$.setFixed := Func("shell_26")
$.setInterval := Func("shell_25")
$.setTimeout := Func("shell_24")
$.shuffle := Func("shell_23").Bind(__split__)
$.sleep := Func("shell_22")
$.slice := Func("shell_21")
global __pickArgumentSlice__ := Func("shell_20")
$.sort := Func("shell_19")
$.split := Func("shell_18")
$.sum := Func("shell_17")
$.suspend := Func("shell_16")
$.tail := Func("shell_15")
$.take := Func("shell_14")
global __iThrottle__ := 0
global __tThrottle__ := {}
global __tsThrottle__ := {}
$.throttle := Func("shell_13")
$.toLowerCase := Func("shell_10")
$.toLower := $.toLowerCase
$.toString := Func("shell_9")
$.toUpperCase := Func("shell_8")
$.toUpper := $.toUpperCase
$.trim := Func("shell_7")
$.trimEnd := Func("shell_6")
$.trimStart := Func("shell_5")
$.type := Func("shell_4")
$.uniq := Func("shell_3")
global __vt__ := Func("shell_2")
$.values := Func("shell_1")
$.VERSION := "0.0.9"
shell_1(input) {
  __vt__.Call("values", input, "object")
  __listResult__ := []
  for __index_for__, __key__ in $.keys.Call(input) {
    $.push.Call(__listResult__, input[__ci_shell__.Call(__key__)])
  }
  return __listResult__
}
shell_2(name, target, type*) {
  __type__ := $.type.Call(target)
  if !($.includes.Call(type, __type__)) {
    throw Exception("$." . (name) . ": invalid type '" . (__type__) . "'")
  }
}
shell_3(list) {
  __vt__.Call("uniq", list, "array")
  __hasString__ := false
  for __index_for__, __item__ in list {
    if (($.type.Call(__item__)) == "string") {
      __hasString__ := true
      break
    }
  }
  __string__ := $.join.Call(list, ",")
  if (__hasString__) {
    Sort, __string__, C U D,
  } else {
    Sort, __string__, N U D,
  }
  return $.split.Call(__string__, ",")
}
shell_4(input) {
  if input is Number
    return "number"
  if (IsFunc(input)) {
    return "function"
  }
  if (IsObject(input)) {
    if (input.Count() == input.Length()) {
      if !(input.Length() >= 0) {
        return "function"
      }
      return "array"
    }
    return "object"
  }
  return "string"
}
shell_5(input, omitting := " `t") {
  return LTrim(input, omitting)
}
shell_6(input, omitting := " `t") {
  return RTrim(input, omitting)
}
shell_7(input, omitting := " `t") {
  return Trim(input, omitting)
}
shell_8(input) {
  StringUpper, __result__, input
  return __result__
}
shell_9(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    __result__ := ""
    for __index_for__, key in input {
      __result__ := "" . (__result__) . ", " . ($.toString.Call(key)) . ""
    }
    return "[" . ($.trim.Call(__result__, " ,")) . "]"
  } else if (__type__ == "object") {
    __result__ := ""
    for key, value in input {
      __result__ := "" . (__result__) . ", " . (key) . ": " . ($.toString.Call(value)) . ""
    }
    return "{" . ($.trim.Call(__result__, " ,")) . "}"
  }
  return input
}
shell_10(input) {
  StringLower, __result__, input
  return __result__
}
shell_11(callback, index) {
  callback.Call()
  __tsThrottle__[__ci_shell__.Call(index)] := $.now.Call()
}
shell_12(callback, time, index) {
  $.clearTimeout.Call(__tThrottle__[__ci_shell__.Call(index)])
  __tThrottle__[__ci_shell__.Call(index)] := $.setTimeout.Call(Func("shell_11").Bind(callback, index), __tsThrottle__[__ci_shell__.Call(index)] - $.now.Call() + time)
}
shell_13(time, callback) {
  __vt__.Call("throttle", time, "number")
  __vt__.Call("throttle", callback, "function")
  __iThrottle__++
  __tsThrottle__[__ci_shell__.Call(__iThrottle__)] := 0
  return Func("shell_12").Bind(callback, time, __iThrottle__)
}
shell_14(list, count := 1) {
  __vt__.Call("take", list, "array")
  __vt__.Call("take", count, "number")
  __len__ := $.length.Call(list)
  if !(__len__) {
    return []
  }
  if !(count >= 0) {
    return []
  }
  if (count >= __len__) {
    count := __len__
  }
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if (__i__ >= count) {
      break
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_15(list) {
  __vt__.Call("tail", list, "array")
  return $.drop.Call(list, 1)
}
shell_16(isSuspended := "Toggle") {
  if (isSuspended != "Toggle") {
    if (isSuspended) {
      isSuspended := "On"
    } else {
      isSuspended := "Off"
    }
  }
  Suspend, % isSuspended
}
shell_17(list) {
  __vt__.Call("sum", list, "array")
  __result__ := 0
  for __index_for__, __n__ in list {
    __result__ := __result__ + __n__
  }
  return __result__
}
shell_18(input, delimiter) {
  return StrSplit(input, delimiter)
}
shell_19(list) {
  __vt__.Call("sort", list, "array")
  __hasString__ := false
  for __index_for__, __item__ in list {
    if (($.type.Call(__item__)) == "string") {
      __hasString__ := true
      break
    }
  }
  __string__ := $.join.Call(list, ",")
  if (__hasString__) {
    Sort, __string__, C D,
  } else {
    Sort, __string__, N D,
  }
  return $.split.Call(__string__, ",")
}
shell_20(args) {
  switch $.length.Call(args) {
    case 1: {
      __array__ := [args[1], 0, $.length.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], $.length.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
  }
  __vt__.Call("slice", __list__, "array")
  __vt__.Call("slice", __start__, "number")
  __vt__.Call("slice", __end__, "number")
  return [__list__, __start__, __end__]
}
shell_21(args*) {
  __array__ := __pickArgumentSlice__.Call(args)
  __list__ := __array__[1]
  __start__ := __array__[2]
  __end__ := __array__[3]
  __len__ := $.length.Call(__list__)
  if (__start__ > __len__) {
    __start__ := __len__
  }
  if (__start__ < 0) {
    __start__ := __len__ + __start__
  }
  if (__end__ > __len__) {
    __end__ := __len__
  }
  if (__end__ < 0) {
    __end__ := __len__ + __end__
  }
  __isReverse__ := false
  if (__start__ > __end__) {
    __isReverse__ := true
    __array__ := [__end__, __start__]
    __start__ := __array__[1]
    __end__ := __array__[2]
  }
  __listNew__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    $.push.Call(__listNew__, __list__[__ci_shell__.Call(__start__ + __n__)])
    __n__++
  }
  if (__isReverse__) {
    return $.reverse.Call(__listNew__)
  }
  return __listNew__
}
shell_22(time) {
  __vt__.Call("sleep", time, "number")
  Sleep, % time
}
shell_23(__split__, list) {
  __vt__.Call("shuffle", list, "array")
  __string__ := $.join.Call(list, ",")
  Sort, __string__, Random D,
  return __split__.Call(__string__, ",")
}
shell_24(callback, time) {
  __vt__.Call("setTimeout", callback, "function")
  __vt__.Call("setTimeout", time, "number")
  callback := $.bind.Call(callback)
  if !($.isNumber.Call(time)) {
    throw Exception("$.setTimeout: invalid type")
  }
  if (time <= 0) {
    time := 1
  }
  SetTimer, % callback, % 0 - time
  return callback
}
shell_25(callback, time) {
  __vt__.Call("setInterval", callback, "function")
  __vt__.Call("setInterval", time, "number")
  callback := $.bind.Call(callback)
  if !(time > 0) {
    throw Exception("$.setInterval: invalid value")
  }
  SetTimer, % callback, % time
  return callback
}
shell_26(isFixed := "Toggle") {
  if (isFixed != "Toggle") {
    if (isFixed) {
      isFixed := "On"
    } else {
      isFixed := "Off"
    }
  }
  Winset AlwaysOnTop, % isFixed, A
}
shell_27(n) {
  __vt__.Call("round", n, "number")
  return Round(n)
}
shell_28(list) {
  __vt__.Call("reverse", list, "array")
  __len__ := $.length.Call(list)
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    __listNew__[__ci_shell__.Call(__len__ - 1 - __i__)] := __item__
  }
  for __i__, __item__ in __listNew__ {
    __i__ := __i__ - 1
    list[__ci_shell__.Call(__i__)] := __item__
  }
  return list
}
shell_29(input, searchment, replacement, limit := -1) {
  return StrReplace(input, searchment, replacement, limit)
}
shell_30() {
  Reload
}
shell_31(args*) {
  switch $.length.Call(args) {
    case 1: {
      __array__ := [0, args[1], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    default: {
      throw Exception("$.range: invalid arguments")
    }
  }
  __vt__.Call("range", __start__, "number")
  __vt__.Call("range", __end__, "number")
  __vt__.Call("range", __step__, "number")
  if (__start__ == __end__) {
    return [__start__]
  }
  if (__start__ > __end__) {
    return []
  }
  __listResult__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    $.push.Call(__listResult__, __start__ + __step__ * __n__)
    __n__++
  }
  return __listResult__
}
shell_32(min := 0, max := 1) {
  __vt__.Call("random", min, "number")
  __vt__.Call("random", max, "number")
  Random, __result__, min, max
  return __result__
}
shell_33(list, args*) {
  __vt__.Call("push", list, "array")
  for __index_for__, __arg__ in args {
    list.Push(__arg__)
  }
  return list
}
shell_34(listInput) {
  if !($.length.Call(listInput)) {
    return false
  }
  __key__ := listInput[1]
  if ($.includes.Call(__key__, "-button")) {
    __key__ := $.replace.Call(__key__, "l-button", "left")
    __key__ := $.replace.Call(__key__, "m-button", "middle")
    __key__ := $.replace.Call(__key__, "r-button", "right")
    $.click.Call(__key__)
    return false
  }
  return true
}
shell_35(listInput) {
  __listKey__ := []
  for __index_for__, __input__ in listInput {
    __ipt__ := $.toLowerCase.Call(__input__)
    __ipt__ := $.replace.Call(__ipt__, " ", "")
    __ipt__ := $.replace.Call(__ipt__, "-", "")
    $.push.Call(__listKey__, ($.split.Call(__ipt__, "+"))*)
  }
  return __listKey__
}
shell_36(listInput*) {
  if !(__validateInputPress__.Call(listInput)) {
    return
  }
  __listKey__ := __formatInputPress__.Call(listInput)
  __listResult__ := []
  __len__ := $.length.Call(__listKey__)
  for __i__, __key__ in __listKey__ {
    __i__ := __i__ - 1
    if (__i__ == __len__ - 1) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      continue
    }
    if ($.includes.Call(__key__, ":")) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := $.split.Call(__key__, ":")
    } else {
      __listResult__[__ci_shell__.Call(__i__)] := [__key__, "down"]
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := [__key__, "up"]
    }
  }
  for __i__, __it__ in __listResult__ {
    __i__ := __i__ - 1
    if (__it__[1] == "win") {
      __it__[1] := "lwin"
    }
    __listResult__[__ci_shell__.Call(__i__)] := $.trim.Call("" . (__it__[1]) . " " . (__it__[2]) . "")
  }
  __result__ := ""
  for __index_for__, __it__ in __listResult__ {
    __result__ := "" . (__result__) . "{" . (__it__) . "}"
  }
  Send, % __result__
}
shell_37(filename) {
  __vt__.Call("play", filename, "string")
  SoundPlay, % filename
}
shell_38(source) {
  __vt__.Call("open", source, "string")
  Run, % source
}
shell_39(__i__, callback, args*) {
  if (__cacheOnce__[__ci_shell__.Call(__i__)][1]) {
    return __cacheOnce__[__ci_shell__.Call(__i__)][2]
  }
  __result__ := callback.Call(args*)
  __cacheOnce__[__ci_shell__.Call(__i__)] := [true, __result__]
  return __result__
}
shell_40(args, callback) {
  __vt__.Call("once", callback, "function")
  __i__ := __indexOnce__
  __indexOnce__++
  __cacheOnce__[__ci_shell__.Call(__i__)] := [false, ""]
  return Func("shell_39").Bind(__i__, callback)
}
shell_41(list, n := 0) {
  __vt__.Call("nth", list, "array")
  __vt__.Call("nth", n, "number")
  if (n >= 0) {
    return list[__ci_shell__.Call(n)]
  } else {
    return list[__ci_shell__.Call(($.length.Call(list)) + n)]
  }
}
shell_42() {
  return A_TickCount
}
shell_43() {
  return
}
shell_44(point := "", speed := 0) {
  __vt__.Call("move", point, "array")
  __vt__.Call("move", speed, "number")
  MouseMove, point[1], point[2], speed
}
shell_45(dividend, divisor) {
  __vt__.Call("mod", dividend, "number")
  __vt__.Call("mod", divisor, "number")
  return Mod(dividend, divisor)
}
shell_46(args*) {
  switch $.length.Call(args) {
    case 1: {
      __array__ := [{}, args[1]]
      __target__ := __array__[1]
      __source__ := __array__[2]
    }
    case 2: {
      __array__ := args
      __target__ := __array__[1]
      __source__ := __array__[2]
    }
    default: {
      throw Exception("$.mixin: invalid arguments")
    }
  }
  __vt__.Call("mixin", __target__, "object")
  __vt__.Call("mixin", __source__, "object")
  for __key__, __value__ in __source__ {
    __target__[__ci_shell__.Call(__key__)] := __value__
  }
  return __target__
}
shell_47(list, callback) {
  __vt__.Call("map", list, "array")
  __vt__.Call("map", callback, "function")
  __listResult__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    $.push.Call(__listResult__, callback.Call(__item__, __i__))
  }
  return __listResult__
}
shell_48(value, other) {
  return value <= other
}
shell_49(value, other) {
  return value < other
}
shell_50(input) {
  __type__ := $.type.Call(input)
  switch __type__ {
    case "array": {
      return input.Length()
    }
    case "object": {
      return input.Count()
    }
    case "string": {
      return StrLen(input)
    }
    default: {
      throw Exception("$.length: invalid type '" . (__type__) . "'")
    }
  }
}
shell_51(list) {
  __vt__.Call("last", list, "array")
  return list[__ci_shell__.Call(($.length.Call(list)) - 1)]
}
shell_52(input) {
  __vt__.Call("keys", input, "object")
  __listResult__ := []
  for __key__, __value__ in input {
    $.push.Call(__listResult__, __key__)
  }
  return $.sort.Call(__listResult__)
}
shell_53(this, key) {
  __vt__.Call("keyBinding.remove", key, "string", "number")
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  __listNew__ := []
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if (__item__[1] == __name__) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  if !($.length.Call(__listNew__)) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := __listNew__
  return $
}
shell_54(this, key, callback) {
  __vt__.Call("keyBinding.on", key, "string", "number")
  __vt__.Call("keyBinding.on", callback, "function")
  key := $.formatHotkey.Call($.replace.Call(key, ":down", ""))
  Hotkey, % key, % callback, On
  return $
}
shell_55(this, key, callback) {
  __vt__.Call("keyBinding.off", key, "string", "number")
  __vt__.Call("keyBinding.off", key, callback, "function")
  key := $.formatHotkey.Call($.replace.Call(key, ":down", ""))
  Hotkey, % key, % callback, Off
  return $
}
shell_56(key, this) {
  this.fire.Call(key)
}
shell_57(this, key) {
  __vt__.Call("keyBinding.init", key, "string", "number")
  if (this.mapCallback[__ci_shell__.Call(key)]) {
    return $
  }
  this.mapCallback[__ci_shell__.Call(key)] := []
  __fn__ := Func("shell_56").Bind(key, this)
  this.mapBound[__ci_shell__.Call(key)] := __fn__
  this.on.Call(key, __fn__)
}
shell_58(this, key) {
  __vt__.Call("keyBinding.fire", key, "string", "number")
  __array__ := $.split.Call(($.replace.Call(key, ":down", "")), ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
      __item__[2].Call()
    }
    return $
  }
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if !(__item__[1] == __name__) {
      continue
    }
    __item__[2].Call()
  }
  return $
}
shell_59(this, key, callback) {
  __vt__.Call("keyBinding.add", key, "string", "number")
  __vt__.Call("keyBinding.add", callback, "function")
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  this.init.Call(key)
  $.push.Call(this.mapCallback[__ci_shell__.Call(key)], [__name__, callback])
  return $
}
shell_60(list, seperator := "") {
  __vt__.Call("join", list, "array")
  __result__ := ""
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__) {
      __result__ := __item__
      continue
    }
    __result__ := "" . (__result__) . "" . (seperator) . "" . (__item__) . ""
  }
  return __result__
}
shell_61(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "string") {
    return false
  }
  return true
}
shell_62(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "object") {
    return false
  }
  return true
}
shell_63(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "number") {
    return false
  }
  return true
}
shell_64(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "function") {
    return false
  }
  return true
}
shell_65(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "array") {
    return false
  }
  return true
}
shell_66(message, point := "") {
  if !(message) {
    return message
  }
  if !(point) {
    point := $.getPosition.Call()
  }
  __vt__.Call("info", point, "array")
  __msg__ := $.toString.Call(message)
  ToolTip, % __msg__, % point[1], % point[2]
  return message
}
shell_67(input, needle) {
  __type__ := $.type.Call(input)
  if (__type__ == "string" || __type__ == "number") {
    return (InStr(input, needle)) > 0
  }
  if (__type__ == "array") {
    for __index_for__, __it__ in input {
      if (__it__ == needle) {
        return true
      }
    }
    return false
  }
  throw Exception("$.includes: invalid type '" . (__type__) . "'")
}
shell_68(message) {
  $.info.Call("[" . ($.now.Call()) . "] " . ($.toString.Call(message)) . "", [0, 0])
  return message
}
shell_69(value, other) {
  return value >= other
}
shell_70(value, other) {
  return value > other
}
shell_71(key) {
  key := $.formatHotkey.Call(key)
  return GetKeyState(key, "P")
}
shell_72() {
  MouseGetPos, __x__, __y__
  return [__x__, __y__]
}
shell_73(point := "") {
  if !(point) {
    point := $.getPosition.Call()
  }
  __vt__.Call("getColor", point, "array")
  PixelGetColor, __result__, % point[1], % point[2], RGB
  return __result__
}
shell_74(listKey) {
  if (($.length.Call(listKey)) == 1) {
    return ["", listKey]
  }
  __prefix__ := ""
  __listNew__ := []
  for __index_for__, __key__ in listKey {
    if (__key__ == "alt") {
      __prefix__ := "" . (__prefix__) . "!"
      continue
    }
    if (__key__ == "ctrl") {
      __prefix__ := "" . (__prefix__) . "^"
      continue
    }
    if (__key__ == "shift") {
      __prefix__ := "" . (__prefix__) . "+"
      continue
    }
    if (__key__ == "win") {
      __prefix__ := "" . (__prefix__) . "#"
      continue
    }
    $.push.Call(__listNew__, __key__)
  }
  return [__prefix__, __listNew__]
}
shell_75(key) {
  __listKey__ := []
  __key__ := $.toLowerCase.Call(key)
  __key__ := $.replace.Call(__key__, " ", "")
  __key__ := $.replace.Call(__key__, "-", "")
  $.push.Call(__listKey__, ($.split.Call(__key__, "+"))*)
  return __listKey__
}
shell_76(key) {
  __listKey__ := __formatKeyFormatHotkey__.Call(key)
  __array__ := __pickPrefixFormatHotkey__.Call(__listKey__)
  __prefix__ := __array__[1]
  __listKey__ := __array__[2]
  __result__ := ""
  for __index_for__, __it__ in __listKey__ {
    __result__ := "" . (__result__) . " & " . (__it__) . ""
  }
  return $.replace.Call("" . (__prefix__) . "" . ($.trim.Call(__result__, " &")) . "", ":", " ")
}
shell_77(n) {
  __vt__.Call("floor", n, "number")
  return Floor(n)
}
shell_78(list) {
  __vt__.Call("first", list, "array")
  return list[1]
}
shell_79(source, start := "", end := "") {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  ImageSearch __x__, __y__, start[1], start[2], end[1], end[2], % A_ScriptDir . "\\\" . source
  return [__x__, __y__]
}
shell_80(color, start := "", end := "", variation := 0) {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  PixelSearch __x__, __y__, start[1], start[2], end[1], end[2], color, variation, Fast RGB
  return [__x__, __y__]
}
shell_81(name) {
  return new FileShellX(name)
}
shell_82(this, content) {
  this.delete.Call()
  return this.append.Call(content)
}
shell_83(this) {
  if !(this.exist.Call()) {
    return ""
  }
  FileRead, __result__, % this.name
  return $.replace.Call(__result__, "`r", "")
}
shell_84(this) {
  if !(this.exist.Call()) {
    return this
  }
  FileDelete, % this.name
  return this
}
shell_85(this) {
  if !(FileExist(this.name)) {
    return false
  }
  return true
}
shell_86(this, content) {
  FileAppend, % content, % this.name, UTF-8
  return content
}
shell_87() {
  ExitApp
}
shell_88(value, other) {
  return value == other
}
shell_89() {
  return new EmitterShellX
}
shell_90(this, key, callback) {
  __vt__.Call("emitter.on", key, "string")
  __vt__.Call("emitter.on", callback, "function")
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  $.push.Call(this.bus, [__type__, __name__, callback])
  return this
}
shell_91(this, key) {
  __vt__.Call("emitter.off", key, "string")
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    this.bus := []
    return this
  }
  if !(__name__) {
    __busNew__ := []
    for __index_for__, __item__ in this.bus {
      if (__item__[1] == __type__) {
        continue
      }
      $.push.Call(__busNew__, __item__)
    }
    this.bus := __busNew__
    return this
  }
  __busNew__ := []
  for __index_for__, __item__ in this.bus {
    if (__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    $.push.Call(__busNew__, __item__)
  }
  this.bus := __busNew__
  return this
}
shell_92(this, key, args*) {
  __vt__.Call("emitter.emit", key, "string")
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    return this
  }
  if !(__name__) {
    for __index_for__, __item__ in this.bus {
      if !(__item__[1] == __type__) {
        continue
      }
      __item__[3].Call(args*)
    }
    return this
  }
  for __index_for__, __item__ in this.bus {
    if !(__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    __item__[3].Call(args*)
  }
  return this
}
shell_93(list, callback) {
  __vt__.Call("each", list, "array")
  __vt__.Call("each", callback, "function")
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    callback.Call(__item__, __i__)
  }
}
shell_94(list, n := 1) {
  __vt__.Call("drop", list, "array")
  __vt__.Call("drop", n, "number")
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__ >= n) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_95(callback, args) {
  callback.Call(args*)
}
shell_96(callback, time, args*) {
  __vt__.Call("delay", callback, "function")
  __vt__.Call("delay", time, "number")
  __timer__ := $.setTimeout.Call(Func("shell_95").Bind(callback, args), time)
  return __timer__
}
shell_97(callback, args) {
  callback.Call(args*)
}
shell_98(callback, args*) {
  __vt__.Call("defer", callback, "function")
  return $.delay.Call(Func("shell_97").Bind(callback, args), 1)
}
shell_99(callback, time, index) {
  $.clearTimeout.Call(__tDebounce__[__ci_shell__.Call(index)])
  __tDebounce__[__ci_shell__.Call(index)] := $.setTimeout.Call(callback, time)
}
shell_100(time, callback) {
  __vt__.Call("debounce", time, "number")
  __vt__.Call("debounce", callback, "function")
  __iDebounce__++
  return Func("shell_99").Bind(callback, time, __iDebounce__)
}
shell_101(list, args*) {
  __vt__.Call("concat", list, "array")
  __listNew__ := $.clone.Call(list)
  for __index_for__, __arg__ in args {
    __type__ := $.type.Call(__arg__)
    if (__type__ == "array") {
      for __index_for__, __item__ in __arg__ {
        $.push.Call(__listNew__, __item__)
      }
    } else {
      $.push.Call(__listNew__, __arg__)
    }
  }
  return __listNew__
}
shell_102(list) {
  __vt__.Call("compact", list, "array")
  __listNew__ := []
  for __index_for__, __item__ in list {
    if !(__item__) {
      continue
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_103(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    return $.slice.Call(input)
  }
  if (__type__ == "object") {
    __mapNew__ := {}
    for __key__, __value__ in input {
      __mapNew__[__ci_shell__.Call(__key__)] := __value__
    }
    return __mapNew__
  }
  throw Exception("$.clone: invalid type '" . (__type__) . "'")
}
shell_104(key := "left") {
  key := $.replace.Call(key, "-", "")
  key := $.replace.Call(key, ":", " ")
  Click, % key
}
shell_105(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_106(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_107(list, n := 1) {
  __vt__.Call("chunk", list, "array")
  __vt__.Call("chunk", n, "number")
  __listNew__ := []
  __i__ := 0
  while (__i__ < ($.length.Call(list)) / n) {
    __listTemp__ := []
    __j__ := 0
    while (__j__ < n) {
      $.push.Call(__listTemp__, list[__ci_shell__.Call(__i__ * n + __j__)])
      __j__++
    }
    $.push.Call(__listNew__, __listTemp__)
    __i__++
  }
  return __listNew__
}
shell_108(n) {
  __vt__.Call("ceil", n, "number")
  return Ceil(n)
}
shell_109(block) {
  if (block) {
    BlockInput, On
    return
  }
  BlockInput, Off
}
shell_110(callback, args*) {
  __vt__.Call("bind", callback, "function")
  if !(callback.Name) {
    if !($.length.Call(args)) {
      return callback
    }
    throw Exception("$.bind: cannot bind a bound function")
  }
  return callback.Bind(args*)
}
shell_111() {
  SoundBeep
}
shell_112(msg) {
  return $.toString.Call(msg)
}
shell_113(msg, message*) {
  __msg__ := $.join.Call(($.map.Call(message, Func("shell_112"))), ", ")
  MsgBox, % __msg__
}
shell_114(args*) {
  __result__ := 0
  for __index_for__, __arg__ in args {
    __result__ := __result__ + __arg__
  }
  return __result__
}
shell_115(n) {
  __vt__.Call("abs", n, "number")
  return Abs(n)
}
shell_116(input) {
  if input is Number
    return input + 1
  return input
}

global state := {}
global timer := {}
global ts := {}
global $$ := {isDebug: false}
$$.vt := Func("genshin_135")
class TickerX extends EmitterShellX {
  interval := 100
  max := 1000
  tick := 0
  __New() {
    base.__New()
    $.setInterval.Call(this.update, this.interval)
  }
  update := Func("genshin_134").Bind(this)
}
global ticker := new TickerX()
class ConfigX {
  data := {}
  source := "config.ini"
  __New() {
    this.data.process := this.read.Call("region/process", "YuanShen.exe")
    for __index_for__, key in ["betterElementalVision", "betterJump", "betterSprint", "easySkillTimer", "fastPickup"] {
      this.data[__ci_genshin__.Call(key)] := this.read.Call("feature/enable" . (key) . "", 1)
    }
  }
  read := Func("genshin_133").Bind(this)
}
global Config := new ConfigX()
class ClientX extends KeyBindingX {
  height := 0
  isFullScreen := false
  isSuspend := false
  width := 0
  __New() {
    base.__New()
    this.setSize.Call()
    this.on.Call("enter", Func("genshin_132").Bind(this))
    $.on.Call("alt + f4", Func("genshin_131").Bind(this)).on.Call("ctrl + f5", Func("genshin_130").Bind(this)).on.Call("alt + enter", Func("genshin_129").Bind(this))
  }
  check := Func("genshin_128").Bind(this)
  checkActive := Func("genshin_127").Bind(this)
  point := Func("genshin_126").Bind(this)
  reset := Func("genshin_125").Bind(this)
  resetTimer := Func("genshin_124").Bind(this)
  setSize := Func("genshin_123").Bind(this)
  suspend := Func("genshin_122").Bind(this)
  setPriority := Func("genshin_121").Bind(this)
  vh := Func("genshin_120").Bind(this)
  vw := Func("genshin_119").Bind(this)
}
global client := new ClientX()
ticker.on.Call("change", Func("genshin_118"))
class HudX {
  lifetime := 5000
  listTimer := {}
  __New() {
    client.on.Call("leave", this.hide)
    $.on.Call("alt + f9", Func("genshin_117"))
  }
  getColor := Func("genshin_116").Bind(this)
  getPosition := Func("genshin_115").Bind(this)
  hide := Func("genshin_114").Bind(this)
  render := Func("genshin_113").Bind(this)
  reset := Func("genshin_111").Bind(this)
}
global hud := new HudX()
$$.log := Func("genshin_110")
class MenuX {
  isVisible := false
  __New() {
    ticker.on.Call("change", Func("genshin_109").Bind(this))
  }
  checkVisibility := Func("genshin_108").Bind(this)
}
global menu := new MenuX()
global __character_a_m__ := {aether: {color: 0}, albedo: {color: 0}, amber: {backend: 1, cd: 15, color: 6048867, duration: 8}, ayaka: {color: 0}, barbara: {backend: 1, cd: 32, color: 14603198, duration: 15}, beidou: {cd: 7.5, color: 4993838, typeE: 1}, bennett: {backend: 1, cd: [4.5, 10], color: 16511951}, chongyun: {backend: 1, cd: 15, color: 13496287, duration: 10}, diluc: {color: 0}, diona: {backend: -1, cd: [6, 15], color: 16701134, duration: [4, 10]}, eula: {color: 0}, fischl: {backend: 1, cd: 25, color: 16769961, duration: 10, typeE: 1}, ganyu: {backend: 1, cd: 10, color: 12438725, duration: 6}, hu_tao: {cd: 16, color: 8084321, duration: 9}, jean: {backend: -0.5, cd: 6, color: 15126691, typeE: 1}, kaeya: {backend: 1, cd: 6, color: 3755620}, keqing: {cd: 7.5, color: 12497347, duration: 5, typeE: 1}, klee: {backend: 1, cd: 20, color: 12466702}, lisa: {backend: 1, cd: [1, 16], color: 11970203}, lumine: {color: 0}, mona: {backend: 1, cd: 12, color: 5918820, duration: 6}}
global __character_n_z__ := {ningguang: {backend: 1, cd: 12, color: 16711134, duration: 29}, noelle: {backend: 1, cd: 24, color: 14604498, duration: 12}, qiqi: {backend: 1, cd: 30, color: 14801886, duration: 15}, rezor: {backend: 1, cd: [6, 10], color: 13028038}, rosaria: {color: 0}, sucrose: {backend: 1, cd: 14.5, color: 13953484}, tartaglia: {cd: 6, color: 14716223}, venti: {backend: 1.5, cd: [6, 15], color: 6132094}, xiangling: {backend: 1, cd: 12, color: 3688571, duration: 7}, xiao: {cd: 10, color: 3754046}, xingqiu: {backend: 1, cd: 21, color: 4753554, duration: 15}, xinyan: {backend: 1, cd: 18, color: 5258048, duration: 12}, Yanfei: {color: 0}, zhongli: {backend: -1.5, cd: [4, 12.5], color: 4928805, duration: 20.5}}
class CharacterX {
  data := $.mixin.Call(__character_a_m__, __character_n_z__)
  __New() {
    for name, char in this.data {
      if !(char.cd) {
        char.cd := [0, 0]
      }
      if ($.isNumber.Call(char.cd)) {
        char.cd := [char.cd, char.cd]
      }
      if !(char.duration) {
        char.duration := [0, 0]
      }
      if ($.isNumber.Call(char.duration)) {
        char.duration := [char.duration, char.duration]
      }
      char.typeApr := Config.read.Call("" . (name) . "/type-apr", 0)
      char.typeCbt := Config.read.Call("" . (name) . "/type-cbt", 0)
      if !(char.typeE) {
        char.typeE := 0
      }
    }
  }
}
global Character := new CharacterX()
ts.toggle := 0
class MemberX extends EmitterShellX {
  map := {}
  __New() {
    base.__New()
    this.on.Call("change", Func("genshin_107").Bind(this))
    $.on.Call("f12", this.scan)
  }
  checkCharacterByPosition := Func("genshin_106").Bind(this)
  getIndexBy := Func("genshin_105").Bind(this)
  getRange := Func("genshin_104").Bind(this)
  has := Func("genshin_103").Bind(this)
  scan := Func("genshin_102").Bind(this)
  toggle := Func("genshin_101").Bind(this)
  toggleBy := Func("genshin_100").Bind(this)
}
global member := new MemberX()
class SkillTimerX {
  listCountDown := {}
  listDuration := {}
  listQ := {}
  listRecord := {}
  __New() {
    this.reset.Call()
    member.on.Call("change", this.reset)
  }
  check := Func("genshin_99").Bind(this)
  hide := Func("genshin_98").Bind(this)
  record := Func("genshin_97").Bind(this)
  recordEnd := Func("genshin_96").Bind(this)
  recordStart := Func("genshin_95").Bind(this)
  render := Func("genshin_94").Bind(this)
  reset := Func("genshin_93").Bind(this)
}
global skillTimer := new SkillTimerX()
ticker.on.Call("change", Func("genshin_92"))
class RecorderX {
  current := 0
  file := ""
  isActive := false
  list := []
  listIgnore := []
  ts := 0
  __New() {
    this.file := $.file.Call("replay.txt")
    client.on.Call("leave", this.stop)
    $.on.Call("f11", this.replay)
    $.on.Call("f10", Func("genshin_91").Bind(this))
  }
  ignore := Func("genshin_90").Bind(this)
  log := Func("genshin_89").Bind(this)
  next := Func("genshin_88").Bind(this)
  record := Func("genshin_86").Bind(this)
  replay := Func("genshin_85").Bind(this)
  save := Func("genshin_83").Bind(this)
  start := Func("genshin_82").Bind(this)
  stop := Func("genshin_81").Bind(this)
}
global recorder := new RecorderX()
class KeyBindingX extends EmitterShellX {
  isPressed := {}
  isPrevented := {}
  __New() {
    base.__New()
    client.on.Call("leave", this.resetKey)
  }
  bindEvent := Func("genshin_80").Bind(this)
  resetKey := Func("genshin_77").Bind(this)
}
class PlayerX extends KeyBindingX {
  current := 0
  isMoving := false
  name := ""
  __New() {
    base.__New()
    for __index_for__, key in [1, 2, 3, 4] {
      this.bindEvent.Call("toggle", key)
    }
    this.bindEvent.Call("attack", "l-button", "prevent").bindEvent.Call("toggle-aim", "r").bindEvent.Call("use-e", "e").bindEvent.Call("use-q", "q", "prevent").bindEvent.Call("jump", "space", "prevent").bindEvent.Call("sprint", "r-button").bindEvent.Call("pick", "f").bindEvent.Call("unhold", "x").bindEvent.Call("view", "m-button").bindEvent.Call("g", "g").bindEvent.Call("p", "p").bindEvent.Call("v", "v").bindEvent.Call("y", "y").bindEvent.Call("z", "z")
    for __index_for__, key in ["esc", "b", "c", "j", "m", "f1", "f2", "f3", "f4", "f5"] {
      this.bindEvent.Call("menu-" . (key) . "", key)
    }
  }
  jump := Func("genshin_76").Bind(this)
  pick := Func("genshin_75").Bind(this)
  startMove := Func("genshin_72").Bind(this)
  stopMove := Func("genshin_71").Bind(this)
  toggleQ := Func("genshin_70").Bind(this)
  useE := Func("genshin_69").Bind(this)
  useQ := Func("genshin_67").Bind(this)
}
global player := new PlayerX()
class MovementX extends KeyBindingX {
  count := 0
  __New() {
    base.__New()
    for __index_for__, key in ["w", "a", "s", "d"] {
      $.on.Call(key, Func("genshin_66").Bind(key, this))
      $.on.Call("" . (key) . ":up", Func("genshin_65").Bind(key, this))
    }
    player.on.Call("move:start", Func("genshin_64")).on.Call("move:end", Func("genshin_63"))
  }
  check := Func("genshin_62").Bind(this)
  checkMove := Func("genshin_61").Bind(this)
}
global movement := new MovementX()
ts.jump := 0
global jumpTwice := Func("genshin_60")
player.on.Call("jump:start", player.jump).on.Call("jump:end", Func("genshin_58"))
if (Config.data.betterJump) {
  player.on.Call("unhold:end", Func("genshin_57"))
}
timer.pick := ""
global pick := Func("genshin_55")
global stopPick := Func("genshin_53")
if (Config.data.fastPickup) {
  player.on.Call("pick:start", pick).on.Call("pick:end", stopPick)
}
state.isSprinting := false
state.isSprintSwimming := false
timer.sprint := ""
ts.sprint := 0
global checkSwimming := Func("genshin_52")
global sprint := Func("genshin_51")
global startSprint := Func("genshin_49")
global stopSprint := Func("genshin_48")
player.on.Call("sprint:start", startSprint).on.Call("sprint:end", stopSprint)
if (Config.data.betterSprint) {
  player.on.Call("move:end", Func("genshin_47"))
}
state.toggleDelay := 200
global getToggleDelay := Func("genshin_46")
global startToggle := Func("genshin_45")
global stopToggle := Func("genshin_43")
player.on.Call("toggle:start", startToggle).on.Call("toggle:end", stopToggle).on.Call("toggle-q:end", player.toggleQ)
player.on.Call("use-e:start", Func("genshin_40")).on.Call("use-e:end", Func("genshin_39")).on.Call("use-q:start", player.useQ)
for __index_for__, n in [1, 2, 3, 4] {
  $.on.Call("alt + " . (key) . "", Func("genshin_38"))
}
state.isViewing := false
timer.view := ""
global toggleView := Func("genshin_37")
global view := Func("genshin_36")
if (Config.data.betterElementalVision) {
  player.on.Call("view:end", toggleView)
}
class TacticX {
  backend := {}
  count := 0
  isActive := false
  isFrozen := false
  origin := 0
  __New() {
    player.on.Call("attack:start", this.start).on.Call("attack:end", this.stop)
    member.on.Call("change", this.reset)
  }
  chargedAttack := Func("genshin_34").Bind(this)
  delay := Func("genshin_32").Bind(this)
  freeze := Func("genshin_31").Bind(this)
  jump := Func("genshin_29").Bind(this)
  normalAttack := Func("genshin_28").Bind(this)
  reset := Func("genshin_27").Bind(this)
  start := Func("genshin_26").Bind(this)
  stop := Func("genshin_25").Bind(this)
  toggle := Func("genshin_24").Bind(this)
  useBackend := Func("genshin_23").Bind(this)
  validate := Func("genshin_19").Bind(this)
  validateBackend := Func("genshin_18").Bind(this)
}
global tactic := new TacticX()
tactic.common := Func("genshin_17")
member.on.Call("change", Func("genshin_16").Bind(callback))
tactic.hu_tao := Func("genshin_13")
global taoChargedAttack := Func("genshin_12")
tactic.backend.keqing := Func("genshin_8")
tactic.klee := Func("genshin_6")
global kleeChargedAttack := Func("genshin_5")
tactic.rezor := Func("genshin_2")
tactic.zhongli := Func("genshin_1")
genshin_1() {
  if !(tactic.isActive) {
    return
  }
  if (tactic.useBackend.Call(tactic.zhongli)) {
    return
  }
  if !(tactic.isFrozen) {
    if !(skillTimer.listCountDown[__ci_genshin__.Call(player.current)]) {
      player.useE.Call("holding")
      tactic.freeze.Call(2000)
      tactic.delay.Call(100, tactic.zhongli)
      return
    }
  }
  tactic.normalAttack.Call(tactic.zhongli)
}
genshin_2() {
  if !(tactic.isActive) {
    return
  }
  if ($.now.Call() - skillTimer.listQ[__ci_genshin__.Call(player.current)] < 15000) {
    tactic.normalAttack.Call(tactic.rezor)
    return
  }
  if !(tactic.isFrozen) {
    if !(skillTimer.listCountDown[__ci_genshin__.Call(player.current)]) {
      player.useE.Call()
      tactic.freeze.Call(1000)
      tactic.delay.Call(100, tactic.rezor)
      return
    }
  }
  tactic.normalAttack.Call(tactic.rezor)
}
genshin_3() {
  if !(player.isMoving) {
    tactic.klee.Call()
    return
  }
  tactic.jump.Call(tactic.klee)
}
genshin_4() {
  tactic.delay.Call(100, Func("genshin_3"))
}
genshin_5() {
  tactic.chargedAttack.Call(Func("genshin_4"))
}
genshin_6() {
  if !(tactic.isActive) {
    return
  }
  if (tactic.count > 1) {
    tactic.count := 0
  }
  switch tactic.count {
    case 0: {
      tactic.normalAttack.Call(tactic.klee)
    }
    case 1: {
      kleeChargedAttack.Call()
    }
  }
  tactic.count++
}
genshin_7(callback) {
  $.press.Call("e")
  tactic.delay.Call(300, callback)
}
genshin_8(callback) {
  $$.vt.Call("tactic.backend.keqing", callback, "function")
  player.useE.Call()
  tactic.delay.Call(700, Func("genshin_7").Bind(callback))
}
genshin_9() {
  tactic.delay.Call(100, tactic.hu_tao)
}
genshin_10() {
  tactic.jump.Call(Func("genshin_9"))
}
genshin_11() {
  tactic.delay.Call(50, Func("genshin_10"))
}
genshin_12() {
  tactic.chargedAttack.Call(Func("genshin_11"))
}
genshin_13() {
  if !(tactic.isActive) {
    return
  }
  if (skillTimer.listDuration[__ci_genshin__.Call(player.current)]) {
    taoChargedAttack.Call()
    return
  }
  if !(tactic.isFrozen) {
    if !(skillTimer.listCountDown[__ci_genshin__.Call(player.current)]) {
      player.useE.Call()
      tactic.freeze.Call(1000)
      tactic.delay.Call(400, tactic.hu_tao)
      return
    }
  }
  tactic.normalAttack.Call(tactic.hu_tao)
}
genshin_14(name, backend, callback) {
  $$.vt.Call("tactic.backend." . (name) . "", callback, "function")
  player.useE.Call("holding")
  tactic.delay.Call(0 - backend * 1000, callback)
}
genshin_15(name, backend, callback) {
  $$.vt.Call("tactic.backend." . (name) . "", callback, "function")
  player.useE.Call()
  tactic.delay.Call(backend * 1000, callback)
}
genshin_16(callback) {
  for n, name in member.map {
    __object__ := Character.data[__ci_genshin__.Call(name)]
    backend := __object__["backend"]
    if !(backend) {
      continue
    }
    if (backend > 0) {
      tactic.backend[__ci_genshin__.Call(name)] := Func("genshin_15").Bind(name, backend)
      continue
    }
    tactic.backend[__ci_genshin__.Call(name)] := Func("genshin_14").Bind(name, backend)
  }
}
genshin_17() {
  if !(tactic.isActive) {
    return
  }
  if (tactic.useBackend.Call(tactic.common)) {
    return
  }
  if !(tactic.isFrozen) {
    if !(skillTimer.listCountDown[__ci_genshin__.Call(player.current)]) {
      player.useE.Call()
      tactic.freeze.Call(1000)
      tactic.delay.Call(100, tactic.common)
      return
    }
  }
  tactic.normalAttack.Call(tactic.common)
}
genshin_18(this) {
  if (this.isFrozen) {
    return false
  }
  now := $.now.Call()
  if !(now - ts.sprint >= 500) {
    return false
  }
  if !(now - ts.jump >= 500) {
    return false
  }
  if !(this.origin) {
    if !(Character.data[__ci_genshin__.Call(player.name)].typeCbt >= 2) {
      return false
    }
  }
  return true
}
genshin_19(this) {
  if (menu.isVisible) {
    return false
  }
  name := player.name
  if !(name) {
    return false
  }
  __object__ := Character.data[__ci_genshin__.Call(name)]
  typeCbt := __object__["typeCbt"]
  if !(typeCbt) {
    return false
  }
  if (this[__ci_genshin__.Call(name)]) {
    return this[__ci_genshin__.Call(name)]
  }
  return this.common
}
genshin_20(callback, this) {
  callback.Call()
  this.freeze.Call(1000)
  this.origin := 0
}
genshin_21(callback, this) {
  callback.Call()
  this.freeze.Call(1000)
}
genshin_22(name, callback, this) {
  this.backend[__ci_genshin__.Call(name)].Call(Func("genshin_21").Bind(callback, this))
}
genshin_23(this, callback) {
  $$.vt.Call("tactic.useBackend", callback, "function")
  if !(this.validateBackend.Call()) {
    return false
  }
  for __index_for__, n in [4, 3, 2, 1] {
    if (n == player.current) {
      continue
    }
    if (skillTimer.listCountDown[__ci_genshin__.Call(n)]) {
      continue
    }
    name := member.map[__ci_genshin__.Call(n)]
    if !(this.backend[__ci_genshin__.Call(name)]) {
      continue
    }
    if !(this.origin) {
      this.origin := player.current
    }
    this.freeze.Call(10000)
    this.toggle.Call(n, Func("genshin_22").Bind(name, callback, this))
    return true
  }
  if (this.origin && this.origin != player.current) {
    this.freeze.Call(10000)
    this.toggle.Call(this.origin, Func("genshin_20").Bind(callback, this))
    return true
  }
  return false
}
genshin_24(this, n, callback) {
  $$.vt.Call("tactic.toggle", n, "number")
  $$.vt.Call("tactic.toggle", callback, "function")
  if !(this.isActive) {
    return
  }
  $.press.Call(n)
  member.toggle.Call(n)
  this.delay.Call(200, callback)
}
genshin_25(this) {
  if (this.isActive) {
    this.reset.Call()
    return
  }
  $.click.Call("left:up")
}
genshin_26(this) {
  if (this.isActive) {
    return
  }
  callback := this.validate.Call()
  if !(callback) {
    $.click.Call("left:down")
    return
  }
  this.isActive := true
  wait := 1000 - ($.now.Call() - ts.toggle)
  if (wait < 200) {
    wait := 200
  }
  this.freeze.Call(wait)
  callback.Call()
}
genshin_27(this) {
  this.count := 0
  this.isActive := false
  this.isFrozen := false
  this.origin := 0
}
genshin_28(this, callback) {
  $$.vt.Call("tactic.normalAttack", callback, "function")
  $.click.Call("left")
  this.delay.Call(200, callback)
}
genshin_29(this, callback) {
  $$.vt.Call("tactic.jump", callback, "function")
  player.jump.Call()
  if !(player.isMoving) {
    this.delay.Call(450, callback)
  } else {
    this.delay.Call(550, callback)
  }
}
genshin_30(this) {
  this.isFrozen := false
}
genshin_31(this, wait) {
  $$.vt.Call("tactic.freeze", wait, "number")
  this.isFrozen := true
  $.clearTimeout.Call(timer.tacticFreeze)
  timer.tacticFreeze := $.setTimeout.Call(Func("genshin_30").Bind(this), wait)
}
genshin_32(this, time, callback) {
  $$.vt.Call("tactic.delay", time, "number")
  $$.vt.Call("tactic.delay", callback, "function")
  if !(this.isActive) {
    return
  }
  $.clearTimeout.Call(timer.tacticDelay)
  timer.tacticDelay := $.setTimeout.Call(callback, time)
}
genshin_33(callback) {
  $.click.Call("left:up")
  callback.Call()
}
genshin_34(this, callback) {
  $$.vt.Call("tactic.chargedAttack", callback, "function")
  $.click.Call("left:down")
  this.delay.Call(400, Func("genshin_33").Bind(callback))
}
genshin_35() {
  $.click.Call("middle:up")
}
genshin_36() {
  $.click.Call("middle:down")
  $.setTimeout.Call(Func("genshin_35"), 2500)
}
genshin_37() {
  $.clearInterval.Call(timer.view)
  state.isViewing := !state.isViewing
  if !(state.isViewing) {
    return
  }
  timer.view := $.setInterval.Call(view, 3000)
  view.Call()
}
genshin_38() {
  player.useQ.Call()
}
genshin_39() {
  skillTimer.record.Call("end")
}
genshin_40() {
  skillTimer.record.Call("start")
}
genshin_41() {
  $.press.Call("e:up")
  skillTimer.record.Call("end")
}
genshin_42() {
  player.useE.Call("holding")
}
genshin_43() {
  if (menu.isVisible) {
    return
  }
  __object__ := player
  name := __object__["name"]
  if !(name) {
    return
  }
  __object__ := Character.data[__ci_genshin__.Call(name)]
  typeApr := __object__["typeApr"]
  if !(typeApr) {
    return
  }
  if (typeApr == 2) {
    $.setTimeout.Call(Func("genshin_42"), state.toggleDelay)
    return
  }
  $.setTimeout.Call(Func("genshin_41"), state.toggleDelay)
}
genshin_44() {
  $.press.Call("e:down")
  skillTimer.record.Call("start")
}
genshin_45(key) {
  $$.vt.Call("startToggle", key, "number")
  if (menu.isVisible) {
    return
  }
  member.toggle.Call(key)
  __object__ := player
  name := __object__["name"]
  if !(name) {
    return
  }
  state.toggleDelay := getToggleDelay.Call()
  __object__ := Character.data[__ci_genshin__.Call(name)]
  typeApr := __object__["typeApr"]
  if !(typeApr) {
    return
  }
  if !(typeApr == 1) {
    return
  }
  $.setTimeout.Call(Func("genshin_44"), state.toggleDelay)
}
genshin_46() {
  delay := 500 - ($.now.Call() - ts.sprint)
  if (delay < 150) {
    delay := 150
  }
  return delay
}
genshin_47() {
  if !(state.isSprinting) {
    return
  }
  if (player.isMoving) {
    return
  }
  player.startMove.Call("w")
}
genshin_48() {
  ts.sprint := $.now.Call()
  if !(Config.data.betterSprint) {
    return
  }
  state.isSprinting := false
  state.isSprintSwimming := false
  $.clearTimeout.Call(timer.sprint)
  player.stopMove.Call("w")
}
genshin_49() {
  if !(Config.data.betterSprint) {
    return
  }
  state.isSprinting := true
  sprint.Call()
}
genshin_50() {
  if (state.isSprintSwimming) {
    state.isSprintSwimming := false
    $.click.Call("right:down")
  }
  sprint.Call()
}
genshin_51() {
  if !(player.isMoving) {
    player.startMove.Call("w")
  }
  if !(checkSwimming.Call()) {
    state.isSprintSwimming := true
    $.click.Call("right:up")
  }
  $.clearTimeout.Call(timer.sprint)
  timer.sprint := $.setTimeout.Call(Func("genshin_50"), 1300)
}
genshin_52() {
  if (player.name == "mona") {
    return true
  }
  start := client.point.Call([90, 90])
  end := [client.width, client.height]
  point := $.findColor.Call(0xFFE92C, start, end)
  return point[1] * point[2] > 0
}
genshin_53() {
  $.clearTimeout.Call(timer.pick)
}
genshin_54() {
  player.pick.Call()
  pick.Call()
}
genshin_55() {
  $.clearTimeout.Call(timer.pick)
  timer.pick := $.setTimeout.Call(Func("genshin_54"), 150)
}
genshin_56() {
  player.jump.Call()
}
genshin_57() {
  $.setTimeout.Call(Func("genshin_56"), 50)
}
genshin_58() {
  ts.jump := $.now.Call()
  if (Config.data.betterJump) {
    jumpTwice.Call()
  }
}
genshin_59() {
  if !(player.isMoving) {
    return
  }
  player.jump.Call()
}
genshin_60() {
  $.setTimeout.Call(Func("genshin_59"), 200)
}
genshin_61(this) {
  count := 0
  for __index_for__, key in ["w", "a", "s", "d"] {
    if ($.getState.Call(key)) {
      count := count + 1
      if (this.isPressed[__ci_genshin__.Call(key)]) {
        continue
      }
      this.isPressed[__ci_genshin__.Call(key)] := true
      recorder.record.Call("" . (key) . ":down")
      $.press.Call("" . (key) . ":down")
    } else {
      if !(this.isPressed[__ci_genshin__.Call(key)]) {
        continue
      }
      this.isPressed[__ci_genshin__.Call(key)] := false
      recorder.record.Call("" . (key) . ":up")
      $.press.Call("" . (key) . ":up")
    }
  }
  return count
}
genshin_62(this, key, action) {
  $$.vt.Call("movement.check", key, "string")
  $$.vt.Call("movement.check", action, "string")
  if (action == "down" && this.isPressed[__ci_genshin__.Call(key)]) {
    return
  } else if (action == "up" && !this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  count := this.checkMove.Call()
  if (count && !this.count) {
    player.emit.Call("move:start")
  } else if (!count && this.count) {
    player.emit.Call("move:end")
  }
  this.count := count
}
genshin_63() {
  if !(player.isMoving) {
    return
  }
  player.isMoving := false
}
genshin_64() {
  if (player.isMoving) {
    return
  }
  player.isMoving := true
}
genshin_65(key, this) {
  this.check.Call(key, "up")
}
genshin_66(key, this) {
  this.check.Call(key, "down")
}
genshin_67(this) {
  skillTimer.listQ[__ci_genshin__.Call(player.current)] := $.now.Call()
  $.press.Call("q")
  return this
}
genshin_68() {
  $.press.Call("e:up")
  skillTimer.record.Call("end")
}
genshin_69(this, isHolding := false) {
  if !(isHolding) {
    $.press.Call("e")
    skillTimer.record.Call("start")
    skillTimer.record.Call("end")
    return this
  }
  $.press.Call("e:down")
  skillTimer.record.Call("start")
  $.setTimeout.Call(Func("genshin_68"), 1000)
  return this
}
genshin_70(this, key) {
  $$.vt.Call("player.toggleQ", key, "number")
  $.press.Call("alt + " . (key) . "")
  member.toggle.Call(key)
  return this
}
genshin_71(this, key) {
  $$.vt.Call("player.stopMove", key, "string")
  if (movement.isPressed[__ci_genshin__.Call(key)]) {
    return this
  }
  $.press.Call("" . (key) . ":up")
  return this
}
genshin_72(this, key) {
  $$.vt.Call("player.startMove", key, "string")
  if (movement.isPressed[__ci_genshin__.Call(key)]) {
    return this
  }
  $.press.Call("" . (key) . ":down")
  return this
}
genshin_73() {
  $.click.Call("wheel-down")
}
genshin_74() {
  $.press.Call("f:down")
  $.setTimeout.Call(Func("genshin_73"), 50)
}
genshin_75(this) {
  $.press.Call("f:up")
  $.setTimeout.Call(Func("genshin_74"), 50)
  $.click.Call("wheel-down")
}
genshin_76(this) {
  $.press.Call("space")
}
genshin_77(this) {
  for key, value in this.isPressed {
    if (this.isPrevented[__ci_genshin__.Call(key)]) {
      continue
    }
    if !(value) {
      continue
    }
    if ($.getState.Call(key)) {
      continue
    }
    $.press.Call("" . (key) . ":up")
  }
  return this
}
genshin_78(key, name, this) {
  if !(this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  this.isPressed[__ci_genshin__.Call(key)] := false
  recorder.record.Call("" . (key) . ":up")
  if !(this.isPrevented[__ci_genshin__.Call(key)]) {
    $.press.Call("" . (key) . ":up")
  }
  this.emit.Call("" . (name) . ":end", key)
  $$.log.Call("" . (name) . ":end")
}
genshin_79(key, name, this) {
  if (this.isPressed[__ci_genshin__.Call(key)]) {
    return
  }
  this.isPressed[__ci_genshin__.Call(key)] := true
  recorder.record.Call("" . (key) . ":down")
  if !(this.isPrevented[__ci_genshin__.Call(key)]) {
    $.press.Call("" . (key) . ":down")
  }
  this.emit.Call("" . (name) . ":start", key)
  $$.log.Call("" . (name) . ":start")
}
genshin_80(this, name, key, prevent := false) {
  $$.vt.Call("keyBinding.bindEvent", name, "string")
  $$.vt.Call("keyBinding.bindEvent", "number", "string")
  if (prevent) {
    this.isPrevented[__ci_genshin__.Call(key)] := true
  }
  $.on.Call(key, Func("genshin_79").Bind(key, name, this))
  $.on.Call("" . (key) . ":up", Func("genshin_78").Bind(key, name, this))
  return this
}
genshin_81(this) {
  if !(this.isActive) {
    return
  }
  this.isActive := false
  this.log.Call("end recording")
  $.beep.Call()
}
genshin_82(this) {
  if (this.isActive) {
    return
  }
  this.isActive := true
  this.list := []
  this.ts := $.now.Call()
  this.log.Call("start recording")
  $.beep.Call()
}
genshin_83(this) {
  if !($.length.Call(this.list)) {
    return
  }
  result := ""
  for __index_for__, item in this.list {
    result := "" . (result) . "" . (item.delay) . "|" . (item.key) . "`n"
  }
  this.file.save.Call(result)
}
genshin_84(list, this) {
  this.log.Call("start playing")
  $.beep.Call()
  this.next.Call(list)
}
genshin_85(this) {
  list := []
  this.current := 0
  for __index_for__, item in $.split.Call(this.file.load.Call(), "`n") {
    if !(item) {
      continue
    }
    __array__ := $.split.Call(item, "|")
    delay := __array__[1]
    key := __array__[2]
    $.push.Call(list, [delay, key])
  }
  $.setTimeout.Call(Func("genshin_84").Bind(list, this), 500)
}
genshin_86(this, key) {
  $$.vt.Call("record.record", key, "string")
  if !(this.isActive) {
    return
  }
  if ($.includes.Call(this.listIgnore, key)) {
    return
  }
  this.log.Call(key)
  now := $.now.Call()
  delay := now - this.ts
  this.ts := now
  $.push.Call(this.list, {delay: delay, key: key})
}
genshin_87(key, list, this) {
  $.trigger.Call(key)
  this.current++
  this.next.Call(list)
}
genshin_88(this, list) {
  $$.vt.Call("record.next", list, "array")
  n := this.current
  if (n >= $.length.Call(list)) {
    this.log.Call("end playing")
    $.beep.Call()
    return
  }
  __array__ := list[__ci_genshin__.Call(n)]
  delay := __array__[1]
  key := __array__[2]
  $.setTimeout.Call(Func("genshin_87").Bind(key, list, this), delay)
}
genshin_89(this, message) {
  $$.vt.Call("record.log", message, "string")
  hud.render.Call(5, message)
}
genshin_90(this, key) {
  $$.vt.Call("record.ignore", key, "string")
  if !(key) {
    this.listIgnore := []
    return
  }
  if ($.includes.Call(this.listIgnore, key)) {
    return
  }
  $.push.Call(this.listIgnore, key)
}
genshin_91(this) {
  if !(this.isActive) {
    this.ignore.Call("f10")
    this.start.Call()
  } else {
    this.stop.Call()
    this.save.Call()
  }
}
genshin_92(tick) {
  if !($.mod.Call(tick, 200)) {
    skillTimer.check.Call()
  }
}
genshin_93(this) {
  for __index_for__, n in [1, 2, 3, 4] {
    this.listCountDown[__ci_genshin__.Call(n)] := 0
    this.listDuration[__ci_genshin__.Call(n)] := 0
    this.listQ[__ci_genshin__.Call(n)] := 0
    this.listRecord[__ci_genshin__.Call(n)] := 0
  }
}
genshin_94(this, n, message) {
  $$.vt.Call("skillTimer.render", n, "number")
  $$.vt.Call("skillTimer.render", message, "string")
  if !(Config.data.easySkillTimer) {
    return
  }
  hud.render.Call(n, message)
}
genshin_95(this, now) {
  $$.vt.Call("skillTimer.recordStart", now, "number")
  __object__ := player
  current := __object__["current"]
  name := __object__["name"]
  __object__ := Character.data[__ci_genshin__.Call(name)]
  cd := __object__["cd"]
  if (this.listRecord[__ci_genshin__.Call(current)]) {
    return
  }
  this.listRecord[__ci_genshin__.Call(current)] := now
}
genshin_96(this, now) {
  $$.vt.Call("skillTimer.recordEnd", now, "number")
  __object__ := player
  current := __object__["current"]
  name := __object__["name"]
  __object__ := Character.data[__ci_genshin__.Call(name)]
  cd := __object__["cd"]
  duration := __object__["duration"]
  typeE := __object__["typeE"]
  if !(this.listRecord[__ci_genshin__.Call(current)]) {
    return
  }
  if (now - this.listRecord[__ci_genshin__.Call(current)] < 500) {
    this.listCountDown[__ci_genshin__.Call(current)] := this.listRecord[__ci_genshin__.Call(current)] + (cd[1] * 1000) + 500
    if (duration[1]) {
      this.listDuration[__ci_genshin__.Call(current)] := this.listRecord[__ci_genshin__.Call(current)] + (duration[1] * 1000)
    }
    this.listRecord[__ci_genshin__.Call(current)] := 0
    return
  }
  if (typeE == 1) {
    this.listCountDown[__ci_genshin__.Call(current)] := now + (cd[2] * 1000) + 500
    if (duration[2]) {
      this.listDuration[__ci_genshin__.Call(current)] := now + (duration[2] * 1000)
    }
  } else {
    this.listCountDown[__ci_genshin__.Call(current)] := this.listRecord[__ci_genshin__.Call(current)] + (cd[2] * 1000) + 500
    if (duration[2]) {
      this.listDuration[__ci_genshin__.Call(current)] := this.listRecord[__ci_genshin__.Call(current)] + (duration[2] * 1000)
    }
  }
  this.listRecord[__ci_genshin__.Call(current)] := 0
}
genshin_97(this, step) {
  $$.vt.Call("skillTimer.record", step, "string")
  __object__ := player
  current := __object__["current"]
  name := __object__["name"]
  if !(name) {
    return
  }
  now := $.now.Call()
  countdown := this.listCountDown[__ci_genshin__.Call(current)]
  if (countdown && countdown - now > 1000) {
    return
  }
  if (step == "end") {
    this.recordEnd.Call(now)
    return
  }
  if (step == "start") {
    this.recordStart.Call(now)
    return
  }
}
genshin_98(this, n) {
  $$.vt.Call("skillTimer.hide", n, "number")
  if !(Config.data.easySkillTimer) {
    return
  }
  hud.render.Call(n, "")
}
genshin_99(this) {
  if (client.isSuspend) {
    return
  }
  now := $.now.Call()
  for __index_for__, n in [1, 2, 3, 4] {
    if !(this.listCountDown[__ci_genshin__.Call(n)] || this.listDuration[__ci_genshin__.Call(n)]) {
      continue
    }
    if (now >= this.listCountDown[__ci_genshin__.Call(n)]) {
      this.listCountDown[__ci_genshin__.Call(n)] := 0
    }
    if (now >= this.listDuration[__ci_genshin__.Call(n)]) {
      this.listDuration[__ci_genshin__.Call(n)] := 0
    }
    listMessage := []
    if (this.listCountDown[__ci_genshin__.Call(n)]) {
      diff := $.floor.Call((now - this.listCountDown[__ci_genshin__.Call(n)]) * 0.001)
      $.push.Call(listMessage, "" . (diff) . "s")
    }
    if (this.listDuration[__ci_genshin__.Call(n)]) {
      diff := $.abs.Call($.floor.Call((now - this.listDuration[__ci_genshin__.Call(n)]) * 0.001))
      $.push.Call(listMessage, "[" . (diff) . "s]")
    }
    if !($.length.Call(listMessage)) {
      this.hide.Call(n)
      return
    }
    this.render.Call(n, $.join.Call(listMessage, " "))
  }
}
genshin_100(this, name) {
  $$.vt.Call("client.toggleBy", name, "string")
  this.toggle.Call(this.getIndexBy.Call(name))
}
genshin_101(this, n) {
  $$.vt.Call("member.toggle", n, "number")
  if !(n) {
    return
  }
  player.current := n
  player.name := this.map[__ci_genshin__.Call(n)]
  ts.toggle := $.now.Call()
}
genshin_102(this) {
  for __index_for__, n in [1, 2, 3, 4] {
    name := this.checkCharacterByPosition.Call(n)
    this.map[__ci_genshin__.Call(n)] := name
    hud.render.Call(n, name)
  }
  this.emit.Call("change")
}
genshin_103(this, name) {
  $$.vt.Call("client.has", name, "string")
  return $.includes.Call(($.values.Call(this.map)), name)
}
genshin_104(this, n) {
  $$.vt.Call("member.getRange", n, "number")
  start := client.point.Call([90, 9 * (n + 1)])
  end := client.point.Call([96, 9 * (n + 2)])
  return [start, end]
}
genshin_105(this, name) {
  $$.vt.Call("member.getIndexBy", name, "string")
  if !(this.has.Call(name)) {
    return 0
  }
  for __index_for__, n in [1, 2, 3, 4] {
    if (this.map[__ci_genshin__.Call(n)] == name) {
      return n
    }
  }
}
genshin_106(this, n) {
  $$.vt.Call("member.checkCharacterByPosition", n, "number")
  __array__ := this.getRange.Call(n)
  pointStart := __array__[1]
  pointEnd := __array__[2]
  for name, char in Character.data {
    if !(char.color) {
      continue
    }
    point := $.findColor.Call(char.color, pointStart, pointEnd)
    if !(point[1] * point[2] > 0) {
      continue
    }
    return name
  }
  return ""
}
genshin_107(this) {
  $.press.Call("1")
  this.toggle.Call(1)
}
genshin_108(this) {
  start := client.point.Call([95, 5])
  end := [client.vw.Call(96), start[2] + 1]
  __array__ := $.findColor.Call(0xFFFFFF, start, end)
  x := __array__[1]
  y := __array__[2]
  this.isVisible := !(x * y > 0)
}
genshin_109(this, tick) {
  if (client.isSuspend) {
    return
  }
  if ($.mod.Call(tick, 1000)) {
    return
  }
  this.checkVisibility.Call()
}
genshin_110(message) {
  if !($$.isDebug) {
    return
  }
  $$.vt.Call("$$.log", message, "string")
  hud.render.Call(5, message)
  return message
}
genshin_111(this) {
  for __key_for__, timer in this.listTimer {
    $.clearTimeout.Call(timer)
  }
  this.listTimer := {}
  this.hide.Call()
}
genshin_112(n, this) {
  this.render.Call(n, "")
}
genshin_113(this, n, msg) {
  $$.vt.Call("hud.render", n, "number")
  $$.vt.Call("hud.render", msg, "string")
  $.clearTimeout.Call(this.listTimer[__ci_genshin__.Call(n)])
  this.listTimer[__ci_genshin__.Call(n)] := $.setTimeout.Call(Func("genshin_112").Bind(n, this), this.lifetime)
  __array__ := this.getPosition.Call(n)
  x := __array__[1]
  y := __array__[2]
  id := n + 1
  ToolTip, % msg, % x, % y, % id
}
genshin_114(this) {
  for __index_for__, n in [1, 2, 3, 4, 5] {
    this.render.Call(n, "")
  }
}
genshin_115(this, n) {
  $$.vt.Call("hud.getPosition", n, "number")
  if (client.isFullScreen) {
    left := client.vw.Call(80)
  } else {
    left := client.width
  }
  return [left, client.vh.Call(4 + 9 * (n + 1))]
}
genshin_116(this) {
  color := $.getColor.Call()
  __array__ := $.getPosition.Call()
  x := __array__[1]
  y := __array__[2]
  x1 := $.round.Call((x * 100) / client.width)
  y1 := $.round.Call((y * 100) / client.height)
  this.render.Call(5, "" . (x1) . ", " . (y1) . " / " . (color) . "")
  ClipBoard := color
}
genshin_117() {
  $.beep.Call()
  hud.getColor.Call()
}
genshin_118(tick) {
  if !($.mod.Call(tick, 200)) {
    client.check.Call()
  }
}
genshin_119(this, n) {
  $$.vt.Call("client.vw", n, "number")
  return $.round.Call(this.width * n * 0.01)
}
genshin_120(this, n) {
  $$.vt.Call("client.vh", n, "number")
  return $.round.Call(this.height * n * 0.01)
}
genshin_121(this, level) {
  $$.vt.Call("client.setPriority", level, "string")
  Process, Priority, % Config.data.process, % level
}
genshin_122(this, isSuspend) {
  if (isSuspend) {
    if (this.isSuspend) {
      return
    }
    this.isSuspend := true
    $.suspend.Call(true)
    this.resetTimer.Call()
    return
  }
  if !(isSuspend) {
    if !(this.isSuspend) {
      return
    }
    this.isSuspend := false
    $.suspend.Call(false)
    return
  }
}
genshin_123(this) {
  name := "ahk_exe " . (Config.data.process) . ""
  WinGetPos, __x__, __y__, __width__, __height__, % name
  this.width := __width__
  if !(this.width) {
    this.width := 0
  }
  this.height := __height__
  if !(this.height) {
    this.height := 0
  }
  if !(this.width + 100 < A_ScreenWidth) {
    this.isFullScreen := true
  }
}
genshin_124(this) {
  for __key_for__, _timer in timer {
    $.clearTimeout.Call(_timer)
  }
}
genshin_125(this) {
  this.setPriority.Call("normal")
  this.resetTimer.Call()
}
genshin_126(this, input) {
  $$.vt.Call("client.point", input, "array")
  return [this.vw.Call(input[1]), this.vh.Call(input[2])]
}
genshin_127(this) {
  return WinActive("ahk_exe " . (Config.data.process) . "")
}
genshin_128(this) {
  if (!this.isSuspend && !this.checkActive.Call()) {
    this.setPriority.Call("low")
    this.suspend.Call(true)
    this.emit.Call("leave")
    return
  }
  if (this.isSuspend && this.checkActive.Call()) {
    this.setPriority.Call("normal")
    this.suspend.Call(false)
    this.emit.Call("enter")
    return
  }
}
genshin_129(this) {
  $.press.Call("alt + enter")
  $.setTimeout.Call(this.setSize, 1000)
}
genshin_130(this) {
  $.beep.Call()
  this.reset.Call()
  $.reload.Call()
}
genshin_131(this) {
  $.beep.Call()
  this.reset.Call()
  $.exit.Call()
}
genshin_132(this) {
  $.setTimeout.Call(this.setSize, 1000)
}
genshin_133(this, key, defaultValue := "") {
  $$.vt.Call("config.read", key, "string")
  __array__ := $.split.Call(key, "/")
  __section__ := __array__[1]
  __key__ := __array__[2]
  IniRead, __result__, % this.source, % __section__, % __key__, % defaultValue
  return __result__
}
genshin_134(this) {
  this.tick := this.tick + this.interval
  this.emit.Call("change", this.tick)
  if (this.tick >= this.max) {
    this.tick := 0
  }
}
genshin_135(name, target, type*) {
  if !($$.isDebug) {
    return
  }
  _type := $.type.Call(target)
  if !($.includes.Call(type, _type)) {
    throw Exception("" . (name) . ": invalid type '" . (_type) . "', should be '" . ($.toString.Call(type)) . "'")
  }
}
genshin_136(input) {
  if input is Number
    return input + 1
  return input
}
