; Generated by Coffee-AHK/0.0.41
global __ci_genshin__ := Func("genshin_43")
if (A_IsAdmin != true) {
  Run *RunAs "%A_ScriptFullPath%"
  ExitApp
}
#HotkeyInterval, 1000
#KeyHistory, 0
#MaxHotkeysPerInterval, 200
#MaxThreads, 20
#NoEnv
#Persistent
#SingleInstance, Force
#UseHook, On

CoordMode, Mouse, Client
CoordMode, Pixel, Client
CoordMode, ToolTip, Client
SendMode, Event
SetBatchLines, -1
SetKeyDelay, 0, 50
SetMouseDelay, 0, 50
StringCaseSense, On
; Generated by Coffee-AHK/0.0.41
global __ci_shell__ := Func("shell_129")
global $ := {}
$.abs := Func("shell_128")
$.activate := Func("shell_127")
$.add := Func("shell_126")
$.alert := Func("shell_125")
$.beep := Func("shell_123")
$.bind := Func("shell_122")
$.blockInput := Func("shell_121")
$.ceil := Func("shell_120")
$.chunk := Func("shell_119")
$.clearInterval := Func("shell_118")
$.clearTimeout := Func("shell_117")
$.click := Func("shell_116")
$.clone := Func("shell_115")
$.close := Func("shell_114")
$.compact := Func("shell_113")
$.concat := Func("shell_111")
$.confirm := Func("shell_110")
global __iDebounce__ := 0
global __tDebounce__ := {}
$.debounce := Func("shell_109")
$.defer := Func("shell_107")
$.delay := Func("shell_105")
$.drop := Func("shell_103")
$.each := Func("shell_101")
class EmitterShellX {
  bus := []
  emit := Func("shell_100").Bind(this)
  off := Func("shell_99").Bind(this)
  on := Func("shell_98").Bind(this)
}
$.emitter := Func("shell_97")
global __eq__ := Func("shell_96")
$.eq := __eq__
$.exit := Func("shell_95")
class FileShellX {
  name := ""
  __New(name) {
    this.name := name
  }
  append := Func("shell_94").Bind(this)
  exist := Func("shell_93").Bind(this)
  delete := Func("shell_92").Bind(this)
  load := Func("shell_91").Bind(this)
  save := Func("shell_90").Bind(this)
}
$.file := Func("shell_89")
$.filter := Func("shell_88")
$.findColor := Func("shell_87")
$.findImage := Func("shell_86")
$.first := Func("shell_85")
$.head := $.first
$.floor := Func("shell_84")
$.formatHotkey := Func("shell_83")
global __formatKeyFormatHotkey__ := Func("shell_82")
global __pickPrefixFormatHotkey__ := Func("shell_81")
$.get := Func("shell_80")
$.getColor := Func("shell_79")
$.getPosition := Func("shell_78")
$.getState := Func("shell_77")
$.gt := Func("shell_76")
$.gte := Func("shell_75")
$.i := Func("shell_74")
$.includes := Func("shell_73")
$.info := Func("shell_72")
$.isActive := Func("shell_71")
$.isArray := Func("shell_70")
$.isExisted := Func("shell_69")
$.isFunction := Func("shell_68")
$.isNumber := Func("shell_67")
$.isObject := Func("shell_66")
$.isString := Func("shell_65")
$.join := Func("shell_64")
class KeyBindingShellX {
  mapBound := {}
  mapCallback := {}
  add := Func("shell_63").Bind(this)
  fire := Func("shell_62").Bind(this)
  init := Func("shell_61").Bind(this)
  off := Func("shell_59").Bind(this)
  on := Func("shell_58").Bind(this)
  remove := Func("shell_57").Bind(this)
}
global keyBindingShell := new KeyBindingShellX()
$.off := keyBindingShell.remove
$.on := keyBindingShell.add
$.trigger := keyBindingShell.fire
$.keys := Func("shell_55")
$.last := Func("shell_54")
$.length := Func("shell_53")
$.lt := Func("shell_52")
$.lte := Func("shell_51")
$.map := Func("shell_50")
$.maximize := Func("shell_49")
$.minimize := Func("shell_48")
$.mixin := Func("shell_47")
$.mod := Func("shell_46")
$.move := Func("shell_45")
$.noop := Func("shell_44")
$.now := Func("shell_43")
$.nth := Func("shell_42")
global __cacheOnce__ := {}
global __indexOnce__ := 0
$.once := Func("shell_41")
$.open := Func("shell_39")
$.play := Func("shell_38")
$.press := Func("shell_37")
global __formatInputPress__ := Func("shell_36")
global __validateInputPress__ := Func("shell_35")
$.push := Func("shell_34")
$.random := Func("shell_33")
$.range := Func("shell_32")
$.reload := Func("shell_31")
$.replace := Func("shell_30")
$.reverse := Func("shell_29")
$.round := Func("shell_28")
$.setFixed := Func("shell_27")
$.setInterval := Func("shell_26")
$.setStyle := Func("shell_25")
$.setTimeout := Func("shell_24")
$.shuffle := Func("shell_23").Bind(__split__)
$.sleep := Func("shell_22")
$.slice := Func("shell_21")
global __pickArgumentSlice__ := Func("shell_20")
$.sort := Func("shell_19")
$.split := Func("shell_18")
$.sum := Func("shell_17")
$.suspend := Func("shell_16")
$.tail := Func("shell_15")
$.take := Func("shell_14")
global __iThrottle__ := 0
global __tThrottle__ := {}
global __tsThrottle__ := {}
$.throttle := Func("shell_13")
$.toLowerCase := Func("shell_10")
$.toLower := $.toLowerCase
$.toString := Func("shell_9")
$.toUpperCase := Func("shell_8")
$.toUpper := $.toUpperCase
$.trim := Func("shell_7")
$.trimEnd := Func("shell_6")
$.trimStart := Func("shell_5")
$.type := Func("shell_4")
$.uniq := Func("shell_3")
$.values := Func("shell_2")
$.VERSION := "0.0.15"
$.wait := Func("shell_1")
shell_1(target, callback) {
  if !(target) {
    throw Exception("$.wait: target is required")
  }
  if !(callback) {
    throw Exception("$.wait: callback is required")
  }
  __target__ := "ahk_exe " . (target) . ""
  WinWait, % __target__
  if !(($.type.Call(callback)) == "function") {
    return
  }
  callback.Call()
}
shell_2(input) {
  __listResult__ := []
  for __index_for__, __key__ in $.keys.Call(input) {
    $.push.Call(__listResult__, input[__ci_shell__.Call(__key__)])
  }
  return __listResult__
}
shell_3(list) {
  __hasString__ := false
  for __index_for__, __item__ in list {
    if (($.type.Call(__item__)) == "string") {
      __hasString__ := true
      break
    }
  }
  __string__ := $.join.Call(list, ",")
  if (__hasString__) {
    Sort, __string__, C U D,
  } else {
    Sort, __string__, N U D,
  }
  return $.split.Call(__string__, ",")
}
shell_4(input) {
  if input is Number
    return "number"
  if (IsFunc(input)) {
    return "function"
  }
  if (IsObject(input)) {
    if (input.Count() == input.Length()) {
      if !(input.Length() >= 0) {
        return "function"
      }
      return "array"
    }
    return "object"
  }
  return "string"
}
shell_5(input, omitting := " `t") {
  return LTrim(input, omitting)
}
shell_6(input, omitting := " `t") {
  return RTrim(input, omitting)
}
shell_7(input, omitting := " `t") {
  return Trim(input, omitting)
}
shell_8(input) {
  StringUpper, __result__, input
  return __result__
}
shell_9(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    __result__ := ""
    for __index_for__, key in input {
      __result__ := "" . (__result__) . ", " . ($.toString.Call(key)) . ""
    }
    return "[" . ($.trim.Call(__result__, " ,")) . "]"
  } else if (__type__ == "object") {
    __result__ := ""
    for key, value in input {
      __result__ := "" . (__result__) . ", " . (key) . ": " . ($.toString.Call(value)) . ""
    }
    return "{" . ($.trim.Call(__result__, " ,")) . "}"
  }
  return input
}
shell_10(input) {
  StringLower, __result__, input
  return __result__
}
shell_11(callback, index) {
  callback.Call()
  __tsThrottle__[__ci_shell__.Call(index)] := $.now.Call()
}
shell_12(callback, time, index) {
  $.clearTimeout.Call(__tThrottle__[__ci_shell__.Call(index)])
  __tThrottle__[__ci_shell__.Call(index)] := $.setTimeout.Call(Func("shell_11").Bind(callback, index), __tsThrottle__[__ci_shell__.Call(index)] - $.now.Call() + time)
}
shell_13(time, callback) {
  __iThrottle__++
  __tsThrottle__[__ci_shell__.Call(__iThrottle__)] := 0
  return Func("shell_12").Bind(callback, time, __iThrottle__)
}
shell_14(list, count := 1) {
  __len__ := $.length.Call(list)
  if !(__len__) {
    return []
  }
  if !(count >= 0) {
    return []
  }
  if (count >= __len__) {
    count := __len__
  }
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if (__i__ >= count) {
      break
    }
    $.push.Call(__listNew__, __item__)
  }
  return __listNew__
}
shell_15(list) {
  return $.drop.Call(list, 1)
}
shell_16(isSuspended := "Toggle") {
  if (isSuspended != "Toggle") {
    if (isSuspended) {
      isSuspended := "On"
    } else {
      isSuspended := "Off"
    }
  }
  Suspend, % isSuspended
}
shell_17(list) {
  __result__ := 0
  for __index_for__, __n__ in list {
    __result__ := __result__ + __n__
  }
  return __result__
}
shell_18(input, delimiter) {
  return StrSplit(input, delimiter)
}
shell_19(list) {
  __hasString__ := false
  for __index_for__, __item__ in list {
    if (($.type.Call(__item__)) == "string") {
      __hasString__ := true
      break
    }
  }
  __string__ := $.join.Call(list, ",")
  if (__hasString__) {
    Sort, __string__, C D,
  } else {
    Sort, __string__, N D,
  }
  return $.split.Call(__string__, ",")
}
shell_20(args) {
  switch $.length.Call(args) {
    case 1: {
      __array__ := [args[1], 0, $.length.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], $.length.Call(args[1])]
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __list__ := __array__[1]
      __start__ := __array__[2]
      __end__ := __array__[3]
    }
  }
  return [__list__, __start__, __end__]
}
shell_21(args*) {
  __array__ := __pickArgumentSlice__.Call(args)
  __list__ := __array__[1]
  __start__ := __array__[2]
  __end__ := __array__[3]
  __len__ := $.length.Call(__list__)
  if (__start__ > __len__) {
    __start__ := __len__
  }
  if (__start__ < 0) {
    __start__ := __len__ + __start__
  }
  if (__end__ > __len__) {
    __end__ := __len__
  }
  if (__end__ < 0) {
    __end__ := __len__ + __end__
  }
  __isReverse__ := false
  if (__start__ > __end__) {
    __isReverse__ := true
    __array__ := [__end__, __start__]
    __start__ := __array__[1]
    __end__ := __array__[2]
  }
  __listNew__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    $.push.Call(__listNew__, __list__[__ci_shell__.Call(__start__ + __n__)])
    __n__++
  }
  if (__isReverse__) {
    return $.reverse.Call(__listNew__)
  }
  return __listNew__
}
shell_22(time) {
  if !(time > 0) {
    throw Exception("$.sleep: time is required")
  }
  Sleep, % time
}
shell_23(__split__, list) {
  __string__ := $.join.Call(list, ",")
  Sort, __string__, Random D,
  return __split__.Call(__string__, ",")
}
shell_24(callback, time) {
  callback := $.bind.Call(callback)
  if !($.isNumber.Call(time)) {
    throw Exception("$.setTimeout: invalid type")
  }
  if (time <= 0) {
    time := 1
  }
  SetTimer, % callback, % 0 - time
  return callback
}
shell_25(target, style) {
  if !(target) {
    throw Exception("$.setStyle: target is required")
  }
  if !(style) {
    throw Exception("$.setStyle: style is required")
  }
  __target__ := "ahk_exe " . (target) . ""
  WinSet, Style, % style, % __target__
}
shell_26(callback, time) {
  callback := $.bind.Call(callback)
  if !(time > 0) {
    throw Exception("$.setInterval: invalid value")
  }
  SetTimer, % callback, % time
  return callback
}
shell_27(isFixed := "Toggle") {
  if (isFixed != "Toggle") {
    if (isFixed) {
      isFixed := "On"
    } else {
      isFixed := "Off"
    }
  }
  Winset AlwaysOnTop, % isFixed, A
}
shell_28(n) {
  return Round(n)
}
shell_29(list) {
  __len__ := $.length.Call(list)
  __listNew__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    __listNew__[__ci_shell__.Call(__len__ - 1 - __i__)] := __item__
  }
  for __i__, __item__ in __listNew__ {
    __i__ := __i__ - 1
    list[__ci_shell__.Call(__i__)] := __item__
  }
  return list
}
shell_30(input, searchment, replacement, limit := -1) {
  return StrReplace(input, searchment, replacement, limit)
}
shell_31() {
  Reload
}
shell_32(args*) {
  switch $.length.Call(args) {
    case 1: {
      __array__ := [0, args[1], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 2: {
      __array__ := [args[1], args[2], 1]
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    case 3: {
      __array__ := args
      __start__ := __array__[1]
      __end__ := __array__[2]
      __step__ := __array__[3]
    }
    default: {
      throw Exception("$.range: invalid arguments")
    }
  }
  if (__start__ == __end__) {
    return [__start__]
  }
  if (__start__ > __end__) {
    return []
  }
  __listResult__ := []
  __n__ := 0
  __max__ := __end__ - __start__
  while (__n__ < __max__) {
    $.push.Call(__listResult__, __start__ + __step__ * __n__)
    __n__++
  }
  return __listResult__
}
shell_33(min := 0, max := 1) {
  Random, __result__, min, max
  return __result__
}
shell_34(list, args*) {
  for __index_for__, __arg__ in args {
    list.Push(__arg__)
  }
  return list
}
shell_35(listInput) {
  if !($.length.Call(listInput)) {
    return false
  }
  __key__ := listInput[1]
  if ($.includes.Call(__key__, "-button")) {
    __key__ := $.replace.Call(__key__, "l-button", "left")
    __key__ := $.replace.Call(__key__, "m-button", "middle")
    __key__ := $.replace.Call(__key__, "r-button", "right")
    $.click.Call(__key__)
    return false
  }
  return true
}
shell_36(listInput) {
  __listKey__ := []
  for __index_for__, __input__ in listInput {
    __ipt__ := $.toLowerCase.Call(__input__)
    __ipt__ := $.replace.Call(__ipt__, " ", "")
    __ipt__ := $.replace.Call(__ipt__, "-", "")
    $.push.Call(__listKey__, ($.split.Call(__ipt__, "+"))*)
  }
  return __listKey__
}
shell_37(listInput*) {
  if !(__validateInputPress__.Call(listInput)) {
    return
  }
  __listKey__ := __formatInputPress__.Call(listInput)
  __listResult__ := []
  __len__ := $.length.Call(__listKey__)
  for __i__, __key__ in __listKey__ {
    __i__ := __i__ - 1
    if (__i__ == __len__ - 1) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      continue
    }
    if ($.includes.Call(__key__, ":")) {
      __listResult__[__ci_shell__.Call(__i__)] := $.split.Call(__key__, ":")
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := $.split.Call(__key__, ":")
    } else {
      __listResult__[__ci_shell__.Call(__i__)] := [__key__, "down"]
      __listResult__[__ci_shell__.Call((__len__ - 1) * 2 - __i__)] := [__key__, "up"]
    }
  }
  for __i__, __it__ in __listResult__ {
    __i__ := __i__ - 1
    if (__it__[1] == "win") {
      __it__[1] := "lwin"
    }
    __listResult__[__ci_shell__.Call(__i__)] := $.trim.Call("" . (__it__[1]) . " " . (__it__[2]) . "")
  }
  __result__ := ""
  for __index_for__, __it__ in __listResult__ {
    __result__ := "" . (__result__) . "{" . (__it__) . "}"
  }
  Send, % __result__
}
shell_38(filename) {
  SoundPlay, % filename
}
shell_39(source) {
  Run, % source
}
shell_40(__i__, callback, args*) {
  if (__cacheOnce__[__ci_shell__.Call(__i__)][1]) {
    return __cacheOnce__[__ci_shell__.Call(__i__)][2]
  }
  __result__ := callback.Call(args*)
  __cacheOnce__[__ci_shell__.Call(__i__)] := [true, __result__]
  return __result__
}
shell_41(callback) {
  __i__ := __indexOnce__
  __indexOnce__++
  __cacheOnce__[__ci_shell__.Call(__i__)] := [false, ""]
  return Func("shell_40").Bind(__i__, callback)
}
shell_42(list, n := 0) {
  if (n >= 0) {
    return list[__ci_shell__.Call(n)]
  } else {
    return list[__ci_shell__.Call(($.length.Call(list)) + n)]
  }
}
shell_43() {
  return A_TickCount
}
shell_44() {
  return
}
shell_45(point := "", speed := 0) {
  MouseMove, point[1], point[2], speed
}
shell_46(dividend, divisor) {
  return Mod(dividend, divisor)
}
shell_47(args*) {
  if !($.length.Call(args)) {
    throw Exception("$.mixin: invalid arguments")
  }
  __result__ := args[1]
  for __index_for__, __item__ in $.tail.Call(args) {
    for __key__, __value__ in __item__ {
      __result__[__ci_shell__.Call(__key__)] := __value__
    }
  }
  return __result__
}
shell_48(target := "") {
  if !(target) {
    throw Exception("$.minimize: target is required")
  }
  __target__ := "ahk_exe " . (target) . ""
  WinMinimize, % __target__
}
shell_49(target) {
  if !(target) {
    throw Exception("$.maximize: target is required")
  }
  __target__ := "ahk_exe " . (target) . ""
  WinMaximize, % __target__
}
shell_50(list, callback) {
  __listResult__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    $.push.Call(__listResult__, callback.Call(__item__, __i__))
  }
  return __listResult__
}
shell_51(value, other) {
  return value <= other
}
shell_52(value, other) {
  return value < other
}
shell_53(input) {
  __type__ := $.type.Call(input)
  switch __type__ {
    case "array": {
      return input.Length()
    }
    case "object": {
      return input.Count()
    }
    case "string": {
      return StrLen(input)
    }
    default: {
      throw Exception("$.length: invalid type '" . (__type__) . "'")
    }
  }
}
shell_54(list) {
  return list[__ci_shell__.Call(($.length.Call(list)) - 1)]
}
shell_55(input) {
  __listResult__ := []
  for __key__, __value__ in input {
    $.push.Call(__listResult__, __key__)
  }
  return $.sort.Call(__listResult__)
}
shell_56(__name__, __item__) {
  __item__[1] != __name__
}
shell_57(this, key) {
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return
  }
  __listNew__ := $.filter.Call(this.mapCallback[__ci_shell__.Call(key)], Func("shell_56").Bind(__name__))
  if !($.length.Call(__listNew__)) {
    this.mapCallback[__ci_shell__.Call(key)] := ""
    this.off.Call(key, this.mapBound[__ci_shell__.Call(key)])
    return
  }
  this.mapCallback[__ci_shell__.Call(key)] := __listNew__
}
shell_58(this, key, callback) {
  key := $.formatHotkey.Call($.replace.Call(key, ":down", ""))
  Hotkey, % key, % callback, On
}
shell_59(this, key, callback) {
  key := $.formatHotkey.Call($.replace.Call(key, ":down", ""))
  Hotkey, % key, % callback, Off
}
shell_60(key, this) {
  this.fire.Call(key)
}
shell_61(this, key) {
  if (this.mapCallback[__ci_shell__.Call(key)]) {
    return
  }
  this.mapCallback[__ci_shell__.Call(key)] := []
  __fn__ := Func("shell_60").Bind(key, this)
  this.mapBound[__ci_shell__.Call(key)] := __fn__
  this.on.Call(key, __fn__)
}
shell_62(this, key) {
  __array__ := $.split.Call(($.replace.Call(key, ":down", "")), ".")
  key := __array__[1]
  __name__ := __array__[2]
  if !(__name__) {
    for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
      __item__[2].Call()
    }
    return
  }
  for __index_for__, __item__ in this.mapCallback[__ci_shell__.Call(key)] {
    if !(__item__[1] == __name__) {
      continue
    }
    __item__[2].Call()
    return
  }
}
shell_63(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  key := __array__[1]
  __name__ := __array__[2]
  this.init.Call(key)
  $.push.Call(this.mapCallback[__ci_shell__.Call(key)], [__name__, callback])
}
shell_64(list, seperator := ",") {
  __result__ := ""
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(__i__) {
      __result__ := __item__
      continue
    }
    __result__ := "" . (__result__) . "" . (seperator) . "" . (__item__) . ""
  }
  return __result__
}
shell_65(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "string") {
    return false
  }
  return true
}
shell_66(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "object") {
    return false
  }
  return true
}
shell_67(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "number") {
    return false
  }
  return true
}
shell_68(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "function") {
    return false
  }
  return true
}
shell_69(target) {
  return WinExist("ahk_exe " . (target) . "")
}
shell_70(input) {
  __type__ := $.type.Call(input)
  if !(__type__ == "array") {
    return false
  }
  return true
}
shell_71(target) {
  return WinActive("ahk_exe " . (target) . "")
}
shell_72(message, p := "") {
  if !(message) {
    return message
  }
  if !(p) {
    p := $.getPosition.Call()
  }
  __msg__ := $.toString.Call(message)
  ToolTip, % __msg__, % p[1], % p[2]
  return message
}
shell_73(input, needle) {
  __type__ := $.type.Call(input)
  if (__type__ == "string" || __type__ == "number") {
    return (InStr(input, needle)) > 0
  }
  if (__type__ == "array") {
    for __index_for__, __it__ in input {
      if (__it__ == needle) {
        return true
      }
    }
    return false
  }
  throw Exception("$.includes: invalid type '" . (__type__) . "'")
}
shell_74(message) {
  $.info.Call("[" . ($.now.Call()) . "] " . ($.toString.Call(message)) . "", [0, 0])
  return message
}
shell_75(value, other) {
  return value >= other
}
shell_76(value, other) {
  return value > other
}
shell_77(key) {
  key := $.formatHotkey.Call(key)
  return GetKeyState(key, "P")
}
shell_78() {
  MouseGetPos, __x__, __y__
  return [__x__, __y__]
}
shell_79(p := "") {
  if !(p) {
    p := $.getPosition.Call()
  }
  PixelGetColor, __result__, % p[1], % p[2], RGB
  return __result__
}
shell_80(url, callback) {
  try {
    whr := ComObjCreate("WinHttp.WinHttpRequest.5.1")
    whr.Open("GET", url, true)
    whr.Send()
    whr.WaitForResponse()
    callback.Call(whr.ResponseText)
  } catch {
    callback.Call("")
  }
}
shell_81(listKey) {
  if (($.length.Call(listKey)) == 1) {
    return ["", listKey]
  }
  __prefix__ := ""
  __listNew__ := []
  for __index_for__, __key__ in listKey {
    if (__key__ == "alt") {
      __prefix__ := "" . (__prefix__) . "!"
      continue
    }
    if (__key__ == "ctrl") {
      __prefix__ := "" . (__prefix__) . "^"
      continue
    }
    if (__key__ == "shift") {
      __prefix__ := "" . (__prefix__) . "+"
      continue
    }
    if (__key__ == "win") {
      __prefix__ := "" . (__prefix__) . "#"
      continue
    }
    $.push.Call(__listNew__, __key__)
  }
  return [__prefix__, __listNew__]
}
shell_82(key) {
  __listKey__ := []
  __key__ := $.toLowerCase.Call(key)
  __key__ := $.replace.Call(__key__, " ", "")
  __key__ := $.replace.Call(__key__, "-", "")
  $.push.Call(__listKey__, ($.split.Call(__key__, "+"))*)
  return __listKey__
}
shell_83(key) {
  __listKey__ := __formatKeyFormatHotkey__.Call(key)
  __array__ := __pickPrefixFormatHotkey__.Call(__listKey__)
  __prefix__ := __array__[1]
  __listKey__ := __array__[2]
  __result__ := ""
  for __index_for__, __it__ in __listKey__ {
    __result__ := "" . (__result__) . " & " . (__it__) . ""
  }
  return $.replace.Call("" . (__prefix__) . "" . ($.trim.Call(__result__, " &")) . "", ":", " ")
}
shell_84(n) {
  return Floor(n)
}
shell_85(list) {
  return list[1]
}
shell_86(source, start := "", end := "") {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  ImageSearch __x__, __y__, start[1], start[2], end[1], end[2], % A_ScriptDir . "\\\" . source
  return [__x__, __y__]
}
shell_87(color, start := "", end := "", variation := 0) {
  if !(start) {
    start := [0, 0]
  }
  if !(end) {
    end := [A_ScreenWidth, A_ScreenHeight]
  }
  PixelSearch __x__, __y__, start[1], start[2], end[1], end[2], color, variation, Fast RGB
  return [__x__, __y__]
}
shell_88(list, callback) {
  __listResult__ := []
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    if !(callback.Call(__item__, __i__)) {
      continue
    }
    $.push.Call(__listResult__, __item__)
  }
  return __listResult__
}
shell_89(name) {
  return new FileShellX(name)
}
shell_90(this, content) {
  this.delete.Call()
  return this.append.Call(content)
}
shell_91(this) {
  if !(this.exist.Call()) {
    return ""
  }
  FileRead, __result__, % this.name
  return $.replace.Call(__result__, "`r", "")
}
shell_92(this) {
  if !(this.exist.Call()) {
    return this
  }
  FileDelete, % this.name
  return this
}
shell_93(this) {
  if !(FileExist(this.name)) {
    return false
  }
  return true
}
shell_94(this, content) {
  FileAppend, % content, % this.name, UTF-8
  return content
}
shell_95() {
  ExitApp
}
shell_96(value, other) {
  __typeA__ := $.type.Call(value)
  __typeB__ := $.type.Call(other)
  if !(__typeA__ == __typeB__) {
    return false
  }
  if ($.includes.Call(["function", "number", "string"], __typeA__)) {
    return value == other
  }
  __lengthA__ := $.length.Call(value)
  __lengthB__ := $.length.Call(other)
  if !(__lengthA__ == __lengthB__) {
    return false
  }
  if (__typeA__ == "array") {
    for __i__, __it__ in value {
      __i__ := __i__ - 1
      if !(__eq__.Call(__it__, other[__ci_shell__.Call(__i__)])) {
        return false
      }
    }
    return true
  }
  for __k__, __v__ in value {
    if !(__eq__.Call(__v__, other[__ci_shell__.Call(__k__)])) {
      return false
    }
  }
  return true
}
shell_97() {
  return new EmitterShellX
}
shell_98(this, key, callback) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  $.push.Call(this.bus, [__type__, __name__, callback])
  return this
}
shell_99(this, key) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    this.bus := []
    return this
  }
  if !(__name__) {
    __busNew__ := []
    for __index_for__, __item__ in this.bus {
      if (__item__[1] == __type__) {
        continue
      }
      $.push.Call(__busNew__, __item__)
    }
    this.bus := __busNew__
    return this
  }
  __busNew__ := []
  for __index_for__, __item__ in this.bus {
    if (__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    $.push.Call(__busNew__, __item__)
  }
  this.bus := __busNew__
  return this
}
shell_100(this, key, args*) {
  __array__ := $.split.Call(key, ".")
  __type__ := __array__[1]
  __name__ := __array__[2]
  if !(__type__) {
    return this
  }
  if !(__name__) {
    for __index_for__, __item__ in this.bus {
      if !(__item__[1] == __type__) {
        continue
      }
      __item__[3].Call(args*)
    }
    return this
  }
  for __index_for__, __item__ in this.bus {
    if !(__item__[1] == __type__ && __item__[2] == __name__) {
      continue
    }
    __item__[3].Call(args*)
  }
  return this
}
shell_101(list, callback) {
  for __i__, __item__ in list {
    __i__ := __i__ - 1
    callback.Call(__item__, __i__)
  }
}
shell_102(n, _it, i) {
  return i >= n
}
shell_103(list, n := 1) {
  return $.filter.Call(list, Func("shell_102").Bind(n))
}
shell_104(callback, args) {
  callback.Call(args*)
}
shell_105(callback, time, args*) {
  __timer__ := $.setTimeout.Call(Func("shell_104").Bind(callback, args), time)
  return __timer__
}
shell_106(callback, args) {
  callback.Call(args*)
}
shell_107(callback, args*) {
  return $.delay.Call(Func("shell_106").Bind(callback, args), 1)
}
shell_108(callback, time, index) {
  $.clearTimeout.Call(__tDebounce__[__ci_shell__.Call(index)])
  __tDebounce__[__ci_shell__.Call(index)] := $.setTimeout.Call(callback, time)
}
shell_109(time, callback) {
  __iDebounce__++
  return Func("shell_108").Bind(callback, time, __iDebounce__)
}
shell_110(text, callback) {
  
  MsgBox, 0x4,, % text`
  IfMsgBox Yes
    callback.Call(true)
  else
    callback.Call(false)
  
}
shell_111(list, args*) {
  __listNew__ := $.clone.Call(list)
  for __index_for__, __arg__ in args {
    __type__ := $.type.Call(__arg__)
    if (__type__ == "array") {
      for __index_for__, __item__ in __arg__ {
        $.push.Call(__listNew__, __item__)
      }
    } else {
      $.push.Call(__listNew__, __arg__)
    }
  }
  return __listNew__
}
shell_112(it) {
  return it
}
shell_113(list) {
  return $.filter.Call(list, Func("shell_112"))
}
shell_114(target) {
  if !(target) {
    throw Exception("$.close: target is required")
  }
  __target__ := "ahk_exe " . (target) . ""
  WinClose, % __target__
}
shell_115(input) {
  __type__ := $.type.Call(input)
  if (__type__ == "array") {
    return $.slice.Call(input)
  }
  if (__type__ == "object") {
    __mapNew__ := {}
    for __key__, __value__ in input {
      __mapNew__[__ci_shell__.Call(__key__)] := __value__
    }
    return __mapNew__
  }
  throw Exception("$.clone: invalid type '" . (__type__) . "'")
}
shell_116(key := "left") {
  key := $.replace.Call(key, "-", "")
  key := $.replace.Call(key, ":", " ")
  Click, % key
}
shell_117(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_118(callback) {
  if !(callback) {
    return
  }
  SetTimer, % callback, Delete
}
shell_119(list, n := 1) {
  __listNew__ := []
  __length__ := $.length.Call(list)
  __i__ := 0
  while (__i__ < __length__ / n) {
    __listTemp__ := []
    __j__ := 0
    while (__j__ < n) {
      __index__ := __i__ * n + __j__
      if !(__index__ < __length__) {
        break
      }
      $.push.Call(__listTemp__, list[__ci_shell__.Call(__index__)])
      __j__++
    }
    $.push.Call(__listNew__, __listTemp__)
    __i__++
  }
  return __listNew__
}
shell_120(n) {
  return Ceil(n)
}
shell_121(block) {
  if (block) {
    BlockInput, On
    return
  }
  BlockInput, Off
}
shell_122(callback, args*) {
  if !(callback.Name) {
    if !($.length.Call(args)) {
      return callback
    }
    throw Exception("$.bind: cannot bind a bound function")
  }
  return callback.Bind(args*)
}
shell_123() {
  SoundBeep
}
shell_124(msg) {
  return $.toString.Call(msg)
}
shell_125(message*) {
  __msg__ := $.join.Call(($.map.Call(message, Func("shell_124"))), ", ")
  MsgBox, % __msg__
}
shell_126(args*) {
  __result__ := 0
  for __index_for__, __arg__ in args {
    __result__ := __result__ + __arg__
  }
  return __result__
}
shell_127(target) {
  if !(target) {
    throw Exception("$.activate: target is required")
  }
  __target__ := "ahk_exe " . (target) . ""
  WinActivate, % __target__
}
shell_128(n) {
  return Abs(n)
}
shell_129(input) {
  if input is Number
    return input + 1
  return input
}

global state := {}
class Config {
  data := {}
  source := "config.ini"
  __New() {
    this.data.isDebug := this.read.Call("debug/debug", 0)
    this.data.path := this.read.Call("basic/path", 0)
    this.data.process := this.read.Call("basic/process", "GenshinImpact.exe")
    this.data.weakNetwork := this.read.Call("basic/weak-network", 0)
    this.data.betterJump := this.read.Call("feature/enable-better-jump", 1)
    this.data.fastPickup := this.read.Call("feature/enable-fast-pickup", 1)
    this.data.quickEvent := this.read.Call("feature/enable-quick-event", 1)
    this.data.skillTimer := this.read.Call("feature/enable-skill-timer", 1)
  }
  read := Func("genshin_42").Bind(this)
}
global Config := new Config()
class Timer {
  cacheTimer := {}
  cacheTs := {}
  add := Func("genshin_41").Bind(this)
  checkInterval := Func("genshin_40").Bind(this)
  loop := Func("genshin_39").Bind(this)
  pick := Func("genshin_38").Bind(this)
  reset := Func("genshin_37").Bind(this)
  remove := Func("genshin_36").Bind(this)
}
global Timer := new Timer()
class Client extends EmitterShellX {
  height := 0
  isFullScreen := false
  isSuspend := false
  left := 0
  top := 0
  width := 0
  __New() {
    base.__New()
    Menu, Tray, Icon, on.ico,, 1
    if !($.isExisted.Call(Config.data.process)) {
      if (Config.data.path) {
        $.open.Call(Config.data.path)
      }
    }
    $.wait.Call(Config.data.process, this.init)
  }
  getSize := Func("genshin_35").Bind(this)
  init := Func("genshin_34").Bind(this)
  report := Func("genshin_25").Bind(this)
  reset := Func("genshin_24").Bind(this)
  setStyle := Func("genshin_23").Bind(this)
  suspend := Func("genshin_22").Bind(this)
  setPriority := Func("genshin_21").Bind(this)
  update := Func("genshin_20").Bind(this)
  watch := Func("genshin_19").Bind(this)
}
global Client := new Client()
class Console {
  isChanged := false
  lifetime := 10000
  listContent := []
  __New() {
    if !(Config.data.isDebug) {
      return
    }
    Client.on.Call("pause", this.hide)
    this.watch.Call()
  }
  add := Func("genshin_18").Bind(this)
  hide := Func("genshin_17").Bind(this)
  log := Func("genshin_16").Bind(this)
  render := Func("genshin_15").Bind(this)
  update := Func("genshin_13").Bind(this)
  watch := Func("genshin_11").Bind(this)
}
global console := new Console()
ShiftAppVolumeTopped( appName, incr )
{
    if !appName
    {
        WinGet, activePID, ID, A
        WinGet, activeName, ProcessName, ahk_id %activePID%
        appName := activeName
    }

    IMMDeviceEnumerator := ComObjCreate( "{BCDE0395-E52F-467C-8E3D-C4579291692E}", "{A95664D2-9614-4F35-A746-DE8DB63617E6}" )
    DllCall( NumGet( NumGet( IMMDeviceEnumerator+0 ) + 4*A_PtrSize ), "UPtr", IMMDeviceEnumerator, "UInt", 0, "UInt", 1, "UPtrP", IMMDevice, "UInt" )
    ObjRelease(IMMDeviceEnumerator)

    VarSetCapacity( GUID, 16 )
    DllCall( "Ole32.dll\CLSIDFromString", "Str", "{77AA99A0-1BD6-484F-8BC7-2C654C9A9B6F}", "UPtr", &GUID)
    DllCall( NumGet( NumGet( IMMDevice+0 ) + 3*A_PtrSize ), "UPtr", IMMDevice, "UPtr", &GUID, "UInt", 23, "UPtr", 0, "UPtrP", IAudioSessionManager2, "UInt" )
    ObjRelease( IMMDevice )

    DllCall( NumGet( NumGet( IAudioSessionManager2+0 ) + 5*A_PtrSize ), "UPtr", IAudioSessionManager2, "UPtrP", IAudioSessionEnumerator, "UInt" )
    ObjRelease( IAudioSessionManager2 )

    DllCall( NumGet( NumGet( IAudioSessionEnumerator+0 ) + 3*A_PtrSize ), "UPtr", IAudioSessionEnumerator, "UIntP", SessionCount, "UInt" )
    Loop % SessionCount
    {
        DllCall( NumGet( NumGet( IAudioSessionEnumerator+0 ) + 4*A_PtrSize ), "UPtr", IAudioSessionEnumerator, "Int", A_Index-1, "UPtrP", IAudioSessionControl, "UInt" )
        IAudioSessionControl2 := ComObjQuery( IAudioSessionControl, "{BFB7FF88-7239-4FC9-8FA2-07C950BE9C6D}" )
        ObjRelease( IAudioSessionControl )

        DllCall( NumGet( NumGet( IAudioSessionControl2+0 ) + 14*A_PtrSize ), "UPtr", IAudioSessionControl2, "UIntP", PID, "UInt" )

        PHandle := DllCall( "OpenProcess", "uint", 0x0010|0x0400, "Int", false, "UInt", PID )
        if !( ErrorLevel or PHandle = 0 )
        {
            name_size = 1023
            VarSetCapacity( PName, name_size )
            DllCall( "psapi.dll\GetModuleFileNameEx" . ( A_IsUnicode ? "W" : "A" ), "UInt", PHandle, "UInt", 0, "Str", PName, "UInt", name_size )
            DllCall( "CloseHandle", PHandle )
            SplitPath PName, PName
            if ( PName = appName )
            {
                ISimpleAudioVolume := ComObjQuery(IAudioSessionControl2, "{87CE5498-68D6-44E5-9215-6DA47EF883D8}")
                DllCall( NumGet( NumGet( ISimpleAudioVolume+0 ) + 6*A_PtrSize ), "UPtr", ISimpleAudioVolume, "IntP", muted )  ; Get mute status
                if incr
                {
                    DllCall( NumGet( NumGet( ISimpleAudioVolume+0 ) + 4*A_PtrSize ), "UPtr", ISimpleAudioVolume, "FloatP", level, "UInt" )  ; Get volume
                    DllCall( NumGet( NumGet( ISimpleAudioVolume+0 ) + 3*A_PtrSize ), "UPtr", ISimpleAudioVolume, "Float", max( 0.0, min( 1.0, level + incr ) ) , "UPtr", 0, "UInt" )  ; Set volume
                    if muted
                        DllCall( NumGet( NumGet( ISimpleAudioVolume+0 ) + 5*A_PtrSize ), "UPtr", ISimpleAudioVolume, "Int", !muted , "UPtr", 0, "UInt" )  ; Unmute
                }
                else
                {
                    DllCall( NumGet( NumGet( ISimpleAudioVolume+0 ) + 5*A_PtrSize ), "UPtr", ISimpleAudioVolume, "Int", !muted , "UPtr", 0, "UInt" )  ; Set volume
                }
                ObjRelease(ISimpleAudioVolume)
            }
        }
        ObjRelease(IAudioSessionControl2)
    }
    ObjRelease(IAudioSessionEnumerator)
}
class Sound {
  index := 0
  __New() {
    Client.on.Call("pause", Func("genshin_8"))
    Client.on.Call("resume", Func("genshin_7"))
    ShiftAppVolumeTopped(Config.data.process, 1)
  }
  beep := Func("genshin_6").Bind(this)
  play := Func("genshin_4").Bind(this)
}
global Sound := new Sound()
class Transparent {
  opacity := 100
  __New() {
    $.on.Call("alt + up", this.minus)
    $.on.Call("alt + down", this.add)
  }
  add := Func("genshin_3").Bind(this)
  minus := Func("genshin_2").Bind(this)
  render := Func("genshin_1").Bind(this)
}
global Transparent := new Transparent()
genshin_1(this) {
  name := "ahk_exe " . (Config.data.process) . ""
  opacity := 255 * (this.opacity / 100)
  WinSet, Transparent, % opacity, % name
}
genshin_2(this) {
  opacity := this.opacity - 10
  if (opacity < 0) {
    opacity := 0
  }
  this.opacity := opacity
  this.render.Call()
}
genshin_3(this) {
  opacity := this.opacity + 10
  if (opacity > 100) {
    opacity := 100
  }
  this.opacity := opacity
  this.render.Call()
}
genshin_4(this, name) {
  $.play.Call("audio/" . (name) . "")
}
genshin_5(n, callback, this) {
  $.beep.Call()
  this.index++
  if (this.index >= n) {
    Timer.remove.Call("sound/beep")
    if (callback) {
      callback.Call()
    }
  }
}
genshin_6(this, n := 1, callback := "") {
  $.beep.Call()
  if (n == 1) {
    if (callback) {
      callback.Call()
    }
    return
  }
  this.index := 1
  Timer.loop.Call("sound/beep", 200, Func("genshin_5").Bind(n, callback, this), 200)
}
genshin_7() {
  ShiftAppVolumeTopped(Config.data.process, 1)
}
genshin_8() {
  ShiftAppVolumeTopped(Config.data.process, 0)
}
genshin_9(interval, this) {
  Timer.loop.Call("console/watch", interval, this.update)
}
genshin_10() {
  Timer.remove.Call("console/watch")
}
genshin_11(this) {
  interval := 500
  Client.on.Call("pause", Func("genshin_10"))
  Client.on.Call("resume", Func("genshin_9").Bind(interval, this))
  Timer.loop.Call("console/watch", interval, this.update)
}
genshin_12(now, item) {
  return item[1] >= now
}
genshin_13(this) {
  now := $.now.Call()
  len := $.length.Call(this.listContent)
  this.listContent := $.filter.Call(this.listContent, Func("genshin_12").Bind(now))
  if (len != $.length.Call(this.listContent)) {
    this.render.Call()
  }
}
genshin_14(item) {
  return item[2]
}
genshin_15(this) {
  list := $.map.Call(this.listContent, Func("genshin_14"))
  text := $.join.Call(list, "`n")
  text := $.trim.Call(text, " `n")
  left := 0 - Client.left
  top := Client.height * 0.5
  ToolTip, % text, % left, % top, 20
}
genshin_16(this, input) {
  if (($.type.Call(input)) == "array") {
    for __index_for__, msg in input {
      this.add.Call(msg)
    }
  } else {
    this.add.Call(input)
  }
  this.render.Call()
  return input
}
genshin_17(this) {
  ToolTip,, 0, 0, 20
}
genshin_18(this, msg) {
  id := ""
  if ($.includes.Call(msg, ":")) {
    __array__ := $.split.Call(msg, ":")
    id := __array__[1]
  }
  tsOutdate := $.now.Call() + this.lifetime
  if !(id) {
    $.push.Call(this.listContent, [tsOutdate, msg, id])
  }
  hasId := false
  for i, item in this.listContent {
    i := i - 1
    if !(id == item[3]) {
      continue
    }
    hasId := true
    this.listContent[__ci_genshin__.Call(i)] := [tsOutdate, msg, id]
    break
  }
  if (hasId) {
    return
  }
  $.push.Call(this.listContent, [tsOutdate, msg, id])
}
genshin_19(this) {
  interval := 100
  Timer.loop.Call(interval, this.update)
}
genshin_20(this) {
  if !($.isActive.Call(Config.data.process)) {
    if !(this.isSuspend) {
      this.emit.Call("pause")
    }
    return
  }
  if (this.isSuspend) {
    this.emit.Call("resume")
    return
  }
}
genshin_21(this, level) {
  Process, Priority, % Config.data.process, % level
}
genshin_22(this, isSuspend) {
  if (isSuspend) {
    if (this.isSuspend) {
      return
    }
    this.isSuspend := true
    $.suspend.Call(true)
    this.resetTimer.Call()
    return
  }
  if !(isSuspend) {
    if !(this.isSuspend) {
      return
    }
    this.isSuspend := false
    $.suspend.Call(false)
    return
  }
}
genshin_23(this) {
  $.setStyle.Call(Config.data.process, -0x00040000)
  $.setStyle.Call(Config.data.process, -0x00C00000)
  if (this.isFullScreen) {
    return
  }
  width := ($.round.Call(this.width / 80)) * 80
  height := $.round.Call(width / 16 * 9)
  left := (A_ScreenWidth - width) * 0.5
  top := (A_ScreenHeight - height) * 0.5
  name := "ahk_exe " . (Config.data.process) . ""
  WinMove, % name,, % left, % top, % width, % height
  this.getSize.Call()
}
genshin_24(this) {
  this.setPriority.Call("normal")
  Timer.reset.Call()
}
genshin_25(this) {
  console.log.Call(["client/is-fullscreen: " . (this.isFullScreen) . "", "client/position: " . (this.left) . ", " . (this.top) . "", "client/size: " . (this.width) . ", " . (this.height) . ""])
}
genshin_26(this) {
  this.report.Call()
  Upgrader.check.Call()
}
genshin_27(this) {
  $.press.Call("alt + enter")
  this.getSize.Call()
  this.setStyle.Call()
  Timer.add.Call(1000, this.report)
}
genshin_28(this) {
  this.reset.Call()
  $.reload.Call()
}
genshin_29() {
  Sound.beep.Call(3, Func("genshin_28").Bind(this))
}
genshin_30(this) {
  this.reset.Call()
  if (Config.data.path) {
    $.minimize.Call(Config.data.process)
    $.close.Call(Config.data.process)
  }
  $.exit.Call()
}
genshin_31(this) {
  Sound.beep.Call(2, Func("genshin_30").Bind(this))
}
genshin_32(this) {
  Menu, Tray, Icon, on.ico
  this.suspend.Call(false)
  this.setPriority.Call("normal")
  this.getSize.Call()
  this.setStyle.Call()
  Timer.add.Call(1000, this.getSize)
}
genshin_33(this) {
  Menu, Tray, Icon, off.ico
  this.suspend.Call(true)
  this.setPriority.Call("low")
}
genshin_34(this) {
  $.activate.Call(Config.data.process)
  this.watch.Call()
  this.on.Call("pause", Func("genshin_33").Bind(this))
  this.on.Call("resume", Func("genshin_32").Bind(this))
  this.setPriority.Call("normal")
  this.getSize.Call()
  this.setStyle.Call()
  $.on.Call("alt + f4", Func("genshin_31").Bind(this))
  $.on.Call("ctrl + f5", Func("genshin_29"))
  $.on.Call("alt + enter", Func("genshin_27").Bind(this))
  Timer.add.Call(1000, Func("genshin_26").Bind(this))
}
genshin_35(this) {
  name := "ahk_exe " . (Config.data.process) . ""
  WinGetPos, __left__, __top__, __width__, __height__, % name
  this.left := __left__
  this.top := __top__
  this.width := __width__
  this.height := __height__
  for __index_for__, key in ["left", "top", "width", "height"] {
    if !(this[__ci_genshin__.Call(key)]) {
      this[__ci_genshin__.Call(key)] := 0
    }
  }
  if (this.left == 0 && this.top == 0 && this.width == A_ScreenWidth && this.height == A_ScreenHeight) {
    this.isFullScreen := true
  } else {
    this.isFullScreen := false
  }
}
genshin_36(this, id) {
  if !(this.cacheTimer[__ci_genshin__.Call(id)]) {
    return
  }
  $.clearTimeout.Call(this.cacheTimer[__ci_genshin__.Call(id)])
}
genshin_37(this) {
  for __key_for__, t in this.cacheTimer {
    $.clearTimeout.Call(t)
  }
}
genshin_38(this, args) {
  len := $.length.Call(args)
  if (len == 1) {
    return [args[1], 0, 0]
  } else if (len == 2) {
    return ["", args[1], args[2]]
  } else {
    return args
  }
}
genshin_39(this, args*) {
  if (Client.isSuspend) {
    return
  }
  __array__ := this.pick.Call(args)
  id := __array__[1]
  time := __array__[2]
  fn := __array__[3]
  hasId := !!id
  if (hasId && this.cacheTimer[__ci_genshin__.Call(id)]) {
    $.clearInterval.Call(this.cahce[__ci_genshin__.Call(id)])
  }
  if !(time) {
    return
  }
  result := $.setInterval.Call(fn, time)
  if (hasId) {
    this.cacheTimer[__ci_genshin__.Call(id)] := result
  }
}
genshin_40(this, id, time) {
  now := $.now.Call()
  if !(this.cacheTs[__ci_genshin__.Call(id)]) {
    this.cacheTs[__ci_genshin__.Call(id)] := now
    return true
  }
  if !(now - this.cacheTs[__ci_genshin__.Call(id)] > time) {
    return false
  }
  this.cacheTs[__ci_genshin__.Call(id)] := now
  return true
}
genshin_41(this, args*) {
  if (Client.isSuspend) {
    return
  }
  __array__ := this.pick.Call(args)
  id := __array__[1]
  time := __array__[2]
  fn := __array__[3]
  hasId := !!id
  if (hasId && this.cacheTimer[__ci_genshin__.Call(id)]) {
    $.clearTimeout.Call(this.cacheTimer[__ci_genshin__.Call(id)])
  }
  if !(time) {
    return
  }
  result := $.setTimeout.Call(fn, time)
  if (hasId) {
    this.cacheTimer[__ci_genshin__.Call(id)] := result
  }
}
genshin_42(this, key, defaultValue := "") {
  __array__ := $.split.Call(key, "/")
  __section__ := __array__[1]
  __key__ := __array__[2]
  IniRead, __result__, % this.source, % __section__, % __key__, % defaultValue
  return $.toLowerCase.Call(__result__)
}
genshin_43(input) {
  if input is Number
    return input + 1
  return input
}
